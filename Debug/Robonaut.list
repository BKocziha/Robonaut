
Robonaut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b334  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800b508  0800b508  0001b508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb58  0800bb58  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb58  0800bb58  0001bb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb60  0800bb60  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bb60  0800bb60  0001bb60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bb64  0800bb64  0001bb64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800bb68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  200001e0  0800bd48  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000784  0800bd48  00020784  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016737  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a17  00000000  00000000  00036947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00039360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001270  00000000  00000000  0003a6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027b4e  00000000  00000000  0003b930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018519  00000000  00000000  0006347e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f81e1  00000000  00000000  0007b997  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173b78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067d8  00000000  00000000  00173bc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         000000cc  00000000  00000000  0017a3a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      000001b9  00000000  00000000  0017a46c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b4ec 	.word	0x0800b4ec

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800b4ec 	.word	0x0800b4ec

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <BT_TransmitMsg>:

#include <string.h>
#include "main.h"

void BT_TransmitMsg(UART_HandleTypeDef *huart, unsigned char *msg_to_send)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	6039      	str	r1, [r7, #0]
	uint32_t len = strlen((char*)msg_to_send);
 8000f96:	6838      	ldr	r0, [r7, #0]
 8000f98:	f7ff f93a 	bl	8000210 <strlen>
 8000f9c:	60f8      	str	r0, [r7, #12]
	HAL_UART_Transmit(huart, (uint8_t*)msg_to_send, len, 100);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	b29a      	uxth	r2, r3
 8000fa2:	2364      	movs	r3, #100	; 0x64
 8000fa4:	6839      	ldr	r1, [r7, #0]
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f005 fd7b 	bl	8006aa2 <HAL_UART_Transmit>
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <LS_LED_Light>:
#include <stdbool.h>
#include <math.h>

// Az utolsó beadott érték mindig 33-nál nagyobb legyen!
void LS_LED_Light(SPI_HandleTypeDef *hspi, uint8_t *leds_to_light)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	; 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
	uint8_t fb_leds_on[4] = {0};
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	613b      	str	r3, [r7, #16]
	uint8_t fb_leds_on_temp[4] = {0};
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60fb      	str	r3, [r7, #12]
	for (int i=0; leds_to_light[i]<33; i++)
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fca:	e082      	b.n	80010d2 <LS_LED_Light+0x11e>
	{
		switch(leds_to_light[i]/8) {
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	683a      	ldr	r2, [r7, #0]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	08db      	lsrs	r3, r3, #3
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d877      	bhi.n	80010cc <LS_LED_Light+0x118>
 8000fdc:	a201      	add	r2, pc, #4	; (adr r2, 8000fe4 <LS_LED_Light+0x30>)
 8000fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe2:	bf00      	nop
 8000fe4:	08000ff5 	.word	0x08000ff5
 8000fe8:	0800102b 	.word	0x0800102b
 8000fec:	08001061 	.word	0x08001061
 8000ff0:	08001097 	.word	0x08001097
		case 0:
			fb_leds_on_temp[3] = 1;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	73fb      	strb	r3, [r7, #15]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
 8000ffc:	e006      	b.n	800100c <LS_LED_Light+0x58>
				fb_leds_on_temp[3] <<= 1;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	b2db      	uxtb	r3, r3
 8001004:	73fb      	strb	r3, [r7, #15]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001006:	6a3b      	ldr	r3, [r7, #32]
 8001008:	3301      	adds	r3, #1
 800100a:	623b      	str	r3, [r7, #32]
 800100c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	f003 0307 	and.w	r3, r3, #7
 8001018:	6a3a      	ldr	r2, [r7, #32]
 800101a:	429a      	cmp	r2, r3
 800101c:	dbef      	blt.n	8000ffe <LS_LED_Light+0x4a>
			}
			fb_leds_on[3] |= fb_leds_on_temp[3];
 800101e:	7cfa      	ldrb	r2, [r7, #19]
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	4313      	orrs	r3, r2
 8001024:	b2db      	uxtb	r3, r3
 8001026:	74fb      	strb	r3, [r7, #19]
			break;
 8001028:	e050      	b.n	80010cc <LS_LED_Light+0x118>
		case 1:
			fb_leds_on_temp[2] = 1;
 800102a:	2301      	movs	r3, #1
 800102c:	73bb      	strb	r3, [r7, #14]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800102e:	2300      	movs	r3, #0
 8001030:	61fb      	str	r3, [r7, #28]
 8001032:	e006      	b.n	8001042 <LS_LED_Light+0x8e>
				fb_leds_on_temp[2] <<= 1;
 8001034:	7bbb      	ldrb	r3, [r7, #14]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	73bb      	strb	r3, [r7, #14]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	3301      	adds	r3, #1
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	4413      	add	r3, r2
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	69fa      	ldr	r2, [r7, #28]
 8001050:	429a      	cmp	r2, r3
 8001052:	dbef      	blt.n	8001034 <LS_LED_Light+0x80>
			}
			fb_leds_on[2] |= fb_leds_on_temp[2];
 8001054:	7cba      	ldrb	r2, [r7, #18]
 8001056:	7bbb      	ldrb	r3, [r7, #14]
 8001058:	4313      	orrs	r3, r2
 800105a:	b2db      	uxtb	r3, r3
 800105c:	74bb      	strb	r3, [r7, #18]
			break;
 800105e:	e035      	b.n	80010cc <LS_LED_Light+0x118>
		case 2:
			fb_leds_on_temp[1] = 1;
 8001060:	2301      	movs	r3, #1
 8001062:	737b      	strb	r3, [r7, #13]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001064:	2300      	movs	r3, #0
 8001066:	61bb      	str	r3, [r7, #24]
 8001068:	e006      	b.n	8001078 <LS_LED_Light+0xc4>
				fb_leds_on_temp[1] <<= 1;
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	b2db      	uxtb	r3, r3
 8001070:	737b      	strb	r3, [r7, #13]
			for (int j=0; j<leds_to_light[i]%8; j++){
 8001072:	69bb      	ldr	r3, [r7, #24]
 8001074:	3301      	adds	r3, #1
 8001076:	61bb      	str	r3, [r7, #24]
 8001078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	4413      	add	r3, r2
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	429a      	cmp	r2, r3
 8001088:	dbef      	blt.n	800106a <LS_LED_Light+0xb6>
			}
			fb_leds_on[1] |= fb_leds_on_temp[1];
 800108a:	7c7a      	ldrb	r2, [r7, #17]
 800108c:	7b7b      	ldrb	r3, [r7, #13]
 800108e:	4313      	orrs	r3, r2
 8001090:	b2db      	uxtb	r3, r3
 8001092:	747b      	strb	r3, [r7, #17]
			break;
 8001094:	e01a      	b.n	80010cc <LS_LED_Light+0x118>
		case 3:
			fb_leds_on_temp[0] = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	733b      	strb	r3, [r7, #12]
			for (int j=0; j<leds_to_light[i]%8; j++){
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	e006      	b.n	80010ae <LS_LED_Light+0xfa>
				fb_leds_on_temp[0] <<= 1;
 80010a0:	7b3b      	ldrb	r3, [r7, #12]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	733b      	strb	r3, [r7, #12]
			for (int j=0; j<leds_to_light[i]%8; j++){
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	683a      	ldr	r2, [r7, #0]
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	429a      	cmp	r2, r3
 80010be:	dbef      	blt.n	80010a0 <LS_LED_Light+0xec>
			}
			fb_leds_on[0] |= fb_leds_on_temp[0];
 80010c0:	7c3a      	ldrb	r2, [r7, #16]
 80010c2:	7b3b      	ldrb	r3, [r7, #12]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	743b      	strb	r3, [r7, #16]
			break;
 80010ca:	bf00      	nop
	for (int i=0; leds_to_light[i]<33; i++)
 80010cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ce:	3301      	adds	r3, #1
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	683a      	ldr	r2, [r7, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2b20      	cmp	r3, #32
 80010dc:	f67f af76 	bls.w	8000fcc <LS_LED_Light+0x18>
		}
	}
	LS_LED_Send(hspi, fb_leds_on);
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f000 f804 	bl	80010f4 <LS_LED_Send>
}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	; 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}

080010f4 <LS_LED_Send>:

void LS_LED_Send(SPI_HandleTypeDef *hspi, uint8_t *leds_on)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, leds_on, 4, 100);
 80010fe:	2364      	movs	r3, #100	; 0x64
 8001100:	2204      	movs	r2, #4
 8001102:	6839      	ldr	r1, [r7, #0]
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f003 fcb6 	bl	8004a76 <HAL_SPI_Transmit>

	// Latch enable
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800110a:	2201      	movs	r2, #1
 800110c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001110:	480b      	ldr	r0, [pc, #44]	; (8001140 <LS_LED_Send+0x4c>)
 8001112:	f002 fc79 	bl	8003a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001116:	2200      	movs	r2, #0
 8001118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <LS_LED_Send+0x4c>)
 800111e:	f002 fc73 	bl	8003a08 <HAL_GPIO_WritePin>

	//Output enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	2104      	movs	r1, #4
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <LS_LED_Send+0x50>)
 8001128:	f002 fc6e 	bl	8003a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 800112c:	2200      	movs	r2, #0
 800112e:	2104      	movs	r1, #4
 8001130:	4804      	ldr	r0, [pc, #16]	; (8001144 <LS_LED_Send+0x50>)
 8001132:	f002 fc69 	bl	8003a08 <HAL_GPIO_WritePin>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00

08001148 <LS_INF_Send>:

void LS_INF_Send(SPI_HandleTypeDef *hspi, uint8_t *infs_on)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, infs_on, 4, 100);
 8001152:	2364      	movs	r3, #100	; 0x64
 8001154:	2204      	movs	r2, #4
 8001156:	6839      	ldr	r1, [r7, #0]
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f003 fc8c 	bl	8004a76 <HAL_SPI_Transmit>

	// Inf Latch enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800115e:	2201      	movs	r2, #1
 8001160:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001164:	480c      	ldr	r0, [pc, #48]	; (8001198 <LS_INF_Send+0x50>)
 8001166:	f002 fc4f 	bl	8003a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001170:	4809      	ldr	r0, [pc, #36]	; (8001198 <LS_INF_Send+0x50>)
 8001172:	f002 fc49 	bl	8003a08 <HAL_GPIO_WritePin>

	// Inf Output enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <LS_INF_Send+0x50>)
 800117e:	f002 fc43 	bl	8003a08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001182:	2200      	movs	r2, #0
 8001184:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001188:	4803      	ldr	r0, [pc, #12]	; (8001198 <LS_INF_Send+0x50>)
 800118a:	f002 fc3d 	bl	8003a08 <HAL_GPIO_WritePin>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	40020000 	.word	0x40020000

0800119c <LS_ADC_ChipSelect>:
			  HAL_Delay(100);
		  }
}

void LS_ADC_ChipSelect(int CS)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	switch(CS) {
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3b01      	subs	r3, #1
 80011a8:	2b03      	cmp	r3, #3
 80011aa:	d827      	bhi.n	80011fc <LS_ADC_ChipSelect+0x60>
 80011ac:	a201      	add	r2, pc, #4	; (adr r2, 80011b4 <LS_ADC_ChipSelect+0x18>)
 80011ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b2:	bf00      	nop
 80011b4:	080011c5 	.word	0x080011c5
 80011b8:	080011d3 	.word	0x080011d3
 80011bc:	080011e1 	.word	0x080011e1
 80011c0:	080011ef 	.word	0x080011ef
	case 1:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80011c4:	2200      	movs	r2, #0
 80011c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011ca:	481b      	ldr	r0, [pc, #108]	; (8001238 <LS_ADC_ChipSelect+0x9c>)
 80011cc:	f002 fc1c 	bl	8003a08 <HAL_GPIO_WritePin>
		break;
 80011d0:	e02d      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 2:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
 80011d2:	2200      	movs	r2, #0
 80011d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011d8:	4818      	ldr	r0, [pc, #96]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011da:	f002 fc15 	bl	8003a08 <HAL_GPIO_WritePin>
		break;
 80011de:	e026      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 3:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011e6:	4815      	ldr	r0, [pc, #84]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011e8:	f002 fc0e 	bl	8003a08 <HAL_GPIO_WritePin>
		break;
 80011ec:	e01f      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	case 4:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011f4:	4811      	ldr	r0, [pc, #68]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 80011f6:	f002 fc07 	bl	8003a08 <HAL_GPIO_WritePin>
		break;
 80011fa:	e018      	b.n	800122e <LS_ADC_ChipSelect+0x92>
	default:
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <LS_ADC_ChipSelect+0x9c>)
 8001204:	f002 fc00 	bl	8003a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
 8001208:	2201      	movs	r2, #1
 800120a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120e:	480b      	ldr	r0, [pc, #44]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 8001210:	f002 fbfa 	bl	8003a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001214:	2201      	movs	r2, #1
 8001216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800121a:	4808      	ldr	r0, [pc, #32]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 800121c:	f002 fbf4 	bl	8003a08 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
 8001220:	2201      	movs	r2, #1
 8001222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <LS_ADC_ChipSelect+0xa0>)
 8001228:	f002 fbee 	bl	8003a08 <HAL_GPIO_WritePin>
	}
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40020800 	.word	0x40020800
 800123c:	40020400 	.word	0x40020400

08001240 <LS_Holavonal_favago>:
	sum -= 32*250;
	line = (double)weighted_sum/sum;
	return line;
}

float LS_Holavonal_favago(uint16_t *ADC_values, int* summ, int* MA_sum){
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
    int m = 0;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
    int sum = 0;
 8001250:	2300      	movs	r3, #0
 8001252:	61bb      	str	r3, [r7, #24]
    float alpha = 0.1;
 8001254:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <LS_Holavonal_favago+0xd0>)
 8001256:	613b      	str	r3, [r7, #16]
    *summ = 0;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
    for(int i=0; i<32; i++){
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	e01c      	b.n	800129e <LS_Holavonal_favago+0x5e>
        if (ADC_values[i] > 2500){
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	4413      	add	r3, r2
 800126c:	881b      	ldrh	r3, [r3, #0]
 800126e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001272:	4293      	cmp	r3, r2
 8001274:	d910      	bls.n	8001298 <LS_Holavonal_favago+0x58>
        	*summ += ADC_values[i];
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	0052      	lsls	r2, r2, #1
 800127e:	68f9      	ldr	r1, [r7, #12]
 8001280:	440a      	add	r2, r1
 8001282:	8812      	ldrh	r2, [r2, #0]
 8001284:	441a      	add	r2, r3
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	601a      	str	r2, [r3, #0]
            sum += i;
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	4413      	add	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
            m++;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3301      	adds	r3, #1
 8001296:	61fb      	str	r3, [r7, #28]
    for(int i=0; i<32; i++){
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	2b1f      	cmp	r3, #31
 80012a2:	dddf      	ble.n	8001264 <LS_Holavonal_favago+0x24>
        }
    }
    *MA_sum = alpha * *summ + (1-alpha) * *MA_sum;
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	ee07 3a90 	vmov	s15, r3
 80012ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80012b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80012b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80012c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	ee07 3a90 	vmov	s15, r3
 80012cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012dc:	ee17 2a90 	vmov	r2, s15
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	601a      	str	r2, [r3, #0]
    if(m == 0)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d102      	bne.n	80012f0 <LS_Holavonal_favago+0xb0>
        return 0;
 80012ea:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8001314 <LS_Holavonal_favago+0xd4>
 80012ee:	e007      	b.n	8001300 <LS_Holavonal_favago+0xc0>
    return sum/m;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80012f8:	ee07 3a90 	vmov	s15, r3
 80012fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8001300:	eeb0 0a67 	vmov.f32	s0, s15
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	3dcccccd 	.word	0x3dcccccd
 8001314:	00000000 	.word	0x00000000

08001318 <LineSensor_FrontAndBack>:
	}
}

void LineSensor_FrontAndBack(UART_HandleTypeDef *huart, SPI_HandleTypeDef *hspi_led, SPI_HandleTypeDef *hspi_sense_front,
		SPI_HandleTypeDef *hspi_sense_rear, uint16_t *ADC_values_front, uint16_t *ADC_values_rear)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b090      	sub	sp, #64	; 0x40
 800131c:	af02      	add	r7, sp, #8
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	603b      	str	r3, [r7, #0]
	uint8_t leds_on[4];// = {1, 1, 1, 1};

	uint8_t ADC_inputs[] = {0, 8, 16, 24, 32, 40, 48, 56};
 8001326:	4a92      	ldr	r2, [pc, #584]	; (8001570 <LineSensor_FrontAndBack+0x258>)
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001330:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t ADC_received_msg[2];

	//LS_INF_Send(&hspi3, leds_off);

	// Turn on first set of LEDs
	leds_on[0] = 1;leds_on[1] = 1;leds_on[2] = 1;leds_on[3] = 1;
 8001334:	2301      	movs	r3, #1
 8001336:	f887 3020 	strb.w	r3, [r7, #32]
 800133a:	2301      	movs	r3, #1
 800133c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8001340:	2301      	movs	r3, #1
 8001342:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8001346:	2301      	movs	r3, #1
 8001348:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	LS_INF_Send(hspi_led, leds_on);
 800134c:	f107 0320 	add.w	r3, r7, #32
 8001350:	4619      	mov	r1, r3
 8001352:	68b8      	ldr	r0, [r7, #8]
 8001354:	f7ff fef8 	bl	8001148 <LS_INF_Send>
	HAL_Delay(1);
 8001358:	2001      	movs	r0, #1
 800135a:	f001 fe19 	bl	8002f90 <HAL_Delay>
	// Retrieve data from first set of ADCs - Front
	for (int i=1; i<5; i++)
 800135e:	2301      	movs	r3, #1
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
 8001362:	e02a      	b.n	80013ba <LineSensor_FrontAndBack+0xa2>
	{
	  LS_ADC_ChipSelect(i);
 8001364:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001366:	f7ff ff19 	bl	800119c <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 800136a:	f107 0214 	add.w	r2, r7, #20
 800136e:	f107 0118 	add.w	r1, r7, #24
 8001372:	2364      	movs	r3, #100	; 0x64
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2302      	movs	r3, #2
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f003 fcb8 	bl	8004cee <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[0], ADC_received_msg, 2, 100);
 800137e:	f107 0214 	add.w	r2, r7, #20
 8001382:	f107 0118 	add.w	r1, r7, #24
 8001386:	2364      	movs	r3, #100	; 0x64
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2302      	movs	r3, #2
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f003 fcae 	bl	8004cee <HAL_SPI_TransmitReceive>
	  ADC_values_front[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8001392:	7d7b      	ldrb	r3, [r7, #21]
 8001394:	b21a      	sxth	r2, r3
 8001396:	7d3b      	ldrb	r3, [r7, #20]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21b      	sxth	r3, r3
 800139c:	4313      	orrs	r3, r2
 800139e:	b219      	sxth	r1, r3
 80013a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a2:	3b01      	subs	r3, #1
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80013a8:	4413      	add	r3, r2
 80013aa:	b28a      	uxth	r2, r1
 80013ac:	801a      	strh	r2, [r3, #0]
	  LS_ADC_ChipSelect(0);
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fef4 	bl	800119c <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 80013b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013b6:	3301      	adds	r3, #1
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
 80013ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013bc:	2b04      	cmp	r3, #4
 80013be:	ddd1      	ble.n	8001364 <LineSensor_FrontAndBack+0x4c>
	}
	// Ez működjön, aztán lehet optimalizálni, hogy egy loopon belül kérjük be az adatokat mindettőtől
	// Retrieve data from first set of ADCs - Rear
	for (int i=1; i<5; i++)
 80013c0:	2301      	movs	r3, #1
 80013c2:	633b      	str	r3, [r7, #48]	; 0x30
 80013c4:	e02a      	b.n	800141c <LineSensor_FrontAndBack+0x104>
	{
	  LS_ADC_ChipSelect(i);
 80013c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013c8:	f7ff fee8 	bl	800119c <LS_ADC_ChipSelect>
	  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[0], ADC_received_msg, 2, 100);
 80013cc:	f107 0214 	add.w	r2, r7, #20
 80013d0:	f107 0118 	add.w	r1, r7, #24
 80013d4:	2364      	movs	r3, #100	; 0x64
 80013d6:	9300      	str	r3, [sp, #0]
 80013d8:	2302      	movs	r3, #2
 80013da:	6838      	ldr	r0, [r7, #0]
 80013dc:	f003 fc87 	bl	8004cee <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[0], ADC_received_msg, 2, 100);
 80013e0:	f107 0214 	add.w	r2, r7, #20
 80013e4:	f107 0118 	add.w	r1, r7, #24
 80013e8:	2364      	movs	r3, #100	; 0x64
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	2302      	movs	r3, #2
 80013ee:	6838      	ldr	r0, [r7, #0]
 80013f0:	f003 fc7d 	bl	8004cee <HAL_SPI_TransmitReceive>
	  ADC_values_rear[(i-1)*8] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80013f4:	7d7b      	ldrb	r3, [r7, #21]
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	7d3b      	ldrb	r3, [r7, #20]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	4313      	orrs	r3, r2
 8001400:	b219      	sxth	r1, r3
 8001402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001404:	3b01      	subs	r3, #1
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800140a:	4413      	add	r3, r2
 800140c:	b28a      	uxth	r2, r1
 800140e:	801a      	strh	r2, [r3, #0]
	  LS_ADC_ChipSelect(0);
 8001410:	2000      	movs	r0, #0
 8001412:	f7ff fec3 	bl	800119c <LS_ADC_ChipSelect>
	for (int i=1; i<5; i++)
 8001416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001418:	3301      	adds	r3, #1
 800141a:	633b      	str	r3, [r7, #48]	; 0x30
 800141c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800141e:	2b04      	cmp	r3, #4
 8001420:	ddd1      	ble.n	80013c6 <LineSensor_FrontAndBack+0xae>
	}

	// Shift the LEDs by one
	for (int k=0; k<7; k++)
 8001422:	2300      	movs	r3, #0
 8001424:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001426:	e099      	b.n	800155c <LineSensor_FrontAndBack+0x244>
	{
	  leds_on[0] <<= 1;
 8001428:	f897 3020 	ldrb.w	r3, [r7, #32]
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	b2db      	uxtb	r3, r3
 8001430:	f887 3020 	strb.w	r3, [r7, #32]
	  leds_on[1] <<= 1;
 8001434:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	b2db      	uxtb	r3, r3
 800143c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  leds_on[2] <<= 1;
 8001440:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	b2db      	uxtb	r3, r3
 8001448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  leds_on[3] <<= 1;
 800144c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	b2db      	uxtb	r3, r3
 8001454:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  LS_INF_Send(hspi_led, leds_on);
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	4619      	mov	r1, r3
 800145e:	68b8      	ldr	r0, [r7, #8]
 8001460:	f7ff fe72 	bl	8001148 <LS_INF_Send>
	  HAL_Delay(1);
 8001464:	2001      	movs	r0, #1
 8001466:	f001 fd93 	bl	8002f90 <HAL_Delay>

	  //Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 800146a:	2301      	movs	r3, #1
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
 800146e:	e034      	b.n	80014da <LineSensor_FrontAndBack+0x1c2>
	  {
		  LS_ADC_ChipSelect(i);
 8001470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001472:	f7ff fe93 	bl	800119c <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 8001476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001478:	3301      	adds	r3, #1
 800147a:	f107 0218 	add.w	r2, r7, #24
 800147e:	18d1      	adds	r1, r2, r3
 8001480:	f107 0214 	add.w	r2, r7, #20
 8001484:	2364      	movs	r3, #100	; 0x64
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2302      	movs	r3, #2
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f003 fc2f 	bl	8004cee <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_front, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 8001490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001492:	3301      	adds	r3, #1
 8001494:	f107 0218 	add.w	r2, r7, #24
 8001498:	18d1      	adds	r1, r2, r3
 800149a:	f107 0214 	add.w	r2, r7, #20
 800149e:	2364      	movs	r3, #100	; 0x64
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2302      	movs	r3, #2
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f003 fc22 	bl	8004cee <HAL_SPI_TransmitReceive>
		  ADC_values_front[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80014aa:	7d7b      	ldrb	r3, [r7, #21]
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	7d3b      	ldrb	r3, [r7, #20]
 80014b0:	021b      	lsls	r3, r3, #8
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b219      	sxth	r1, r3
 80014b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ba:	3b01      	subs	r3, #1
 80014bc:	00da      	lsls	r2, r3, #3
 80014be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c0:	4413      	add	r3, r2
 80014c2:	3301      	adds	r3, #1
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014c8:	4413      	add	r3, r2
 80014ca:	b28a      	uxth	r2, r1
 80014cc:	801a      	strh	r2, [r3, #0]
		  LS_ADC_ChipSelect(0);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff fe64 	bl	800119c <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 80014d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d6:	3301      	adds	r3, #1
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80014da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014dc:	2b04      	cmp	r3, #4
 80014de:	ddc7      	ble.n	8001470 <LineSensor_FrontAndBack+0x158>
	  }

	  // Szintén lehet optimalizálni
	  // Retrieve data from the ADCs at the active LEDs - Front
	  for (int i=1; i<5; i++)
 80014e0:	2301      	movs	r3, #1
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
 80014e4:	e034      	b.n	8001550 <LineSensor_FrontAndBack+0x238>
	  {
		  LS_ADC_ChipSelect(i);
 80014e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014e8:	f7ff fe58 	bl	800119c <LS_ADC_ChipSelect>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 80014ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ee:	3301      	adds	r3, #1
 80014f0:	f107 0218 	add.w	r2, r7, #24
 80014f4:	18d1      	adds	r1, r2, r3
 80014f6:	f107 0214 	add.w	r2, r7, #20
 80014fa:	2364      	movs	r3, #100	; 0x64
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2302      	movs	r3, #2
 8001500:	6838      	ldr	r0, [r7, #0]
 8001502:	f003 fbf4 	bl	8004cee <HAL_SPI_TransmitReceive>
		  HAL_SPI_TransmitReceive(hspi_sense_rear, &ADC_inputs[k+1], ADC_received_msg, 2, 100);
 8001506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001508:	3301      	adds	r3, #1
 800150a:	f107 0218 	add.w	r2, r7, #24
 800150e:	18d1      	adds	r1, r2, r3
 8001510:	f107 0214 	add.w	r2, r7, #20
 8001514:	2364      	movs	r3, #100	; 0x64
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2302      	movs	r3, #2
 800151a:	6838      	ldr	r0, [r7, #0]
 800151c:	f003 fbe7 	bl	8004cee <HAL_SPI_TransmitReceive>
		  ADC_values_rear[(i-1)*8+k+1] = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8001520:	7d7b      	ldrb	r3, [r7, #21]
 8001522:	b21a      	sxth	r2, r3
 8001524:	7d3b      	ldrb	r3, [r7, #20]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21b      	sxth	r3, r3
 800152a:	4313      	orrs	r3, r2
 800152c:	b219      	sxth	r1, r3
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	3b01      	subs	r3, #1
 8001532:	00da      	lsls	r2, r3, #3
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	4413      	add	r3, r2
 8001538:	3301      	adds	r3, #1
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800153e:	4413      	add	r3, r2
 8001540:	b28a      	uxth	r2, r1
 8001542:	801a      	strh	r2, [r3, #0]
		  LS_ADC_ChipSelect(0);
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff fe29 	bl	800119c <LS_ADC_ChipSelect>
	  for (int i=1; i<5; i++)
 800154a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154c:	3301      	adds	r3, #1
 800154e:	627b      	str	r3, [r7, #36]	; 0x24
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	2b04      	cmp	r3, #4
 8001554:	ddc7      	ble.n	80014e6 <LineSensor_FrontAndBack+0x1ce>
	for (int k=0; k<7; k++)
 8001556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001558:	3301      	adds	r3, #1
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800155e:	2b06      	cmp	r3, #6
 8001560:	f77f af62 	ble.w	8001428 <LineSensor_FrontAndBack+0x110>
//			line_pos[0] = ADC_values_rear[i];
//	}

//	unsigned char BT_send_msg_buff[200];
//	LS_BT_SendData(huart, BT_send_msg_buff, ADC_values_rear);
}
 8001564:	bf00      	nop
 8001566:	bf00      	nop
 8001568:	3738      	adds	r7, #56	; 0x38
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	0800b510 	.word	0x0800b510

08001574 <LS_feedback_all>:

void LS_feedback_all(SPI_HandleTypeDef *hspi_led, uint16_t *ADC_values)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b088      	sub	sp, #32
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
	uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
 800157e:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <LS_feedback_all+0x7c>)
 8001580:	f107 0310 	add.w	r3, r7, #16
 8001584:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001588:	6018      	str	r0, [r3, #0]
 800158a:	3304      	adds	r3, #4
 800158c:	7019      	strb	r1, [r3, #0]
	uint8_t leds_off[4] = {0};
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
	int j = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<32; i++){
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	e016      	b.n	80015ca <LS_feedback_all+0x56>
			if (ADC_values[i]>2500){
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	4413      	add	r3, r2
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d90a      	bls.n	80015c4 <LS_feedback_all+0x50>
				fb_leds_to_light[j] = i;
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	b2d9      	uxtb	r1, r3
 80015b2:	f107 0210 	add.w	r2, r7, #16
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	4413      	add	r3, r2
 80015ba:	460a      	mov	r2, r1
 80015bc:	701a      	strb	r2, [r3, #0]
				j++;
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	3301      	adds	r3, #1
 80015c2:	61fb      	str	r3, [r7, #28]
		for (int i=0; i<32; i++){
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	3301      	adds	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	2b1f      	cmp	r3, #31
 80015ce:	dde5      	ble.n	800159c <LS_feedback_all+0x28>
			}
		}

	LS_LED_Send(hspi_led, leds_off);
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff fd8c 	bl	80010f4 <LS_LED_Send>
	LS_LED_Light(hspi_led, fb_leds_to_light);
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f7ff fce6 	bl	8000fb4 <LS_LED_Light>
}
 80015e8:	bf00      	nop
 80015ea:	3720      	adds	r7, #32
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	0800b518 	.word	0x0800b518
 80015f4:	00000000 	.word	0x00000000

080015f8 <LS_delta_angle>:
	}
	LS_LED_Send(hspi_led, leds_off);
	LS_LED_Light(hspi_led, fb_leds_to_light);
}

float LS_delta_angle(float p1, float p2){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001602:	edc7 0a00 	vstr	s1, [r7]
    float delta = atan((p2-(31-p1))*6.5/460);
 8001606:	eeb3 7a0f 	vmov.f32	s14, #63	; 0x41f80000  31.0
 800160a:	edd7 7a01 	vldr	s15, [r7, #4]
 800160e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001612:	ed97 7a00 	vldr	s14, [r7]
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	ee17 0a90 	vmov	r0, s15
 800161e:	f7fe ffb3 	bl	8000588 <__aeabi_f2d>
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <LS_delta_angle+0x88>)
 8001628:	f7ff f806 	bl	8000638 <__aeabi_dmul>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4610      	mov	r0, r2
 8001632:	4619      	mov	r1, r3
 8001634:	a310      	add	r3, pc, #64	; (adr r3, 8001678 <LS_delta_angle+0x80>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7ff f927 	bl	800088c <__aeabi_ddiv>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	ec43 2b17 	vmov	d7, r2, r3
 8001646:	eeb0 0a47 	vmov.f32	s0, s14
 800164a:	eef0 0a67 	vmov.f32	s1, s15
 800164e:	f008 fcaf 	bl	8009fb0 <atan>
 8001652:	ec53 2b10 	vmov	r2, r3, d0
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff fac5 	bl	8000be8 <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	60fb      	str	r3, [r7, #12]
    return delta;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	ee07 3a90 	vmov	s15, r3
}
 8001668:	eeb0 0a67 	vmov.f32	s0, s15
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	f3af 8000 	nop.w
 8001678:	00000000 	.word	0x00000000
 800167c:	407cc000 	.word	0x407cc000
 8001680:	401a0000 	.word	0x401a0000
 8001684:	00000000 	.word	0x00000000

08001688 <LS_p>:



float LS_p(float f1){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	ed87 0a01 	vstr	s0, [r7, #4]
    float p = (15.5-f1)*0.0065;//m-ben adja vissza a p-t
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7fe ff78 	bl	8000588 <__aeabi_f2d>
 8001698:	4602      	mov	r2, r0
 800169a:	460b      	mov	r3, r1
 800169c:	f04f 0000 	mov.w	r0, #0
 80016a0:	490f      	ldr	r1, [pc, #60]	; (80016e0 <LS_p+0x58>)
 80016a2:	f7fe fe11 	bl	80002c8 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	a30a      	add	r3, pc, #40	; (adr r3, 80016d8 <LS_p+0x50>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe ffc0 	bl	8000638 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7ff fa92 	bl	8000be8 <__aeabi_d2f>
 80016c4:	4603      	mov	r3, r0
 80016c6:	60fb      	str	r3, [r7, #12]
    return p;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	ee07 3a90 	vmov	s15, r3
}
 80016ce:	eeb0 0a67 	vmov.f32	s0, s15
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	76c8b439 	.word	0x76c8b439
 80016dc:	3f7a9fbe 	.word	0x3f7a9fbe
 80016e0:	402f0000 	.word	0x402f0000
 80016e4:	00000000 	.word	0x00000000

080016e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016ec:	b0ac      	sub	sp, #176	; 0xb0
 80016ee:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f0:	f001 fbdc 	bl	8002eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f4:	f000 f8de 	bl	80018b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f8:	f000 fd50 	bl	800219c <MX_GPIO_Init>
  MX_I2C1_Init();
 80016fc:	f000 f99e 	bl	8001a3c <MX_I2C1_Init>
  MX_I2C3_Init();
 8001700:	f000 f9f8 	bl	8001af4 <MX_I2C3_Init>
  MX_SPI1_Init();
 8001704:	f000 fa24 	bl	8001b50 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001708:	f000 fa58 	bl	8001bbc <MX_SPI2_Init>
  MX_SPI3_Init();
 800170c:	f000 fa8c 	bl	8001c28 <MX_SPI3_Init>
  MX_ADC1_Init();
 8001710:	f000 f942 	bl	8001998 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001714:	f000 fac0 	bl	8001c98 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001718:	f000 fb3e 	bl	8001d98 <MX_TIM3_Init>
  MX_TIM4_Init();
 800171c:	f000 fb96 	bl	8001e4c <MX_TIM4_Init>
  MX_TIM13_Init();
 8001720:	f000 fc9a 	bl	8002058 <MX_TIM13_Init>
  MX_TIM5_Init();
 8001724:	f000 fbec 	bl	8001f00 <MX_TIM5_Init>
  MX_I2C2_Init();
 8001728:	f000 f9b6 	bl	8001a98 <MX_I2C2_Init>
  MX_USART2_UART_Init();
 800172c:	f000 fce2 	bl	80020f4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8001730:	f000 fd0a 	bl	8002148 <MX_USART6_UART_Init>
  MX_TIM7_Init();
 8001734:	f000 fc5a 	bl	8001fec <MX_TIM7_Init>
//  HAL_Delay(2); // 2ms reset time
//  HAL_GPIO_WritePin(XSHUT1_GPIO_Port, XSHUT1_Pin, GPIO_PIN_RESET);
//  HAL_Delay(2); // 2ms reset time
//
  // set ToF1
  HAL_GPIO_WritePin(ToF_XSDN_36_GPIO_Port, ToF_XSDN_36_Pin, GPIO_PIN_SET);
 8001738:	2201      	movs	r2, #1
 800173a:	2101      	movs	r1, #1
 800173c:	4850      	ldr	r0, [pc, #320]	; (8001880 <main+0x198>)
 800173e:	f002 f963 	bl	8003a08 <HAL_GPIO_WritePin>
  HAL_Delay(2);
 8001742:	2002      	movs	r0, #2
 8001744:	f001 fc24 	bl	8002f90 <HAL_Delay>



  //unsigned char ADC_value_string[10];
  uint8_t leds_on[4];// = {1, 1, 1, 1};
  uint8_t fb_leds_on[4] = {0};
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  //uint8_t fb_leds_to_light[5] = {50, 50, 50, 50, 50};
  uint16_t ADC_values_front[32] = {0};
 800174e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001752:	2240      	movs	r2, #64	; 0x40
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f005 fd4a 	bl	80071f0 <memset>
  uint16_t ADC_values_rear[32] = {0};
 800175c:	f107 030c 	add.w	r3, r7, #12
 8001760:	2240      	movs	r2, #64	; 0x40
 8001762:	2100      	movs	r1, #0
 8001764:	4618      	mov	r0, r3
 8001766:	f005 fd43 	bl	80071f0 <memset>
  float delta, p, str_angle;
//  enum circuit_section circuit_Section;
//  circuit_Section = Fast_section;
  //LS_INF_Send(&hspi3, leds_off);

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); // Dead man switch PWM input
 800176a:	2100      	movs	r1, #0
 800176c:	4845      	ldr	r0, [pc, #276]	; (8001884 <main+0x19c>)
 800176e:	f003 fef5 	bl	800555c <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);    // Dead man switch PWM input
 8001772:	2104      	movs	r1, #4
 8001774:	4843      	ldr	r0, [pc, #268]	; (8001884 <main+0x19c>)
 8001776:	f003 fe15 	bl	80053a4 <HAL_TIM_IC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, ADC_values_front, ADC_values_rear);
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001784:	9300      	str	r3, [sp, #0]
 8001786:	4b40      	ldr	r3, [pc, #256]	; (8001888 <main+0x1a0>)
 8001788:	4a40      	ldr	r2, [pc, #256]	; (800188c <main+0x1a4>)
 800178a:	4941      	ldr	r1, [pc, #260]	; (8001890 <main+0x1a8>)
 800178c:	4841      	ldr	r0, [pc, #260]	; (8001894 <main+0x1ac>)
 800178e:	f7ff fdc3 	bl	8001318 <LineSensor_FrontAndBack>
	  line_pos[0] = LS_Holavonal_favago(ADC_values_front, &summ, &MA_sum_front);
 8001792:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001796:	4a40      	ldr	r2, [pc, #256]	; (8001898 <main+0x1b0>)
 8001798:	4940      	ldr	r1, [pc, #256]	; (800189c <main+0x1b4>)
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fd50 	bl	8001240 <LS_Holavonal_favago>
 80017a0:	eef0 7a40 	vmov.f32	s15, s0
 80017a4:	edc7 7a01 	vstr	s15, [r7, #4]
	  line_pos[1] = LS_Holavonal_favago(ADC_values_rear, &summ2, &MA_sum_rear);
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4a3c      	ldr	r2, [pc, #240]	; (80018a0 <main+0x1b8>)
 80017ae:	493d      	ldr	r1, [pc, #244]	; (80018a4 <main+0x1bc>)
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fd45 	bl	8001240 <LS_Holavonal_favago>
 80017b6:	eef0 7a40 	vmov.f32	s15, s0
 80017ba:	edc7 7a02 	vstr	s15, [r7, #8]
	  LS_feedback_all(&hspi3, ADC_values_front);
 80017be:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017c2:	4619      	mov	r1, r3
 80017c4:	4832      	ldr	r0, [pc, #200]	; (8001890 <main+0x1a8>)
 80017c6:	f7ff fed5 	bl	8001574 <LS_feedback_all>
//	  //LS_feedback_led(&hspi3, line_pos, feedback_rear);

	  delta = LS_delta_angle(line_pos[0], line_pos[1]);
 80017ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80017ce:	ed97 7a02 	vldr	s14, [r7, #8]
 80017d2:	eef0 0a47 	vmov.f32	s1, s14
 80017d6:	eeb0 0a67 	vmov.f32	s0, s15
 80017da:	f7ff ff0d 	bl	80015f8 <LS_delta_angle>
 80017de:	ed87 0a27 	vstr	s0, [r7, #156]	; 0x9c
	  p = LS_p(line_pos[0]);
 80017e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80017e6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ea:	f7ff ff4d 	bl	8001688 <LS_p>
 80017ee:	ed87 0a26 	vstr	s0, [r7, #152]	; 0x98
	  str_angle = SteeringAngle(p, delta);
 80017f2:	edd7 0a27 	vldr	s1, [r7, #156]	; 0x9c
 80017f6:	ed97 0a26 	vldr	s0, [r7, #152]	; 0x98
 80017fa:	f000 fe29 	bl	8002450 <SteeringAngle>
 80017fe:	ed87 0a25 	vstr	s0, [r7, #148]	; 0x94

	  sprintf((char*)BT_send_msg_buff, "p: %f, delta: %f, steering angle: %f\n\r", p, delta*57.3, str_angle*57.3);
 8001802:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001806:	f7fe febf 	bl	8000588 <__aeabi_f2d>
 800180a:	4604      	mov	r4, r0
 800180c:	460d      	mov	r5, r1
 800180e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001812:	f7fe feb9 	bl	8000588 <__aeabi_f2d>
 8001816:	a318      	add	r3, pc, #96	; (adr r3, 8001878 <main+0x190>)
 8001818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800181c:	f7fe ff0c 	bl	8000638 <__aeabi_dmul>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4690      	mov	r8, r2
 8001826:	4699      	mov	r9, r3
 8001828:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800182c:	f7fe feac 	bl	8000588 <__aeabi_f2d>
 8001830:	a311      	add	r3, pc, #68	; (adr r3, 8001878 <main+0x190>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe feff 	bl	8000638 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001842:	e9cd 8900 	strd	r8, r9, [sp]
 8001846:	4622      	mov	r2, r4
 8001848:	462b      	mov	r3, r5
 800184a:	4917      	ldr	r1, [pc, #92]	; (80018a8 <main+0x1c0>)
 800184c:	4817      	ldr	r0, [pc, #92]	; (80018ac <main+0x1c4>)
 800184e:	f006 f941 	bl	8007ad4 <siprintf>

	  if(duty_MA>9.5)
 8001852:	4b17      	ldr	r3, [pc, #92]	; (80018b0 <main+0x1c8>)
 8001854:	edd3 7a00 	vldr	s15, [r3]
 8001858:	eeb2 7a03 	vmov.f32	s14, #35	; 0x41180000  9.5
 800185c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001864:	dd03      	ble.n	800186e <main+0x186>
	  		  BT_TransmitMsg(&huart2, BT_send_msg_buff);
 8001866:	4911      	ldr	r1, [pc, #68]	; (80018ac <main+0x1c4>)
 8001868:	480a      	ldr	r0, [pc, #40]	; (8001894 <main+0x1ac>)
 800186a:	f7ff fb8f 	bl	8000f8c <BT_TransmitMsg>
	  HAL_Delay(10);
 800186e:	200a      	movs	r0, #10
 8001870:	f001 fb8e 	bl	8002f90 <HAL_Delay>
	  LineSensor_FrontAndBack(&huart2, &hspi3, &hspi1, &hspi2, ADC_values_front, ADC_values_rear);
 8001874:	e781      	b.n	800177a <main+0x92>
 8001876:	bf00      	nop
 8001878:	66666666 	.word	0x66666666
 800187c:	404ca666 	.word	0x404ca666
 8001880:	40020400 	.word	0x40020400
 8001884:	20000448 	.word	0x20000448
 8001888:	20000398 	.word	0x20000398
 800188c:	20000340 	.word	0x20000340
 8001890:	200003f0 	.word	0x200003f0
 8001894:	200005f8 	.word	0x200005f8
 8001898:	20000748 	.word	0x20000748
 800189c:	20000750 	.word	0x20000750
 80018a0:	2000074c 	.word	0x2000074c
 80018a4:	20000754 	.word	0x20000754
 80018a8:	0800b520 	.word	0x0800b520
 80018ac:	20000680 	.word	0x20000680
 80018b0:	20000768 	.word	0x20000768

080018b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b094      	sub	sp, #80	; 0x50
 80018b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ba:	f107 031c 	add.w	r3, r7, #28
 80018be:	2234      	movs	r2, #52	; 0x34
 80018c0:	2100      	movs	r1, #0
 80018c2:	4618      	mov	r0, r3
 80018c4:	f005 fc94 	bl	80071f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018c8:	f107 0308 	add.w	r3, r7, #8
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <SystemClock_Config+0xdc>)
 80018de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e0:	4a2b      	ldr	r2, [pc, #172]	; (8001990 <SystemClock_Config+0xdc>)
 80018e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e6:	6413      	str	r3, [r2, #64]	; 0x40
 80018e8:	4b29      	ldr	r3, [pc, #164]	; (8001990 <SystemClock_Config+0xdc>)
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f0:	607b      	str	r3, [r7, #4]
 80018f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f4:	2300      	movs	r3, #0
 80018f6:	603b      	str	r3, [r7, #0]
 80018f8:	4b26      	ldr	r3, [pc, #152]	; (8001994 <SystemClock_Config+0xe0>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a25      	ldr	r2, [pc, #148]	; (8001994 <SystemClock_Config+0xe0>)
 80018fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b23      	ldr	r3, [pc, #140]	; (8001994 <SystemClock_Config+0xe0>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800190c:	603b      	str	r3, [r7, #0]
 800190e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001910:	2301      	movs	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001914:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001918:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800191a:	2302      	movs	r3, #2
 800191c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800191e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001922:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001924:	2304      	movs	r3, #4
 8001926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001928:	23b4      	movs	r3, #180	; 0xb4
 800192a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800192c:	2302      	movs	r3, #2
 800192e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001930:	2302      	movs	r3, #2
 8001932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001934:	2302      	movs	r3, #2
 8001936:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001938:	f107 031c 	add.w	r3, r7, #28
 800193c:	4618      	mov	r0, r3
 800193e:	f002 fd73 	bl	8004428 <HAL_RCC_OscConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001948:	f000 fd7a 	bl	8002440 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800194c:	f002 f9d2 	bl	8003cf4 <HAL_PWREx_EnableOverDrive>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001956:	f000 fd73 	bl	8002440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800195a:	230f      	movs	r3, #15
 800195c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800195e:	2302      	movs	r3, #2
 8001960:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001966:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800196a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800196c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001970:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	2105      	movs	r1, #5
 8001978:	4618      	mov	r0, r3
 800197a:	f002 fa0b 	bl	8003d94 <HAL_RCC_ClockConfig>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001984:	f000 fd5c 	bl	8002440 <Error_Handler>
  }
}
 8001988:	bf00      	nop
 800198a:	3750      	adds	r7, #80	; 0x50
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40023800 	.word	0x40023800
 8001994:	40007000 	.word	0x40007000

08001998 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800199e:	463b      	mov	r3, r7
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <MX_ADC1_Init+0x98>)
 80019ac:	4a21      	ldr	r2, [pc, #132]	; (8001a34 <MX_ADC1_Init+0x9c>)
 80019ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80019b0:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <MX_ADC1_Init+0x98>)
 80019b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <MX_ADC1_Init+0x98>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80019be:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <MX_ADC1_Init+0x98>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <MX_ADC1_Init+0x98>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <MX_ADC1_Init+0x98>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019d2:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <MX_ADC1_Init+0x98>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <MX_ADC1_Init+0x98>)
 80019da:	4a17      	ldr	r2, [pc, #92]	; (8001a38 <MX_ADC1_Init+0xa0>)
 80019dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019de:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <MX_ADC1_Init+0x98>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80019e4:	4b12      	ldr	r3, [pc, #72]	; (8001a30 <MX_ADC1_Init+0x98>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <MX_ADC1_Init+0x98>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019f2:	4b0f      	ldr	r3, [pc, #60]	; (8001a30 <MX_ADC1_Init+0x98>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019f8:	480d      	ldr	r0, [pc, #52]	; (8001a30 <MX_ADC1_Init+0x98>)
 80019fa:	f001 faed 	bl	8002fd8 <HAL_ADC_Init>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001a04:	f000 fd1c 	bl	8002440 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a10:	2300      	movs	r3, #0
 8001a12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a14:	463b      	mov	r3, r7
 8001a16:	4619      	mov	r1, r3
 8001a18:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_ADC1_Init+0x98>)
 8001a1a:	f001 fb21 	bl	8003060 <HAL_ADC_ConfigChannel>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001a24:	f000 fd0c 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	3710      	adds	r7, #16
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	200001fc 	.word	0x200001fc
 8001a34:	40012000 	.word	0x40012000
 8001a38:	0f000001 	.word	0x0f000001

08001a3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a40:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a42:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <MX_I2C1_Init+0x54>)
 8001a44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a48:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <MX_I2C1_Init+0x58>)
 8001a4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a52:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a58:	4b0c      	ldr	r3, [pc, #48]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a60:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a6c:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a78:	4804      	ldr	r0, [pc, #16]	; (8001a8c <MX_I2C1_Init+0x50>)
 8001a7a:	f001 fff7 	bl	8003a6c <HAL_I2C_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a84:	f000 fcdc 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000244 	.word	0x20000244
 8001a90:	40005400 	.word	0x40005400
 8001a94:	000186a0 	.word	0x000186a0

08001a98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001a9e:	4a13      	ldr	r2, [pc, #76]	; (8001aec <MX_I2C2_Init+0x54>)
 8001aa0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001aa4:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <MX_I2C2_Init+0x58>)
 8001aa6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ab4:	4b0c      	ldr	r3, [pc, #48]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001ab6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001abc:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001ac2:	4b09      	ldr	r3, [pc, #36]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ace:	4b06      	ldr	r3, [pc, #24]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ad4:	4804      	ldr	r0, [pc, #16]	; (8001ae8 <MX_I2C2_Init+0x50>)
 8001ad6:	f001 ffc9 	bl	8003a6c <HAL_I2C_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ae0:	f000 fcae 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000298 	.word	0x20000298
 8001aec:	40005800 	.word	0x40005800
 8001af0:	000186a0 	.word	0x000186a0

08001af4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001afa:	4a13      	ldr	r2, [pc, #76]	; (8001b48 <MX_I2C3_Init+0x54>)
 8001afc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001afe:	4b11      	ldr	r3, [pc, #68]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b00:	4a12      	ldr	r2, [pc, #72]	; (8001b4c <MX_I2C3_Init+0x58>)
 8001b02:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b04:	4b0f      	ldr	r3, [pc, #60]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001b0a:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b12:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b16:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001b1e:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b24:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001b30:	4804      	ldr	r0, [pc, #16]	; (8001b44 <MX_I2C3_Init+0x50>)
 8001b32:	f001 ff9b 	bl	8003a6c <HAL_I2C_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001b3c:	f000 fc80 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	200002ec 	.word	0x200002ec
 8001b48:	40005c00 	.word	0x40005c00
 8001b4c:	000186a0 	.word	0x000186a0

08001b50 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <MX_SPI1_Init+0x64>)
 8001b56:	4a18      	ldr	r2, [pc, #96]	; (8001bb8 <MX_SPI1_Init+0x68>)
 8001b58:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <MX_SPI1_Init+0x64>)
 8001b5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b60:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001b62:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <MX_SPI1_Init+0x64>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <MX_SPI1_Init+0x64>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_SPI1_Init+0x64>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MX_SPI1_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_SPI1_Init+0x64>)
 8001b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b80:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_SPI1_Init+0x64>)
 8001b84:	2228      	movs	r2, #40	; 0x28
 8001b86:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <MX_SPI1_Init+0x64>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_SPI1_Init+0x64>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <MX_SPI1_Init+0x64>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001b9a:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_SPI1_Init+0x64>)
 8001b9c:	220a      	movs	r2, #10
 8001b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ba0:	4804      	ldr	r0, [pc, #16]	; (8001bb4 <MX_SPI1_Init+0x64>)
 8001ba2:	f002 fedf 	bl	8004964 <HAL_SPI_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001bac:	f000 fc48 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000340 	.word	0x20000340
 8001bb8:	40013000 	.word	0x40013000

08001bbc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	; (8001c20 <MX_SPI2_Init+0x64>)
 8001bc2:	4a18      	ldr	r2, [pc, #96]	; (8001c24 <MX_SPI2_Init+0x68>)
 8001bc4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	; (8001c20 <MX_SPI2_Init+0x64>)
 8001bc8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001bcc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001bce:	4b14      	ldr	r3, [pc, #80]	; (8001c20 <MX_SPI2_Init+0x64>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001bd4:	4b12      	ldr	r3, [pc, #72]	; (8001c20 <MX_SPI2_Init+0x64>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <MX_SPI2_Init+0x64>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001be0:	4b0f      	ldr	r3, [pc, #60]	; (8001c20 <MX_SPI2_Init+0x64>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <MX_SPI2_Init+0x64>)
 8001be8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001bec:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <MX_SPI2_Init+0x64>)
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <MX_SPI2_Init+0x64>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <MX_SPI2_Init+0x64>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c00:	4b07      	ldr	r3, [pc, #28]	; (8001c20 <MX_SPI2_Init+0x64>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c06:	4b06      	ldr	r3, [pc, #24]	; (8001c20 <MX_SPI2_Init+0x64>)
 8001c08:	220a      	movs	r2, #10
 8001c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001c0c:	4804      	ldr	r0, [pc, #16]	; (8001c20 <MX_SPI2_Init+0x64>)
 8001c0e:	f002 fea9 	bl	8004964 <HAL_SPI_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001c18:	f000 fc12 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000398 	.word	0x20000398
 8001c24:	40003800 	.word	0x40003800

08001c28 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001c2c:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_SPI3_Init+0x68>)
 8001c2e:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <MX_SPI3_Init+0x6c>)
 8001c30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c32:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <MX_SPI3_Init+0x68>)
 8001c34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c38:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <MX_SPI3_Init+0x68>)
 8001c3c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c40:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <MX_SPI3_Init+0x68>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_SPI3_Init+0x68>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MX_SPI3_Init+0x68>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c54:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_SPI3_Init+0x68>)
 8001c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c5a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_SPI3_Init+0x68>)
 8001c5e:	2210      	movs	r2, #16
 8001c60:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <MX_SPI3_Init+0x68>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_SPI3_Init+0x68>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <MX_SPI3_Init+0x68>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_SPI3_Init+0x68>)
 8001c76:	220a      	movs	r2, #10
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_SPI3_Init+0x68>)
 8001c7c:	f002 fe72 	bl	8004964 <HAL_SPI_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8001c86:	f000 fbdb 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200003f0 	.word	0x200003f0
 8001c94:	40003c00 	.word	0x40003c00

08001c98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08c      	sub	sp, #48	; 0x30
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cc4:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <MX_TIM2_Init+0xfc>)
 8001cc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9-1;
 8001ccc:	4b31      	ldr	r3, [pc, #196]	; (8001d94 <MX_TIM2_Init+0xfc>)
 8001cce:	2208      	movs	r2, #8
 8001cd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd2:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <MX_TIM2_Init+0xfc>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001cd8:	4b2e      	ldr	r3, [pc, #184]	; (8001d94 <MX_TIM2_Init+0xfc>)
 8001cda:	f04f 32ff 	mov.w	r2, #4294967295
 8001cde:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ce0:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <MX_TIM2_Init+0xfc>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce6:	4b2b      	ldr	r3, [pc, #172]	; (8001d94 <MX_TIM2_Init+0xfc>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001cec:	4829      	ldr	r0, [pc, #164]	; (8001d94 <MX_TIM2_Init+0xfc>)
 8001cee:	f003 fb09 	bl	8005304 <HAL_TIM_IC_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001cf8:	f000 fba2 	bl	8002440 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001d00:	2350      	movs	r3, #80	; 0x50
 8001d02:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	4619      	mov	r1, r3
 8001d16:	481f      	ldr	r0, [pc, #124]	; (8001d94 <MX_TIM2_Init+0xfc>)
 8001d18:	f004 f875 	bl	8005e06 <HAL_TIM_SlaveConfigSynchro>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001d22:	f000 fb8d 	bl	8002440 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4815      	ldr	r0, [pc, #84]	; (8001d94 <MX_TIM2_Init+0xfc>)
 8001d40:	f003 fe3c 	bl	80059bc <HAL_TIM_IC_ConfigChannel>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001d4a:	f000 fb79 	bl	8002440 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001d52:	2302      	movs	r3, #2
 8001d54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001d56:	f107 030c 	add.w	r3, r7, #12
 8001d5a:	2204      	movs	r2, #4
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480d      	ldr	r0, [pc, #52]	; (8001d94 <MX_TIM2_Init+0xfc>)
 8001d60:	f003 fe2c 	bl	80059bc <HAL_TIM_IC_ConfigChannel>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8001d6a:	f000 fb69 	bl	8002440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4806      	ldr	r0, [pc, #24]	; (8001d94 <MX_TIM2_Init+0xfc>)
 8001d7c:	f004 fdb4 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8001d86:	f000 fb5b 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	3730      	adds	r7, #48	; 0x30
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000448 	.word	0x20000448

08001d98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9e:	f107 0320 	add.w	r3, r7, #32
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2200      	movs	r2, #0
 8001dac:	601a      	str	r2, [r3, #0]
 8001dae:	605a      	str	r2, [r3, #4]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	60da      	str	r2, [r3, #12]
 8001db4:	611a      	str	r2, [r3, #16]
 8001db6:	615a      	str	r2, [r3, #20]
 8001db8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dba:	4b22      	ldr	r3, [pc, #136]	; (8001e44 <MX_TIM3_Init+0xac>)
 8001dbc:	4a22      	ldr	r2, [pc, #136]	; (8001e48 <MX_TIM3_Init+0xb0>)
 8001dbe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001dc0:	4b20      	ldr	r3, [pc, #128]	; (8001e44 <MX_TIM3_Init+0xac>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc6:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <MX_TIM3_Init+0xac>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001dcc:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <MX_TIM3_Init+0xac>)
 8001dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd4:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <MX_TIM3_Init+0xac>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dda:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <MX_TIM3_Init+0xac>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001de0:	4818      	ldr	r0, [pc, #96]	; (8001e44 <MX_TIM3_Init+0xac>)
 8001de2:	f003 fa40 	bl	8005266 <HAL_TIM_PWM_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001dec:	f000 fb28 	bl	8002440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df0:	2300      	movs	r3, #0
 8001df2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df4:	2300      	movs	r3, #0
 8001df6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001df8:	f107 0320 	add.w	r3, r7, #32
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4811      	ldr	r0, [pc, #68]	; (8001e44 <MX_TIM3_Init+0xac>)
 8001e00:	f004 fd72 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001e0a:	f000 fb19 	bl	8002440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e0e:	2360      	movs	r3, #96	; 0x60
 8001e10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e16:	2300      	movs	r3, #0
 8001e18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	2204      	movs	r2, #4
 8001e22:	4619      	mov	r1, r3
 8001e24:	4807      	ldr	r0, [pc, #28]	; (8001e44 <MX_TIM3_Init+0xac>)
 8001e26:	f003 fe65 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d001      	beq.n	8001e34 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001e30:	f000 fb06 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e34:	4803      	ldr	r0, [pc, #12]	; (8001e44 <MX_TIM3_Init+0xac>)
 8001e36:	f000 fe81 	bl	8002b3c <HAL_TIM_MspPostInit>

}
 8001e3a:	bf00      	nop
 8001e3c:	3728      	adds	r7, #40	; 0x28
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	20000490 	.word	0x20000490
 8001e48:	40000400 	.word	0x40000400

08001e4c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b08a      	sub	sp, #40	; 0x28
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e52:	f107 0320 	add.w	r3, r7, #32
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e5c:	1d3b      	adds	r3, r7, #4
 8001e5e:	2200      	movs	r2, #0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	605a      	str	r2, [r3, #4]
 8001e64:	609a      	str	r2, [r3, #8]
 8001e66:	60da      	str	r2, [r3, #12]
 8001e68:	611a      	str	r2, [r3, #16]
 8001e6a:	615a      	str	r2, [r3, #20]
 8001e6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e6e:	4b22      	ldr	r3, [pc, #136]	; (8001ef8 <MX_TIM4_Init+0xac>)
 8001e70:	4a22      	ldr	r2, [pc, #136]	; (8001efc <MX_TIM4_Init+0xb0>)
 8001e72:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <MX_TIM4_Init+0xac>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	; (8001ef8 <MX_TIM4_Init+0xac>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <MX_TIM4_Init+0xac>)
 8001e82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e86:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <MX_TIM4_Init+0xac>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e8e:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <MX_TIM4_Init+0xac>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e94:	4818      	ldr	r0, [pc, #96]	; (8001ef8 <MX_TIM4_Init+0xac>)
 8001e96:	f003 f9e6 	bl	8005266 <HAL_TIM_PWM_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001ea0:	f000 face 	bl	8002440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001eac:	f107 0320 	add.w	r3, r7, #32
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4811      	ldr	r0, [pc, #68]	; (8001ef8 <MX_TIM4_Init+0xac>)
 8001eb4:	f004 fd18 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001ebe:	f000 fabf 	bl	8002440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec2:	2360      	movs	r3, #96	; 0x60
 8001ec4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed2:	1d3b      	adds	r3, r7, #4
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4807      	ldr	r0, [pc, #28]	; (8001ef8 <MX_TIM4_Init+0xac>)
 8001eda:	f003 fe0b 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001ee4:	f000 faac 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ee8:	4803      	ldr	r0, [pc, #12]	; (8001ef8 <MX_TIM4_Init+0xac>)
 8001eea:	f000 fe27 	bl	8002b3c <HAL_TIM_MspPostInit>

}
 8001eee:	bf00      	nop
 8001ef0:	3728      	adds	r7, #40	; 0x28
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	200004d8 	.word	0x200004d8
 8001efc:	40000800 	.word	0x40000800

08001f00 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08e      	sub	sp, #56	; 0x38
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f14:	f107 0320 	add.w	r3, r7, #32
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f1e:	1d3b      	adds	r3, r7, #4
 8001f20:	2200      	movs	r2, #0
 8001f22:	601a      	str	r2, [r3, #0]
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	609a      	str	r2, [r3, #8]
 8001f28:	60da      	str	r2, [r3, #12]
 8001f2a:	611a      	str	r2, [r3, #16]
 8001f2c:	615a      	str	r2, [r3, #20]
 8001f2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f30:	4b2c      	ldr	r3, [pc, #176]	; (8001fe4 <MX_TIM5_Init+0xe4>)
 8001f32:	4a2d      	ldr	r2, [pc, #180]	; (8001fe8 <MX_TIM5_Init+0xe8>)
 8001f34:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 30-1;
 8001f36:	4b2b      	ldr	r3, [pc, #172]	; (8001fe4 <MX_TIM5_Init+0xe4>)
 8001f38:	221d      	movs	r2, #29
 8001f3a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f3c:	4b29      	ldr	r3, [pc, #164]	; (8001fe4 <MX_TIM5_Init+0xe4>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60000-1;
 8001f42:	4b28      	ldr	r3, [pc, #160]	; (8001fe4 <MX_TIM5_Init+0xe4>)
 8001f44:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001f48:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f4a:	4b26      	ldr	r3, [pc, #152]	; (8001fe4 <MX_TIM5_Init+0xe4>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f50:	4b24      	ldr	r3, [pc, #144]	; (8001fe4 <MX_TIM5_Init+0xe4>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f56:	4823      	ldr	r0, [pc, #140]	; (8001fe4 <MX_TIM5_Init+0xe4>)
 8001f58:	f003 f936 	bl	80051c8 <HAL_TIM_Base_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001f62:	f000 fa6d 	bl	8002440 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f70:	4619      	mov	r1, r3
 8001f72:	481c      	ldr	r0, [pc, #112]	; (8001fe4 <MX_TIM5_Init+0xe4>)
 8001f74:	f003 fe80 	bl	8005c78 <HAL_TIM_ConfigClockSource>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001f7e:	f000 fa5f 	bl	8002440 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f82:	4818      	ldr	r0, [pc, #96]	; (8001fe4 <MX_TIM5_Init+0xe4>)
 8001f84:	f003 f96f 	bl	8005266 <HAL_TIM_PWM_Init>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001f8e:	f000 fa57 	bl	8002440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f92:	2300      	movs	r3, #0
 8001f94:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f96:	2300      	movs	r3, #0
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f9a:	f107 0320 	add.w	r3, r7, #32
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4810      	ldr	r0, [pc, #64]	; (8001fe4 <MX_TIM5_Init+0xe4>)
 8001fa2:	f004 fca1 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001fac:	f000 fa48 	bl	8002440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fb0:	2360      	movs	r3, #96	; 0x60
 8001fb2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fc0:	1d3b      	adds	r3, r7, #4
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4807      	ldr	r0, [pc, #28]	; (8001fe4 <MX_TIM5_Init+0xe4>)
 8001fc8:	f003 fd94 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001fd2:	f000 fa35 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001fd6:	4803      	ldr	r0, [pc, #12]	; (8001fe4 <MX_TIM5_Init+0xe4>)
 8001fd8:	f000 fdb0 	bl	8002b3c <HAL_TIM_MspPostInit>

}
 8001fdc:	bf00      	nop
 8001fde:	3738      	adds	r7, #56	; 0x38
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000520 	.word	0x20000520
 8001fe8:	40000c00 	.word	0x40000c00

08001fec <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff2:	463b      	mov	r3, r7
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	601a      	str	r2, [r3, #0]
 8001ff8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <MX_TIM7_Init+0x64>)
 8001ffc:	4a15      	ldr	r2, [pc, #84]	; (8002054 <MX_TIM7_Init+0x68>)
 8001ffe:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10000-1;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <MX_TIM7_Init+0x64>)
 8002002:	f242 720f 	movw	r2, #9999	; 0x270f
 8002006:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002008:	4b11      	ldr	r3, [pc, #68]	; (8002050 <MX_TIM7_Init+0x64>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 30000-1;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <MX_TIM7_Init+0x64>)
 8002010:	f247 522f 	movw	r2, #29999	; 0x752f
 8002014:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002016:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <MX_TIM7_Init+0x64>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800201c:	480c      	ldr	r0, [pc, #48]	; (8002050 <MX_TIM7_Init+0x64>)
 800201e:	f003 f8d3 	bl	80051c8 <HAL_TIM_Base_Init>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d001      	beq.n	800202c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002028:	f000 fa0a 	bl	8002440 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202c:	2300      	movs	r3, #0
 800202e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002034:	463b      	mov	r3, r7
 8002036:	4619      	mov	r1, r3
 8002038:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_TIM7_Init+0x64>)
 800203a:	f004 fc55 	bl	80068e8 <HAL_TIMEx_MasterConfigSynchronization>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002044:	f000 f9fc 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002048:	bf00      	nop
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000568 	.word	0x20000568
 8002054:	40001400 	.word	0x40001400

08002058 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b088      	sub	sp, #32
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
 800206c:	615a      	str	r2, [r3, #20]
 800206e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002070:	4b1e      	ldr	r3, [pc, #120]	; (80020ec <MX_TIM13_Init+0x94>)
 8002072:	4a1f      	ldr	r2, [pc, #124]	; (80020f0 <MX_TIM13_Init+0x98>)
 8002074:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8002076:	4b1d      	ldr	r3, [pc, #116]	; (80020ec <MX_TIM13_Init+0x94>)
 8002078:	2200      	movs	r2, #0
 800207a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800207c:	4b1b      	ldr	r3, [pc, #108]	; (80020ec <MX_TIM13_Init+0x94>)
 800207e:	2200      	movs	r2, #0
 8002080:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8002082:	4b1a      	ldr	r3, [pc, #104]	; (80020ec <MX_TIM13_Init+0x94>)
 8002084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002088:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <MX_TIM13_Init+0x94>)
 800208c:	2200      	movs	r2, #0
 800208e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002090:	4b16      	ldr	r3, [pc, #88]	; (80020ec <MX_TIM13_Init+0x94>)
 8002092:	2200      	movs	r2, #0
 8002094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8002096:	4815      	ldr	r0, [pc, #84]	; (80020ec <MX_TIM13_Init+0x94>)
 8002098:	f003 f896 	bl	80051c8 <HAL_TIM_Base_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80020a2:	f000 f9cd 	bl	8002440 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80020a6:	4811      	ldr	r0, [pc, #68]	; (80020ec <MX_TIM13_Init+0x94>)
 80020a8:	f003 f8dd 	bl	8005266 <HAL_TIM_PWM_Init>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80020b2:	f000 f9c5 	bl	8002440 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020b6:	2360      	movs	r3, #96	; 0x60
 80020b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020c6:	1d3b      	adds	r3, r7, #4
 80020c8:	2200      	movs	r2, #0
 80020ca:	4619      	mov	r1, r3
 80020cc:	4807      	ldr	r0, [pc, #28]	; (80020ec <MX_TIM13_Init+0x94>)
 80020ce:	f003 fd11 	bl	8005af4 <HAL_TIM_PWM_ConfigChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80020d8:	f000 f9b2 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80020dc:	4803      	ldr	r0, [pc, #12]	; (80020ec <MX_TIM13_Init+0x94>)
 80020de:	f000 fd2d 	bl	8002b3c <HAL_TIM_MspPostInit>

}
 80020e2:	bf00      	nop
 80020e4:	3720      	adds	r7, #32
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200005b0 	.word	0x200005b0
 80020f0:	40001c00 	.word	0x40001c00

080020f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020f8:	4b11      	ldr	r3, [pc, #68]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <MX_USART2_UART_Init+0x50>)
 80020fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80020fe:	4b10      	ldr	r3, [pc, #64]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002100:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002104:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002106:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002108:	2200      	movs	r2, #0
 800210a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800210c:	4b0c      	ldr	r3, [pc, #48]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 800210e:	2200      	movs	r2, #0
 8002110:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002112:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002114:	2200      	movs	r2, #0
 8002116:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002118:	4b09      	ldr	r3, [pc, #36]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 800211a:	220c      	movs	r2, #12
 800211c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800211e:	4b08      	ldr	r3, [pc, #32]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002120:	2200      	movs	r2, #0
 8002122:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 8002126:	2200      	movs	r2, #0
 8002128:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800212a:	4805      	ldr	r0, [pc, #20]	; (8002140 <MX_USART2_UART_Init+0x4c>)
 800212c:	f004 fc6c 	bl	8006a08 <HAL_UART_Init>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002136:	f000 f983 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	200005f8 	.word	0x200005f8
 8002144:	40004400 	.word	0x40004400

08002148 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800214c:	4b11      	ldr	r3, [pc, #68]	; (8002194 <MX_USART6_UART_Init+0x4c>)
 800214e:	4a12      	ldr	r2, [pc, #72]	; (8002198 <MX_USART6_UART_Init+0x50>)
 8002150:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <MX_USART6_UART_Init+0x4c>)
 8002154:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002158:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800215a:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <MX_USART6_UART_Init+0x4c>)
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <MX_USART6_UART_Init+0x4c>)
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002166:	4b0b      	ldr	r3, [pc, #44]	; (8002194 <MX_USART6_UART_Init+0x4c>)
 8002168:	2200      	movs	r2, #0
 800216a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800216c:	4b09      	ldr	r3, [pc, #36]	; (8002194 <MX_USART6_UART_Init+0x4c>)
 800216e:	220c      	movs	r2, #12
 8002170:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <MX_USART6_UART_Init+0x4c>)
 8002174:	2200      	movs	r2, #0
 8002176:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002178:	4b06      	ldr	r3, [pc, #24]	; (8002194 <MX_USART6_UART_Init+0x4c>)
 800217a:	2200      	movs	r2, #0
 800217c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800217e:	4805      	ldr	r0, [pc, #20]	; (8002194 <MX_USART6_UART_Init+0x4c>)
 8002180:	f004 fc42 	bl	8006a08 <HAL_UART_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800218a:	f000 f959 	bl	8002440 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	2000063c 	.word	0x2000063c
 8002198:	40011400 	.word	0x40011400

0800219c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b08a      	sub	sp, #40	; 0x28
 80021a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a2:	f107 0314 	add.w	r3, r7, #20
 80021a6:	2200      	movs	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	605a      	str	r2, [r3, #4]
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	60da      	str	r2, [r3, #12]
 80021b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	613b      	str	r3, [r7, #16]
 80021b6:	4b64      	ldr	r3, [pc, #400]	; (8002348 <MX_GPIO_Init+0x1ac>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a63      	ldr	r2, [pc, #396]	; (8002348 <MX_GPIO_Init+0x1ac>)
 80021bc:	f043 0304 	orr.w	r3, r3, #4
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b61      	ldr	r3, [pc, #388]	; (8002348 <MX_GPIO_Init+0x1ac>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0304 	and.w	r3, r3, #4
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
 80021d2:	4b5d      	ldr	r3, [pc, #372]	; (8002348 <MX_GPIO_Init+0x1ac>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a5c      	ldr	r2, [pc, #368]	; (8002348 <MX_GPIO_Init+0x1ac>)
 80021d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b5a      	ldr	r3, [pc, #360]	; (8002348 <MX_GPIO_Init+0x1ac>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021e6:	60fb      	str	r3, [r7, #12]
 80021e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	60bb      	str	r3, [r7, #8]
 80021ee:	4b56      	ldr	r3, [pc, #344]	; (8002348 <MX_GPIO_Init+0x1ac>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	4a55      	ldr	r2, [pc, #340]	; (8002348 <MX_GPIO_Init+0x1ac>)
 80021f4:	f043 0301 	orr.w	r3, r3, #1
 80021f8:	6313      	str	r3, [r2, #48]	; 0x30
 80021fa:	4b53      	ldr	r3, [pc, #332]	; (8002348 <MX_GPIO_Init+0x1ac>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	f003 0301 	and.w	r3, r3, #1
 8002202:	60bb      	str	r3, [r7, #8]
 8002204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	607b      	str	r3, [r7, #4]
 800220a:	4b4f      	ldr	r3, [pc, #316]	; (8002348 <MX_GPIO_Init+0x1ac>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	4a4e      	ldr	r2, [pc, #312]	; (8002348 <MX_GPIO_Init+0x1ac>)
 8002210:	f043 0302 	orr.w	r3, r3, #2
 8002214:	6313      	str	r3, [r2, #48]	; 0x30
 8002216:	4b4c      	ldr	r3, [pc, #304]	; (8002348 <MX_GPIO_Init+0x1ac>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	607b      	str	r3, [r7, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	603b      	str	r3, [r7, #0]
 8002226:	4b48      	ldr	r3, [pc, #288]	; (8002348 <MX_GPIO_Init+0x1ac>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a47      	ldr	r2, [pc, #284]	; (8002348 <MX_GPIO_Init+0x1ac>)
 800222c:	f043 0308 	orr.w	r3, r3, #8
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b45      	ldr	r3, [pc, #276]	; (8002348 <MX_GPIO_Init+0x1ac>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	603b      	str	r3, [r7, #0]
 800223c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 800223e:	2200      	movs	r2, #0
 8002240:	f24d 0107 	movw	r1, #53255	; 0xd007
 8002244:	4841      	ldr	r0, [pc, #260]	; (800234c <MX_GPIO_Init+0x1b0>)
 8002246:	f001 fbdf 	bl	8003a08 <HAL_GPIO_WritePin>
                          |AD_CS3_Pin|AD_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_CS1_Pin|LED_LE_Pin, GPIO_PIN_RESET);
 800224a:	2200      	movs	r2, #0
 800224c:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8002250:	483f      	ldr	r0, [pc, #252]	; (8002350 <MX_GPIO_Init+0x1b4>)
 8002252:	f001 fbd9 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin, GPIO_PIN_RESET);
 8002256:	2200      	movs	r2, #0
 8002258:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 800225c:	483d      	ldr	r0, [pc, #244]	; (8002354 <MX_GPIO_Init+0x1b8>)
 800225e:	f001 fbd3 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	2104      	movs	r1, #4
 8002266:	483c      	ldr	r0, [pc, #240]	; (8002358 <MX_GPIO_Init+0x1bc>)
 8002268:	f001 fbce 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800226c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002270:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002272:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4619      	mov	r1, r3
 8002282:	4833      	ldr	r0, [pc, #204]	; (8002350 <MX_GPIO_Init+0x1b4>)
 8002284:	f001 fa2c 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Dead_man_SW_Pin DRV_PWR_FB_Pin */
  GPIO_InitStruct.Pin = Dead_man_SW_Pin|DRV_PWR_FB_Pin;
 8002288:	2311      	movs	r3, #17
 800228a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800228c:	2300      	movs	r3, #0
 800228e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	4619      	mov	r1, r3
 800229a:	482d      	ldr	r0, [pc, #180]	; (8002350 <MX_GPIO_Init+0x1b4>)
 800229c:	f001 fa20 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ToF_XSDN_36_Pin ToF_XSDN_25_Pin ToF_XSDN_14_Pin AD_CS4_Pin
                           AD_CS3_Pin AD_CS2_Pin */
  GPIO_InitStruct.Pin = ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 80022a0:	f24d 0307 	movw	r3, #53255	; 0xd007
 80022a4:	617b      	str	r3, [r7, #20]
                          |AD_CS3_Pin|AD_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ae:	2300      	movs	r3, #0
 80022b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022b2:	f107 0314 	add.w	r3, r7, #20
 80022b6:	4619      	mov	r1, r3
 80022b8:	4824      	ldr	r0, [pc, #144]	; (800234c <MX_GPIO_Init+0x1b0>)
 80022ba:	f001 fa11 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_CS1_Pin LED_LE_Pin */
  GPIO_InitStruct.Pin = AD_CS1_Pin|LED_LE_Pin;
 80022be:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80022c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d0:	f107 0314 	add.w	r3, r7, #20
 80022d4:	4619      	mov	r1, r3
 80022d6:	481e      	ldr	r0, [pc, #120]	; (8002350 <MX_GPIO_Init+0x1b4>)
 80022d8:	f001 fa02 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INF_LE_Pin INF_OE_Pin DRV_EN_Pin */
  GPIO_InitStruct.Pin = INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin;
 80022dc:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 80022e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022e2:	2301      	movs	r3, #1
 80022e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ea:	2300      	movs	r3, #0
 80022ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	4817      	ldr	r0, [pc, #92]	; (8002354 <MX_GPIO_Init+0x1b8>)
 80022f6:	f001 f9f3 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_FB_Pin */
  GPIO_InitStruct.Pin = DRV_EN_FB_Pin;
 80022fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002300:	2300      	movs	r3, #0
 8002302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_EN_FB_GPIO_Port, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	4811      	ldr	r0, [pc, #68]	; (8002354 <MX_GPIO_Init+0x1b8>)
 8002310:	f001 f9e6 	bl	80036e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_OE_Pin;
 8002314:	2304      	movs	r3, #4
 8002316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002318:	2301      	movs	r3, #1
 800231a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002320:	2300      	movs	r3, #0
 8002322:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OE_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	4619      	mov	r1, r3
 800232a:	480b      	ldr	r0, [pc, #44]	; (8002358 <MX_GPIO_Init+0x1bc>)
 800232c:	f001 f9d8 	bl	80036e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002330:	2200      	movs	r2, #0
 8002332:	2100      	movs	r1, #0
 8002334:	2028      	movs	r0, #40	; 0x28
 8002336:	f001 f99c 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800233a:	2028      	movs	r0, #40	; 0x28
 800233c:	f001 f9b5 	bl	80036aa <HAL_NVIC_EnableIRQ>

}
 8002340:	bf00      	nop
 8002342:	3728      	adds	r7, #40	; 0x28
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}
 8002348:	40023800 	.word	0x40023800
 800234c:	40020400 	.word	0x40020400
 8002350:	40020800 	.word	0x40020800
 8002354:	40020000 	.word	0x40020000
 8002358:	40020c00 	.word	0x40020c00

0800235c <HAL_GPIO_EXTI_Callback>:
//{
//	  BTMessageFlag = true;
//	  BT_ReceiveMsg(&huart2, BT_received_msg);
//}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	80fb      	strh	r3, [r7, #6]
	buttonMessageFlag = true;
 8002366:	4b04      	ldr	r3, [pc, #16]	; (8002378 <HAL_GPIO_EXTI_Callback+0x1c>)
 8002368:	2201      	movs	r2, #1
 800236a:	701a      	strb	r2, [r3, #0]
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	20000758 	.word	0x20000758

0800237c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
//		else{
//			LS_LED_Send(&hspi3, leds_all_on);
//			lightIsOn = true;
//		}
//	}
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a0:	d13d      	bne.n	800241e <HAL_TIM_IC_CaptureCallback+0x8e>
		cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 2;
 80023a2:	2100      	movs	r1, #0
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	f003 fd71 	bl	8005e8c <HAL_TIM_ReadCapturedValue>
 80023aa:	4603      	mov	r3, r0
 80023ac:	3302      	adds	r3, #2
 80023ae:	4a1e      	ldr	r2, [pc, #120]	; (8002428 <HAL_TIM_IC_CaptureCallback+0x98>)
 80023b0:	6013      	str	r3, [r2, #0]
		cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2) + 2;
 80023b2:	2104      	movs	r1, #4
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f003 fd69 	bl	8005e8c <HAL_TIM_ReadCapturedValue>
 80023ba:	4603      	mov	r3, r0
 80023bc:	3302      	adds	r3, #2
 80023be:	4a1b      	ldr	r2, [pc, #108]	; (800242c <HAL_TIM_IC_CaptureCallback+0x9c>)
 80023c0:	6013      	str	r3, [r2, #0]

		duty = (float) 100 * cnt_high / cnt_full;
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <HAL_TIM_IC_CaptureCallback+0x9c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	ee07 3a90 	vmov	s15, r3
 80023ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ce:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002430 <HAL_TIM_IC_CaptureCallback+0xa0>
 80023d2:	ee67 6a87 	vmul.f32	s13, s15, s14
 80023d6:	4b14      	ldr	r3, [pc, #80]	; (8002428 <HAL_TIM_IC_CaptureCallback+0x98>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	ee07 3a90 	vmov	s15, r3
 80023de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023e6:	4b13      	ldr	r3, [pc, #76]	; (8002434 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80023e8:	edc3 7a00 	vstr	s15, [r3]
		duty_MA = duty_alpha * duty + (1-duty_alpha) * duty_MA;
 80023ec:	4b12      	ldr	r3, [pc, #72]	; (8002438 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80023ee:	ed93 7a00 	vldr	s14, [r3]
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_TIM_IC_CaptureCallback+0xa4>)
 80023f4:	edd3 7a00 	vldr	s15, [r3]
 80023f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023fc:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_TIM_IC_CaptureCallback+0xa8>)
 80023fe:	edd3 7a00 	vldr	s15, [r3]
 8002402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002406:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <HAL_TIM_IC_CaptureCallback+0xac>)
 800240c:	edd3 7a00 	vldr	s15, [r3]
 8002410:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002418:	4b08      	ldr	r3, [pc, #32]	; (800243c <HAL_TIM_IC_CaptureCallback+0xac>)
 800241a:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800241e:	bf00      	nop
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	2000075c 	.word	0x2000075c
 800242c:	20000760 	.word	0x20000760
 8002430:	42c80000 	.word	0x42c80000
 8002434:	20000764 	.word	0x20000764
 8002438:	20000000 	.word	0x20000000
 800243c:	20000768 	.word	0x20000768

08002440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002444:	b672      	cpsid	i
}
 8002446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002448:	e7fe      	b.n	8002448 <Error_Handler+0x8>
 800244a:	0000      	movs	r0, r0
 800244c:	0000      	movs	r0, r0
	...

08002450 <SteeringAngle>:
    //angle2CCR = ((angle/180+1)/20*60000);
    pwmHandle->Instance->CCR1 = (int)((angle/180+1)/20*60000);//angle2CCR;
}


float SteeringAngle(float p, float delta){
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	ed87 0a01 	vstr	s0, [r7, #4]
 800245a:	edc7 0a00 	vstr	s1, [r7]
	float kp=-1.159;
 800245e:	4b22      	ldr	r3, [pc, #136]	; (80024e8 <SteeringAngle+0x98>)
 8002460:	617b      	str	r3, [r7, #20]
	float kd=-0.7812;
 8002462:	4b22      	ldr	r3, [pc, #136]	; (80024ec <SteeringAngle+0x9c>)
 8002464:	613b      	str	r3, [r7, #16]
	float phi = atan(0.7826*tan(-kp*p-kd*delta));
 8002466:	edd7 7a05 	vldr	s15, [r7, #20]
 800246a:	eeb1 7a67 	vneg.f32	s14, s15
 800246e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002472:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002476:	edd7 6a04 	vldr	s13, [r7, #16]
 800247a:	edd7 7a00 	vldr	s15, [r7]
 800247e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002482:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002486:	ee17 0a90 	vmov	r0, s15
 800248a:	f7fe f87d 	bl	8000588 <__aeabi_f2d>
 800248e:	4602      	mov	r2, r0
 8002490:	460b      	mov	r3, r1
 8002492:	ec43 2b10 	vmov	d0, r2, r3
 8002496:	f007 ff37 	bl	800a308 <tan>
 800249a:	ec51 0b10 	vmov	r0, r1, d0
 800249e:	a310      	add	r3, pc, #64	; (adr r3, 80024e0 <SteeringAngle+0x90>)
 80024a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a4:	f7fe f8c8 	bl	8000638 <__aeabi_dmul>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	ec43 2b17 	vmov	d7, r2, r3
 80024b0:	eeb0 0a47 	vmov.f32	s0, s14
 80024b4:	eef0 0a67 	vmov.f32	s1, s15
 80024b8:	f007 fd7a 	bl	8009fb0 <atan>
 80024bc:	ec53 2b10 	vmov	r2, r3, d0
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe fb90 	bl	8000be8 <__aeabi_d2f>
 80024c8:	4603      	mov	r3, r0
 80024ca:	60fb      	str	r3, [r7, #12]
	return phi;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	ee07 3a90 	vmov	s15, r3
}
 80024d2:	eeb0 0a67 	vmov.f32	s0, s15
 80024d6:	3718      	adds	r7, #24
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	f3af 8000 	nop.w
 80024e0:	27bb2fec 	.word	0x27bb2fec
 80024e4:	3fe90b0f 	.word	0x3fe90b0f
 80024e8:	bf945a1d 	.word	0xbf945a1d
 80024ec:	bf47fcb9 	.word	0xbf47fcb9

080024f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <HAL_MspInit+0x4c>)
 80024fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fe:	4a0f      	ldr	r2, [pc, #60]	; (800253c <HAL_MspInit+0x4c>)
 8002500:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002504:	6453      	str	r3, [r2, #68]	; 0x44
 8002506:	4b0d      	ldr	r3, [pc, #52]	; (800253c <HAL_MspInit+0x4c>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	603b      	str	r3, [r7, #0]
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <HAL_MspInit+0x4c>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	4a08      	ldr	r2, [pc, #32]	; (800253c <HAL_MspInit+0x4c>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002520:	6413      	str	r3, [r2, #64]	; 0x40
 8002522:	4b06      	ldr	r3, [pc, #24]	; (800253c <HAL_MspInit+0x4c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	603b      	str	r3, [r7, #0]
 800252c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800252e:	2007      	movs	r0, #7
 8002530:	f001 f894 	bl	800365c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002534:	bf00      	nop
 8002536:	3708      	adds	r7, #8
 8002538:	46bd      	mov	sp, r7
 800253a:	bd80      	pop	{r7, pc}
 800253c:	40023800 	.word	0x40023800

08002540 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08a      	sub	sp, #40	; 0x28
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 0314 	add.w	r3, r7, #20
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a17      	ldr	r2, [pc, #92]	; (80025bc <HAL_ADC_MspInit+0x7c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d127      	bne.n	80025b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <HAL_ADC_MspInit+0x80>)
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	4a15      	ldr	r2, [pc, #84]	; (80025c0 <HAL_ADC_MspInit+0x80>)
 800256c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002570:	6453      	str	r3, [r2, #68]	; 0x44
 8002572:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <HAL_ADC_MspInit+0x80>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60fb      	str	r3, [r7, #12]
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <HAL_ADC_MspInit+0x80>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a0e      	ldr	r2, [pc, #56]	; (80025c0 <HAL_ADC_MspInit+0x80>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <HAL_ADC_MspInit+0x80>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IMotor_Pin|UBatt_Pin;
 800259a:	2312      	movs	r3, #18
 800259c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800259e:	2303      	movs	r3, #3
 80025a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a6:	f107 0314 	add.w	r3, r7, #20
 80025aa:	4619      	mov	r1, r3
 80025ac:	4805      	ldr	r0, [pc, #20]	; (80025c4 <HAL_ADC_MspInit+0x84>)
 80025ae:	f001 f897 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80025b2:	bf00      	nop
 80025b4:	3728      	adds	r7, #40	; 0x28
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40012000 	.word	0x40012000
 80025c0:	40023800 	.word	0x40023800
 80025c4:	40020000 	.word	0x40020000

080025c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b08e      	sub	sp, #56	; 0x38
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]
 80025de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a5c      	ldr	r2, [pc, #368]	; (8002758 <HAL_I2C_MspInit+0x190>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d12d      	bne.n	8002646 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	623b      	str	r3, [r7, #32]
 80025ee:	4b5b      	ldr	r3, [pc, #364]	; (800275c <HAL_I2C_MspInit+0x194>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a5a      	ldr	r2, [pc, #360]	; (800275c <HAL_I2C_MspInit+0x194>)
 80025f4:	f043 0302 	orr.w	r3, r3, #2
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b58      	ldr	r3, [pc, #352]	; (800275c <HAL_I2C_MspInit+0x194>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	623b      	str	r3, [r7, #32]
 8002604:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002606:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800260c:	2312      	movs	r3, #18
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002614:	2303      	movs	r3, #3
 8002616:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002618:	2304      	movs	r3, #4
 800261a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800261c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002620:	4619      	mov	r1, r3
 8002622:	484f      	ldr	r0, [pc, #316]	; (8002760 <HAL_I2C_MspInit+0x198>)
 8002624:	f001 f85c 	bl	80036e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002628:	2300      	movs	r3, #0
 800262a:	61fb      	str	r3, [r7, #28]
 800262c:	4b4b      	ldr	r3, [pc, #300]	; (800275c <HAL_I2C_MspInit+0x194>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	4a4a      	ldr	r2, [pc, #296]	; (800275c <HAL_I2C_MspInit+0x194>)
 8002632:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002636:	6413      	str	r3, [r2, #64]	; 0x40
 8002638:	4b48      	ldr	r3, [pc, #288]	; (800275c <HAL_I2C_MspInit+0x194>)
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002640:	61fb      	str	r3, [r7, #28]
 8002642:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002644:	e083      	b.n	800274e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C2)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a46      	ldr	r2, [pc, #280]	; (8002764 <HAL_I2C_MspInit+0x19c>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d12d      	bne.n	80026ac <HAL_I2C_MspInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002650:	2300      	movs	r3, #0
 8002652:	61bb      	str	r3, [r7, #24]
 8002654:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_I2C_MspInit+0x194>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	4a40      	ldr	r2, [pc, #256]	; (800275c <HAL_I2C_MspInit+0x194>)
 800265a:	f043 0302 	orr.w	r3, r3, #2
 800265e:	6313      	str	r3, [r2, #48]	; 0x30
 8002660:	4b3e      	ldr	r3, [pc, #248]	; (800275c <HAL_I2C_MspInit+0x194>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	61bb      	str	r3, [r7, #24]
 800266a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3;
 800266c:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002672:	2312      	movs	r3, #18
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267a:	2303      	movs	r3, #3
 800267c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800267e:	2304      	movs	r3, #4
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002686:	4619      	mov	r1, r3
 8002688:	4835      	ldr	r0, [pc, #212]	; (8002760 <HAL_I2C_MspInit+0x198>)
 800268a:	f001 f829 	bl	80036e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	4b32      	ldr	r3, [pc, #200]	; (800275c <HAL_I2C_MspInit+0x194>)
 8002694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002696:	4a31      	ldr	r2, [pc, #196]	; (800275c <HAL_I2C_MspInit+0x194>)
 8002698:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800269c:	6413      	str	r3, [r2, #64]	; 0x40
 800269e:	4b2f      	ldr	r3, [pc, #188]	; (800275c <HAL_I2C_MspInit+0x194>)
 80026a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697b      	ldr	r3, [r7, #20]
}
 80026aa:	e050      	b.n	800274e <HAL_I2C_MspInit+0x186>
  else if(hi2c->Instance==I2C3)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a2d      	ldr	r2, [pc, #180]	; (8002768 <HAL_I2C_MspInit+0x1a0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d14b      	bne.n	800274e <HAL_I2C_MspInit+0x186>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	4b28      	ldr	r3, [pc, #160]	; (800275c <HAL_I2C_MspInit+0x194>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a27      	ldr	r2, [pc, #156]	; (800275c <HAL_I2C_MspInit+0x194>)
 80026c0:	f043 0304 	orr.w	r3, r3, #4
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b25      	ldr	r3, [pc, #148]	; (800275c <HAL_I2C_MspInit+0x194>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	613b      	str	r3, [r7, #16]
 80026d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	4b21      	ldr	r3, [pc, #132]	; (800275c <HAL_I2C_MspInit+0x194>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a20      	ldr	r2, [pc, #128]	; (800275c <HAL_I2C_MspInit+0x194>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <HAL_I2C_MspInit+0x194>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80026ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80026f4:	2312      	movs	r3, #18
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fc:	2303      	movs	r3, #3
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002700:	2304      	movs	r3, #4
 8002702:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002708:	4619      	mov	r1, r3
 800270a:	4818      	ldr	r0, [pc, #96]	; (800276c <HAL_I2C_MspInit+0x1a4>)
 800270c:	f000 ffe8 	bl	80036e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002716:	2312      	movs	r3, #18
 8002718:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002722:	2304      	movs	r3, #4
 8002724:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800272a:	4619      	mov	r1, r3
 800272c:	4810      	ldr	r0, [pc, #64]	; (8002770 <HAL_I2C_MspInit+0x1a8>)
 800272e:	f000 ffd7 	bl	80036e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	4b09      	ldr	r3, [pc, #36]	; (800275c <HAL_I2C_MspInit+0x194>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a08      	ldr	r2, [pc, #32]	; (800275c <HAL_I2C_MspInit+0x194>)
 800273c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002740:	6413      	str	r3, [r2, #64]	; 0x40
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_I2C_MspInit+0x194>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
}
 800274e:	bf00      	nop
 8002750:	3738      	adds	r7, #56	; 0x38
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40005400 	.word	0x40005400
 800275c:	40023800 	.word	0x40023800
 8002760:	40020400 	.word	0x40020400
 8002764:	40005800 	.word	0x40005800
 8002768:	40005c00 	.word	0x40005c00
 800276c:	40020800 	.word	0x40020800
 8002770:	40020000 	.word	0x40020000

08002774 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b090      	sub	sp, #64	; 0x40
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800277c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a72      	ldr	r2, [pc, #456]	; (800295c <HAL_SPI_MspInit+0x1e8>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d14a      	bne.n	800282c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	62bb      	str	r3, [r7, #40]	; 0x28
 800279a:	4b71      	ldr	r3, [pc, #452]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279e:	4a70      	ldr	r2, [pc, #448]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 80027a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80027a4:	6453      	str	r3, [r2, #68]	; 0x44
 80027a6:	4b6e      	ldr	r3, [pc, #440]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 80027a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	4b6a      	ldr	r3, [pc, #424]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a69      	ldr	r2, [pc, #420]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b67      	ldr	r3, [pc, #412]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
 80027d2:	4b63      	ldr	r3, [pc, #396]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a62      	ldr	r2, [pc, #392]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 80027d8:	f043 0302 	orr.w	r3, r3, #2
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b60      	ldr	r3, [pc, #384]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	623b      	str	r3, [r7, #32]
 80027e8:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80027ea:	23a0      	movs	r3, #160	; 0xa0
 80027ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f6:	2303      	movs	r3, #3
 80027f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027fa:	2305      	movs	r3, #5
 80027fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002802:	4619      	mov	r1, r3
 8002804:	4857      	ldr	r0, [pc, #348]	; (8002964 <HAL_SPI_MspInit+0x1f0>)
 8002806:	f000 ff6b 	bl	80036e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800280a:	2310      	movs	r3, #16
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280e:	2302      	movs	r3, #2
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002816:	2303      	movs	r3, #3
 8002818:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800281a:	2305      	movs	r3, #5
 800281c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800281e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002822:	4619      	mov	r1, r3
 8002824:	4850      	ldr	r0, [pc, #320]	; (8002968 <HAL_SPI_MspInit+0x1f4>)
 8002826:	f000 ff5b 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800282a:	e092      	b.n	8002952 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a4e      	ldr	r2, [pc, #312]	; (800296c <HAL_SPI_MspInit+0x1f8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d15b      	bne.n	80028ee <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
 800283a:	4b49      	ldr	r3, [pc, #292]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 800283c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283e:	4a48      	ldr	r2, [pc, #288]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 8002840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002844:	6413      	str	r3, [r2, #64]	; 0x40
 8002846:	4b46      	ldr	r3, [pc, #280]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284e:	61fb      	str	r3, [r7, #28]
 8002850:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
 8002856:	4b42      	ldr	r3, [pc, #264]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285a:	4a41      	ldr	r2, [pc, #260]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 800285c:	f043 0304 	orr.w	r3, r3, #4
 8002860:	6313      	str	r3, [r2, #48]	; 0x30
 8002862:	4b3f      	ldr	r3, [pc, #252]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	f003 0304 	and.w	r3, r3, #4
 800286a:	61bb      	str	r3, [r7, #24]
 800286c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a3a      	ldr	r2, [pc, #232]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 8002878:	f043 0302 	orr.w	r3, r3, #2
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b38      	ldr	r3, [pc, #224]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	617b      	str	r3, [r7, #20]
 8002888:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800288a:	2302      	movs	r3, #2
 800288c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002896:	2303      	movs	r3, #3
 8002898:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800289a:	2307      	movs	r3, #7
 800289c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a2:	4619      	mov	r1, r3
 80028a4:	4832      	ldr	r0, [pc, #200]	; (8002970 <HAL_SPI_MspInit+0x1fc>)
 80028a6:	f000 ff1b 	bl	80036e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028aa:	2304      	movs	r3, #4
 80028ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ae:	2302      	movs	r3, #2
 80028b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b2:	2300      	movs	r3, #0
 80028b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b6:	2303      	movs	r3, #3
 80028b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028ba:	2305      	movs	r3, #5
 80028bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028c2:	4619      	mov	r1, r3
 80028c4:	482a      	ldr	r0, [pc, #168]	; (8002970 <HAL_SPI_MspInit+0x1fc>)
 80028c6:	f000 ff0b 	bl	80036e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d0:	2302      	movs	r3, #2
 80028d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d4:	2300      	movs	r3, #0
 80028d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d8:	2303      	movs	r3, #3
 80028da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80028dc:	2305      	movs	r3, #5
 80028de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028e4:	4619      	mov	r1, r3
 80028e6:	4820      	ldr	r0, [pc, #128]	; (8002968 <HAL_SPI_MspInit+0x1f4>)
 80028e8:	f000 fefa 	bl	80036e0 <HAL_GPIO_Init>
}
 80028ec:	e031      	b.n	8002952 <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI3)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a20      	ldr	r2, [pc, #128]	; (8002974 <HAL_SPI_MspInit+0x200>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d12c      	bne.n	8002952 <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80028f8:	2300      	movs	r3, #0
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	4b18      	ldr	r3, [pc, #96]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	4a17      	ldr	r2, [pc, #92]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 8002902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002906:	6413      	str	r3, [r2, #64]	; 0x40
 8002908:	4b15      	ldr	r3, [pc, #84]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	4b11      	ldr	r3, [pc, #68]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	4a10      	ldr	r2, [pc, #64]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 800291e:	f043 0304 	orr.w	r3, r3, #4
 8002922:	6313      	str	r3, [r2, #48]	; 0x30
 8002924:	4b0e      	ldr	r3, [pc, #56]	; (8002960 <HAL_SPI_MspInit+0x1ec>)
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8002930:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002934:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002936:	2302      	movs	r3, #2
 8002938:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293a:	2300      	movs	r3, #0
 800293c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293e:	2303      	movs	r3, #3
 8002940:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002942:	2306      	movs	r3, #6
 8002944:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002946:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800294a:	4619      	mov	r1, r3
 800294c:	4808      	ldr	r0, [pc, #32]	; (8002970 <HAL_SPI_MspInit+0x1fc>)
 800294e:	f000 fec7 	bl	80036e0 <HAL_GPIO_Init>
}
 8002952:	bf00      	nop
 8002954:	3740      	adds	r7, #64	; 0x40
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40013000 	.word	0x40013000
 8002960:	40023800 	.word	0x40023800
 8002964:	40020000 	.word	0x40020000
 8002968:	40020400 	.word	0x40020400
 800296c:	40003800 	.word	0x40003800
 8002970:	40020800 	.word	0x40020800
 8002974:	40003c00 	.word	0x40003c00

08002978 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08a      	sub	sp, #40	; 0x28
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002980:	f107 0314 	add.w	r3, r7, #20
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	605a      	str	r2, [r3, #4]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	60da      	str	r2, [r3, #12]
 800298e:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002998:	d134      	bne.n	8002a04 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	4b1b      	ldr	r3, [pc, #108]	; (8002a0c <HAL_TIM_IC_MspInit+0x94>)
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	4a1a      	ldr	r2, [pc, #104]	; (8002a0c <HAL_TIM_IC_MspInit+0x94>)
 80029a4:	f043 0301 	orr.w	r3, r3, #1
 80029a8:	6413      	str	r3, [r2, #64]	; 0x40
 80029aa:	4b18      	ldr	r3, [pc, #96]	; (8002a0c <HAL_TIM_IC_MspInit+0x94>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	60fb      	str	r3, [r7, #12]
 80029ba:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <HAL_TIM_IC_MspInit+0x94>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a13      	ldr	r2, [pc, #76]	; (8002a0c <HAL_TIM_IC_MspInit+0x94>)
 80029c0:	f043 0301 	orr.w	r3, r3, #1
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_TIM_IC_MspInit+0x94>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0301 	and.w	r3, r3, #1
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80029d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2300      	movs	r3, #0
 80029e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029e4:	2301      	movs	r3, #1
 80029e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e8:	f107 0314 	add.w	r3, r7, #20
 80029ec:	4619      	mov	r1, r3
 80029ee:	4808      	ldr	r0, [pc, #32]	; (8002a10 <HAL_TIM_IC_MspInit+0x98>)
 80029f0:	f000 fe76 	bl	80036e0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029f4:	2200      	movs	r2, #0
 80029f6:	2100      	movs	r1, #0
 80029f8:	201c      	movs	r0, #28
 80029fa:	f000 fe3a 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029fe:	201c      	movs	r0, #28
 8002a00:	f000 fe53 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002a04:	bf00      	nop
 8002a06:	3728      	adds	r7, #40	; 0x28
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40023800 	.word	0x40023800
 8002a10:	40020000 	.word	0x40020000

08002a14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <HAL_TIM_PWM_MspInit+0x64>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d10e      	bne.n	8002a44 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	4b14      	ldr	r3, [pc, #80]	; (8002a7c <HAL_TIM_PWM_MspInit+0x68>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	4a13      	ldr	r2, [pc, #76]	; (8002a7c <HAL_TIM_PWM_MspInit+0x68>)
 8002a30:	f043 0302 	orr.w	r3, r3, #2
 8002a34:	6413      	str	r3, [r2, #64]	; 0x40
 8002a36:	4b11      	ldr	r3, [pc, #68]	; (8002a7c <HAL_TIM_PWM_MspInit+0x68>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002a42:	e012      	b.n	8002a6a <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0d      	ldr	r2, [pc, #52]	; (8002a80 <HAL_TIM_PWM_MspInit+0x6c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d10d      	bne.n	8002a6a <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	4b0a      	ldr	r3, [pc, #40]	; (8002a7c <HAL_TIM_PWM_MspInit+0x68>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	4a09      	ldr	r2, [pc, #36]	; (8002a7c <HAL_TIM_PWM_MspInit+0x68>)
 8002a58:	f043 0304 	orr.w	r3, r3, #4
 8002a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5e:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <HAL_TIM_PWM_MspInit+0x68>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
}
 8002a6a:	bf00      	nop
 8002a6c:	3714      	adds	r7, #20
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a74:	4770      	bx	lr
 8002a76:	bf00      	nop
 8002a78:	40000400 	.word	0x40000400
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40000800 	.word	0x40000800

08002a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a26      	ldr	r2, [pc, #152]	; (8002b2c <HAL_TIM_Base_MspInit+0xa8>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d116      	bne.n	8002ac4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	617b      	str	r3, [r7, #20]
 8002a9a:	4b25      	ldr	r3, [pc, #148]	; (8002b30 <HAL_TIM_Base_MspInit+0xac>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9e:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <HAL_TIM_Base_MspInit+0xac>)
 8002aa0:	f043 0308 	orr.w	r3, r3, #8
 8002aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa6:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <HAL_TIM_Base_MspInit+0xac>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	f003 0308 	and.w	r3, r3, #8
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	697b      	ldr	r3, [r7, #20]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	2032      	movs	r0, #50	; 0x32
 8002ab8:	f000 fddb 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002abc:	2032      	movs	r0, #50	; 0x32
 8002abe:	f000 fdf4 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002ac2:	e02e      	b.n	8002b22 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM7)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a1a      	ldr	r2, [pc, #104]	; (8002b34 <HAL_TIM_Base_MspInit+0xb0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d116      	bne.n	8002afc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	4b17      	ldr	r3, [pc, #92]	; (8002b30 <HAL_TIM_Base_MspInit+0xac>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <HAL_TIM_Base_MspInit+0xac>)
 8002ad8:	f043 0320 	orr.w	r3, r3, #32
 8002adc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ade:	4b14      	ldr	r3, [pc, #80]	; (8002b30 <HAL_TIM_Base_MspInit+0xac>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	613b      	str	r3, [r7, #16]
 8002ae8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002aea:	2200      	movs	r2, #0
 8002aec:	2100      	movs	r1, #0
 8002aee:	2037      	movs	r0, #55	; 0x37
 8002af0:	f000 fdbf 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002af4:	2037      	movs	r0, #55	; 0x37
 8002af6:	f000 fdd8 	bl	80036aa <HAL_NVIC_EnableIRQ>
}
 8002afa:	e012      	b.n	8002b22 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM13)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a0d      	ldr	r2, [pc, #52]	; (8002b38 <HAL_TIM_Base_MspInit+0xb4>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d10d      	bne.n	8002b22 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002b06:	2300      	movs	r3, #0
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	4b09      	ldr	r3, [pc, #36]	; (8002b30 <HAL_TIM_Base_MspInit+0xac>)
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0e:	4a08      	ldr	r2, [pc, #32]	; (8002b30 <HAL_TIM_Base_MspInit+0xac>)
 8002b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b14:	6413      	str	r3, [r2, #64]	; 0x40
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_TIM_Base_MspInit+0xac>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
}
 8002b22:	bf00      	nop
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	40000c00 	.word	0x40000c00
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40001400 	.word	0x40001400
 8002b38:	40001c00 	.word	0x40001c00

08002b3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08c      	sub	sp, #48	; 0x30
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 031c 	add.w	r3, r7, #28
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a48      	ldr	r2, [pc, #288]	; (8002c7c <HAL_TIM_MspPostInit+0x140>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d11e      	bne.n	8002b9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
 8002b62:	4b47      	ldr	r3, [pc, #284]	; (8002c80 <HAL_TIM_MspPostInit+0x144>)
 8002b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b66:	4a46      	ldr	r2, [pc, #280]	; (8002c80 <HAL_TIM_MspPostInit+0x144>)
 8002b68:	f043 0302 	orr.w	r3, r3, #2
 8002b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b6e:	4b44      	ldr	r3, [pc, #272]	; (8002c80 <HAL_TIM_MspPostInit+0x144>)
 8002b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DRV_PMW1_Pin;
 8002b7a:	2320      	movs	r3, #32
 8002b7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7e:	2302      	movs	r3, #2
 8002b80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b86:	2300      	movs	r3, #0
 8002b88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PMW1_GPIO_Port, &GPIO_InitStruct);
 8002b8e:	f107 031c 	add.w	r3, r7, #28
 8002b92:	4619      	mov	r1, r3
 8002b94:	483b      	ldr	r0, [pc, #236]	; (8002c84 <HAL_TIM_MspPostInit+0x148>)
 8002b96:	f000 fda3 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002b9a:	e06a      	b.n	8002c72 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a39      	ldr	r2, [pc, #228]	; (8002c88 <HAL_TIM_MspPostInit+0x14c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d11e      	bne.n	8002be4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	617b      	str	r3, [r7, #20]
 8002baa:	4b35      	ldr	r3, [pc, #212]	; (8002c80 <HAL_TIM_MspPostInit+0x144>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bae:	4a34      	ldr	r2, [pc, #208]	; (8002c80 <HAL_TIM_MspPostInit+0x144>)
 8002bb0:	f043 0302 	orr.w	r3, r3, #2
 8002bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb6:	4b32      	ldr	r3, [pc, #200]	; (8002c80 <HAL_TIM_MspPostInit+0x144>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DRV_PWM2_Pin;
 8002bc2:	2340      	movs	r3, #64	; 0x40
 8002bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PWM2_GPIO_Port, &GPIO_InitStruct);
 8002bd6:	f107 031c 	add.w	r3, r7, #28
 8002bda:	4619      	mov	r1, r3
 8002bdc:	4829      	ldr	r0, [pc, #164]	; (8002c84 <HAL_TIM_MspPostInit+0x148>)
 8002bde:	f000 fd7f 	bl	80036e0 <HAL_GPIO_Init>
}
 8002be2:	e046      	b.n	8002c72 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a28      	ldr	r2, [pc, #160]	; (8002c8c <HAL_TIM_MspPostInit+0x150>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d11e      	bne.n	8002c2c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	4b23      	ldr	r3, [pc, #140]	; (8002c80 <HAL_TIM_MspPostInit+0x144>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <HAL_TIM_MspPostInit+0x144>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <HAL_TIM_MspPostInit+0x144>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	613b      	str	r3, [r7, #16]
 8002c08:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM2_Pin;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c12:	2300      	movs	r3, #0
 8002c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c16:	2300      	movs	r3, #0
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM2_GPIO_Port, &GPIO_InitStruct);
 8002c1e:	f107 031c 	add.w	r3, r7, #28
 8002c22:	4619      	mov	r1, r3
 8002c24:	481a      	ldr	r0, [pc, #104]	; (8002c90 <HAL_TIM_MspPostInit+0x154>)
 8002c26:	f000 fd5b 	bl	80036e0 <HAL_GPIO_Init>
}
 8002c2a:	e022      	b.n	8002c72 <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM13)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a18      	ldr	r2, [pc, #96]	; (8002c94 <HAL_TIM_MspPostInit+0x158>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d11d      	bne.n	8002c72 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	4b11      	ldr	r3, [pc, #68]	; (8002c80 <HAL_TIM_MspPostInit+0x144>)
 8002c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3e:	4a10      	ldr	r2, [pc, #64]	; (8002c80 <HAL_TIM_MspPostInit+0x144>)
 8002c40:	f043 0301 	orr.w	r3, r3, #1
 8002c44:	6313      	str	r3, [r2, #48]	; 0x30
 8002c46:	4b0e      	ldr	r3, [pc, #56]	; (8002c80 <HAL_TIM_MspPostInit+0x144>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM_Pin;
 8002c52:	2340      	movs	r3, #64	; 0x40
 8002c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c56:	2302      	movs	r3, #2
 8002c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002c62:	2309      	movs	r3, #9
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_GPIO_Port, &GPIO_InitStruct);
 8002c66:	f107 031c 	add.w	r3, r7, #28
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	4808      	ldr	r0, [pc, #32]	; (8002c90 <HAL_TIM_MspPostInit+0x154>)
 8002c6e:	f000 fd37 	bl	80036e0 <HAL_GPIO_Init>
}
 8002c72:	bf00      	nop
 8002c74:	3730      	adds	r7, #48	; 0x30
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020400 	.word	0x40020400
 8002c88:	40000800 	.word	0x40000800
 8002c8c:	40000c00 	.word	0x40000c00
 8002c90:	40020000 	.word	0x40020000
 8002c94:	40001c00 	.word	0x40001c00

08002c98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b08c      	sub	sp, #48	; 0x30
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 031c 	add.w	r3, r7, #28
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a32      	ldr	r2, [pc, #200]	; (8002d80 <HAL_UART_MspInit+0xe8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d12c      	bne.n	8002d14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
 8002cbe:	4b31      	ldr	r3, [pc, #196]	; (8002d84 <HAL_UART_MspInit+0xec>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	4a30      	ldr	r2, [pc, #192]	; (8002d84 <HAL_UART_MspInit+0xec>)
 8002cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cca:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <HAL_UART_MspInit+0xec>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	617b      	str	r3, [r7, #20]
 8002cda:	4b2a      	ldr	r3, [pc, #168]	; (8002d84 <HAL_UART_MspInit+0xec>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <HAL_UART_MspInit+0xec>)
 8002ce0:	f043 0301 	orr.w	r3, r3, #1
 8002ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce6:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <HAL_UART_MspInit+0xec>)
 8002ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	617b      	str	r3, [r7, #20]
 8002cf0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002cf2:	230c      	movs	r3, #12
 8002cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2302      	movs	r3, #2
 8002cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d02:	2307      	movs	r3, #7
 8002d04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d06:	f107 031c 	add.w	r3, r7, #28
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	481e      	ldr	r0, [pc, #120]	; (8002d88 <HAL_UART_MspInit+0xf0>)
 8002d0e:	f000 fce7 	bl	80036e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002d12:	e030      	b.n	8002d76 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a1c      	ldr	r2, [pc, #112]	; (8002d8c <HAL_UART_MspInit+0xf4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d12b      	bne.n	8002d76 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <HAL_UART_MspInit+0xec>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_UART_MspInit+0xec>)
 8002d28:	f043 0320 	orr.w	r3, r3, #32
 8002d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_UART_MspInit+0xec>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f003 0320 	and.w	r3, r3, #32
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_UART_MspInit+0xec>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	4a10      	ldr	r2, [pc, #64]	; (8002d84 <HAL_UART_MspInit+0xec>)
 8002d44:	f043 0304 	orr.w	r3, r3, #4
 8002d48:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4a:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <HAL_UART_MspInit+0xec>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|RADIO_RX_Pin;
 8002d56:	23c0      	movs	r3, #192	; 0xc0
 8002d58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d62:	2303      	movs	r3, #3
 8002d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002d66:	2308      	movs	r3, #8
 8002d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d6a:	f107 031c 	add.w	r3, r7, #28
 8002d6e:	4619      	mov	r1, r3
 8002d70:	4807      	ldr	r0, [pc, #28]	; (8002d90 <HAL_UART_MspInit+0xf8>)
 8002d72:	f000 fcb5 	bl	80036e0 <HAL_GPIO_Init>
}
 8002d76:	bf00      	nop
 8002d78:	3730      	adds	r7, #48	; 0x30
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40004400 	.word	0x40004400
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020000 	.word	0x40020000
 8002d8c:	40011400 	.word	0x40011400
 8002d90:	40020800 	.word	0x40020800

08002d94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d98:	e7fe      	b.n	8002d98 <NMI_Handler+0x4>

08002d9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d9e:	e7fe      	b.n	8002d9e <HardFault_Handler+0x4>

08002da0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002da4:	e7fe      	b.n	8002da4 <MemManage_Handler+0x4>

08002da6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002da6:	b480      	push	{r7}
 8002da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002daa:	e7fe      	b.n	8002daa <BusFault_Handler+0x4>

08002dac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002db0:	e7fe      	b.n	8002db0 <UsageFault_Handler+0x4>

08002db2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002de0:	f000 f8b6 	bl	8002f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002de4:	bf00      	nop
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002dec:	4802      	ldr	r0, [pc, #8]	; (8002df8 <TIM2_IRQHandler+0x10>)
 8002dee:	f002 fcdd 	bl	80057ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002df2:	bf00      	nop
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000448 	.word	0x20000448

08002dfc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002e04:	f000 fe1a 	bl	8003a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e08:	bf00      	nop
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e10:	4802      	ldr	r0, [pc, #8]	; (8002e1c <TIM5_IRQHandler+0x10>)
 8002e12:	f002 fccb 	bl	80057ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e16:	bf00      	nop
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	20000520 	.word	0x20000520

08002e20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002e24:	4802      	ldr	r0, [pc, #8]	; (8002e30 <TIM7_IRQHandler+0x10>)
 8002e26:	f002 fcc1 	bl	80057ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002e2a:	bf00      	nop
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	20000568 	.word	0x20000568

08002e34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e38:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <SystemInit+0x20>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e3e:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <SystemInit+0x20>)
 8002e40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e48:	bf00      	nop
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002e58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e5c:	480d      	ldr	r0, [pc, #52]	; (8002e94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002e5e:	490e      	ldr	r1, [pc, #56]	; (8002e98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002e60:	4a0e      	ldr	r2, [pc, #56]	; (8002e9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e64:	e002      	b.n	8002e6c <LoopCopyDataInit>

08002e66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e6a:	3304      	adds	r3, #4

08002e6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e70:	d3f9      	bcc.n	8002e66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e72:	4a0b      	ldr	r2, [pc, #44]	; (8002ea0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002e74:	4c0b      	ldr	r4, [pc, #44]	; (8002ea4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002e76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e78:	e001      	b.n	8002e7e <LoopFillZerobss>

08002e7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e7c:	3204      	adds	r2, #4

08002e7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e80:	d3fb      	bcc.n	8002e7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e82:	f7ff ffd7 	bl	8002e34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e86:	f004 f981 	bl	800718c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e8a:	f7fe fc2d 	bl	80016e8 <main>
  bx  lr    
 8002e8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e98:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002e9c:	0800bb68 	.word	0x0800bb68
  ldr r2, =_sbss
 8002ea0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002ea4:	20000784 	.word	0x20000784

08002ea8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ea8:	e7fe      	b.n	8002ea8 <ADC_IRQHandler>
	...

08002eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eb0:	4b0e      	ldr	r3, [pc, #56]	; (8002eec <HAL_Init+0x40>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <HAL_Init+0x40>)
 8002eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ebc:	4b0b      	ldr	r3, [pc, #44]	; (8002eec <HAL_Init+0x40>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a0a      	ldr	r2, [pc, #40]	; (8002eec <HAL_Init+0x40>)
 8002ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec8:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_Init+0x40>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a07      	ldr	r2, [pc, #28]	; (8002eec <HAL_Init+0x40>)
 8002ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed4:	2003      	movs	r0, #3
 8002ed6:	f000 fbc1 	bl	800365c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eda:	2000      	movs	r0, #0
 8002edc:	f000 f808 	bl	8002ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee0:	f7ff fb06 	bl	80024f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	40023c00 	.word	0x40023c00

08002ef0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_InitTick+0x54>)
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <HAL_InitTick+0x58>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	4619      	mov	r1, r3
 8002f02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f000 fbd9 	bl	80036c6 <HAL_SYSTICK_Config>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e00e      	b.n	8002f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b0f      	cmp	r3, #15
 8002f22:	d80a      	bhi.n	8002f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f24:	2200      	movs	r2, #0
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	f04f 30ff 	mov.w	r0, #4294967295
 8002f2c:	f000 fba1 	bl	8003672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f30:	4a06      	ldr	r2, [pc, #24]	; (8002f4c <HAL_InitTick+0x5c>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	e000      	b.n	8002f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3708      	adds	r7, #8
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	20000004 	.word	0x20000004
 8002f48:	2000000c 	.word	0x2000000c
 8002f4c:	20000008 	.word	0x20000008

08002f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f50:	b480      	push	{r7}
 8002f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <HAL_IncTick+0x20>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	4b06      	ldr	r3, [pc, #24]	; (8002f74 <HAL_IncTick+0x24>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4413      	add	r3, r2
 8002f60:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_IncTick+0x24>)
 8002f62:	6013      	str	r3, [r2, #0]
}
 8002f64:	bf00      	nop
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	2000000c 	.word	0x2000000c
 8002f74:	2000076c 	.word	0x2000076c

08002f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <HAL_GetTick+0x14>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	2000076c 	.word	0x2000076c

08002f90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f98:	f7ff ffee 	bl	8002f78 <HAL_GetTick>
 8002f9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d005      	beq.n	8002fb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002faa:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <HAL_Delay+0x44>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fb6:	bf00      	nop
 8002fb8:	f7ff ffde 	bl	8002f78 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d8f7      	bhi.n	8002fb8 <HAL_Delay+0x28>
  {
  }
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	2000000c 	.word	0x2000000c

08002fd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e033      	b.n	8003056 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d109      	bne.n	800300a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f7ff faa2 	bl	8002540 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f003 0310 	and.w	r3, r3, #16
 8003012:	2b00      	cmp	r3, #0
 8003014:	d118      	bne.n	8003048 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800301e:	f023 0302 	bic.w	r3, r3, #2
 8003022:	f043 0202 	orr.w	r2, r3, #2
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f94a 	bl	80032c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303a:	f023 0303 	bic.w	r3, r3, #3
 800303e:	f043 0201 	orr.w	r2, r3, #1
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	641a      	str	r2, [r3, #64]	; 0x40
 8003046:	e001      	b.n	800304c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003054:	7bfb      	ldrb	r3, [r7, #15]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3710      	adds	r7, #16
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
	...

08003060 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800306a:	2300      	movs	r3, #0
 800306c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d101      	bne.n	800307c <HAL_ADC_ConfigChannel+0x1c>
 8003078:	2302      	movs	r3, #2
 800307a:	e113      	b.n	80032a4 <HAL_ADC_ConfigChannel+0x244>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b09      	cmp	r3, #9
 800308a:	d925      	bls.n	80030d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68d9      	ldr	r1, [r3, #12]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	b29b      	uxth	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	4613      	mov	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	4413      	add	r3, r2
 80030a0:	3b1e      	subs	r3, #30
 80030a2:	2207      	movs	r2, #7
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	43da      	mvns	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	400a      	ands	r2, r1
 80030b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68d9      	ldr	r1, [r3, #12]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	4618      	mov	r0, r3
 80030c4:	4603      	mov	r3, r0
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	4403      	add	r3, r0
 80030ca:	3b1e      	subs	r3, #30
 80030cc:	409a      	lsls	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	60da      	str	r2, [r3, #12]
 80030d6:	e022      	b.n	800311e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6919      	ldr	r1, [r3, #16]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	4613      	mov	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4413      	add	r3, r2
 80030ec:	2207      	movs	r2, #7
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43da      	mvns	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	400a      	ands	r2, r1
 80030fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6919      	ldr	r1, [r3, #16]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	4618      	mov	r0, r3
 800310e:	4603      	mov	r3, r0
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4403      	add	r3, r0
 8003114:	409a      	lsls	r2, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2b06      	cmp	r3, #6
 8003124:	d824      	bhi.n	8003170 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	3b05      	subs	r3, #5
 8003138:	221f      	movs	r2, #31
 800313a:	fa02 f303 	lsl.w	r3, r2, r3
 800313e:	43da      	mvns	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	400a      	ands	r2, r1
 8003146:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	b29b      	uxth	r3, r3
 8003154:	4618      	mov	r0, r3
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	3b05      	subs	r3, #5
 8003162:	fa00 f203 	lsl.w	r2, r0, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	635a      	str	r2, [r3, #52]	; 0x34
 800316e:	e04c      	b.n	800320a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	2b0c      	cmp	r3, #12
 8003176:	d824      	bhi.n	80031c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	3b23      	subs	r3, #35	; 0x23
 800318a:	221f      	movs	r2, #31
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43da      	mvns	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	400a      	ands	r2, r1
 8003198:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	4618      	mov	r0, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	3b23      	subs	r3, #35	; 0x23
 80031b4:	fa00 f203 	lsl.w	r2, r0, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
 80031c0:	e023      	b.n	800320a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	4613      	mov	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	4413      	add	r3, r2
 80031d2:	3b41      	subs	r3, #65	; 0x41
 80031d4:	221f      	movs	r2, #31
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43da      	mvns	r2, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	400a      	ands	r2, r1
 80031e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	4618      	mov	r0, r3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	3b41      	subs	r3, #65	; 0x41
 80031fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800320a:	4b29      	ldr	r3, [pc, #164]	; (80032b0 <HAL_ADC_ConfigChannel+0x250>)
 800320c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a28      	ldr	r2, [pc, #160]	; (80032b4 <HAL_ADC_ConfigChannel+0x254>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d10f      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x1d8>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	2b12      	cmp	r3, #18
 800321e:	d10b      	bne.n	8003238 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1d      	ldr	r2, [pc, #116]	; (80032b4 <HAL_ADC_ConfigChannel+0x254>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d12b      	bne.n	800329a <HAL_ADC_ConfigChannel+0x23a>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1c      	ldr	r2, [pc, #112]	; (80032b8 <HAL_ADC_ConfigChannel+0x258>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d003      	beq.n	8003254 <HAL_ADC_ConfigChannel+0x1f4>
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2b11      	cmp	r3, #17
 8003252:	d122      	bne.n	800329a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a11      	ldr	r2, [pc, #68]	; (80032b8 <HAL_ADC_ConfigChannel+0x258>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d111      	bne.n	800329a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003276:	4b11      	ldr	r3, [pc, #68]	; (80032bc <HAL_ADC_ConfigChannel+0x25c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a11      	ldr	r2, [pc, #68]	; (80032c0 <HAL_ADC_ConfigChannel+0x260>)
 800327c:	fba2 2303 	umull	r2, r3, r2, r3
 8003280:	0c9a      	lsrs	r2, r3, #18
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800328c:	e002      	b.n	8003294 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	3b01      	subs	r3, #1
 8003292:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f9      	bne.n	800328e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032a2:	2300      	movs	r3, #0
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr
 80032b0:	40012300 	.word	0x40012300
 80032b4:	40012000 	.word	0x40012000
 80032b8:	10000012 	.word	0x10000012
 80032bc:	20000004 	.word	0x20000004
 80032c0:	431bde83 	.word	0x431bde83

080032c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b085      	sub	sp, #20
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032cc:	4b79      	ldr	r3, [pc, #484]	; (80034b4 <ADC_Init+0x1f0>)
 80032ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	685a      	ldr	r2, [r3, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	431a      	orrs	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6859      	ldr	r1, [r3, #4]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	021a      	lsls	r2, r3, #8
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800331c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6859      	ldr	r1, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	430a      	orrs	r2, r1
 800332e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800333e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6899      	ldr	r1, [r3, #8]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68da      	ldr	r2, [r3, #12]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003356:	4a58      	ldr	r2, [pc, #352]	; (80034b8 <ADC_Init+0x1f4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d022      	beq.n	80033a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800336a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6899      	ldr	r1, [r3, #8]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800338c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6899      	ldr	r1, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	e00f      	b.n	80033c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689a      	ldr	r2, [r3, #8]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0202 	bic.w	r2, r2, #2
 80033d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	6899      	ldr	r1, [r3, #8]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	7e1b      	ldrb	r3, [r3, #24]
 80033dc:	005a      	lsls	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01b      	beq.n	8003428 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	685a      	ldr	r2, [r3, #4]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800340e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6859      	ldr	r1, [r3, #4]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	3b01      	subs	r3, #1
 800341c:	035a      	lsls	r2, r3, #13
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	430a      	orrs	r2, r1
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	e007      	b.n	8003438 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003436:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003446:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	3b01      	subs	r3, #1
 8003454:	051a      	lsls	r2, r3, #20
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	430a      	orrs	r2, r1
 800345c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800346c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	6899      	ldr	r1, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800347a:	025a      	lsls	r2, r3, #9
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003492:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	6899      	ldr	r1, [r3, #8]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	029a      	lsls	r2, r3, #10
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	609a      	str	r2, [r3, #8]
}
 80034a8:	bf00      	nop
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr
 80034b4:	40012300 	.word	0x40012300
 80034b8:	0f000001 	.word	0x0f000001

080034bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80034d8:	4013      	ands	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ee:	4a04      	ldr	r2, [pc, #16]	; (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	60d3      	str	r3, [r2, #12]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003508:	4b04      	ldr	r3, [pc, #16]	; (800351c <__NVIC_GetPriorityGrouping+0x18>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	f003 0307 	and.w	r3, r3, #7
}
 8003512:	4618      	mov	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	2b00      	cmp	r3, #0
 8003530:	db0b      	blt.n	800354a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4907      	ldr	r1, [pc, #28]	; (8003558 <__NVIC_EnableIRQ+0x38>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2001      	movs	r0, #1
 8003542:	fa00 f202 	lsl.w	r2, r0, r2
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000e100 	.word	0xe000e100

0800355c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356c:	2b00      	cmp	r3, #0
 800356e:	db0a      	blt.n	8003586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	490c      	ldr	r1, [pc, #48]	; (80035a8 <__NVIC_SetPriority+0x4c>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	0112      	lsls	r2, r2, #4
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	440b      	add	r3, r1
 8003580:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003584:	e00a      	b.n	800359c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4908      	ldr	r1, [pc, #32]	; (80035ac <__NVIC_SetPriority+0x50>)
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	3b04      	subs	r3, #4
 8003594:	0112      	lsls	r2, r2, #4
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	440b      	add	r3, r1
 800359a:	761a      	strb	r2, [r3, #24]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000e100 	.word	0xe000e100
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	; 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f1c3 0307 	rsb	r3, r3, #7
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	bf28      	it	cs
 80035ce:	2304      	movcs	r3, #4
 80035d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3304      	adds	r3, #4
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d902      	bls.n	80035e0 <NVIC_EncodePriority+0x30>
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3b03      	subs	r3, #3
 80035de:	e000      	b.n	80035e2 <NVIC_EncodePriority+0x32>
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	f04f 32ff 	mov.w	r2, #4294967295
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43da      	mvns	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	401a      	ands	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f8:	f04f 31ff 	mov.w	r1, #4294967295
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	43d9      	mvns	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003608:	4313      	orrs	r3, r2
         );
}
 800360a:	4618      	mov	r0, r3
 800360c:	3724      	adds	r7, #36	; 0x24
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003628:	d301      	bcc.n	800362e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800362a:	2301      	movs	r3, #1
 800362c:	e00f      	b.n	800364e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362e:	4a0a      	ldr	r2, [pc, #40]	; (8003658 <SysTick_Config+0x40>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3b01      	subs	r3, #1
 8003634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003636:	210f      	movs	r1, #15
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	f7ff ff8e 	bl	800355c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <SysTick_Config+0x40>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003646:	4b04      	ldr	r3, [pc, #16]	; (8003658 <SysTick_Config+0x40>)
 8003648:	2207      	movs	r2, #7
 800364a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	e000e010 	.word	0xe000e010

0800365c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff29 	bl	80034bc <__NVIC_SetPriorityGrouping>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003684:	f7ff ff3e 	bl	8003504 <__NVIC_GetPriorityGrouping>
 8003688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f7ff ff8e 	bl	80035b0 <NVIC_EncodePriority>
 8003694:	4602      	mov	r2, r0
 8003696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff5d 	bl	800355c <__NVIC_SetPriority>
}
 80036a2:	bf00      	nop
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff31 	bl	8003520 <__NVIC_EnableIRQ>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff ffa2 	bl	8003618 <SysTick_Config>
 80036d4:	4603      	mov	r3, r0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b089      	sub	sp, #36	; 0x24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
 80036e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036f6:	2300      	movs	r3, #0
 80036f8:	61fb      	str	r3, [r7, #28]
 80036fa:	e165      	b.n	80039c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036fc:	2201      	movs	r2, #1
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003710:	693a      	ldr	r2, [r7, #16]
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	429a      	cmp	r2, r3
 8003716:	f040 8154 	bne.w	80039c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f003 0303 	and.w	r3, r3, #3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d005      	beq.n	8003732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800372e:	2b02      	cmp	r3, #2
 8003730:	d130      	bne.n	8003794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2203      	movs	r2, #3
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68da      	ldr	r2, [r3, #12]
 800374e:	69fb      	ldr	r3, [r7, #28]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	69ba      	ldr	r2, [r7, #24]
 8003760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003768:	2201      	movs	r2, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	43db      	mvns	r3, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4013      	ands	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 0201 	and.w	r2, r3, #1
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	fa02 f303 	lsl.w	r3, r2, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4313      	orrs	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 0303 	and.w	r3, r3, #3
 800379c:	2b03      	cmp	r3, #3
 800379e:	d017      	beq.n	80037d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	2203      	movs	r2, #3
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d123      	bne.n	8003824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	08da      	lsrs	r2, r3, #3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	3208      	adds	r2, #8
 80037e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	220f      	movs	r2, #15
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43db      	mvns	r3, r3
 80037fa:	69ba      	ldr	r2, [r7, #24]
 80037fc:	4013      	ands	r3, r2
 80037fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	691a      	ldr	r2, [r3, #16]
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	4313      	orrs	r3, r2
 8003814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	08da      	lsrs	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3208      	adds	r2, #8
 800381e:	69b9      	ldr	r1, [r7, #24]
 8003820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	2203      	movs	r2, #3
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0203 	and.w	r2, r3, #3
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003860:	2b00      	cmp	r3, #0
 8003862:	f000 80ae 	beq.w	80039c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	4b5d      	ldr	r3, [pc, #372]	; (80039e0 <HAL_GPIO_Init+0x300>)
 800386c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800386e:	4a5c      	ldr	r2, [pc, #368]	; (80039e0 <HAL_GPIO_Init+0x300>)
 8003870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003874:	6453      	str	r3, [r2, #68]	; 0x44
 8003876:	4b5a      	ldr	r3, [pc, #360]	; (80039e0 <HAL_GPIO_Init+0x300>)
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800387e:	60fb      	str	r3, [r7, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003882:	4a58      	ldr	r2, [pc, #352]	; (80039e4 <HAL_GPIO_Init+0x304>)
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	089b      	lsrs	r3, r3, #2
 8003888:	3302      	adds	r3, #2
 800388a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800388e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	220f      	movs	r2, #15
 800389a:	fa02 f303 	lsl.w	r3, r2, r3
 800389e:	43db      	mvns	r3, r3
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4013      	ands	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4f      	ldr	r2, [pc, #316]	; (80039e8 <HAL_GPIO_Init+0x308>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d025      	beq.n	80038fa <HAL_GPIO_Init+0x21a>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4e      	ldr	r2, [pc, #312]	; (80039ec <HAL_GPIO_Init+0x30c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d01f      	beq.n	80038f6 <HAL_GPIO_Init+0x216>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4d      	ldr	r2, [pc, #308]	; (80039f0 <HAL_GPIO_Init+0x310>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d019      	beq.n	80038f2 <HAL_GPIO_Init+0x212>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4c      	ldr	r2, [pc, #304]	; (80039f4 <HAL_GPIO_Init+0x314>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d013      	beq.n	80038ee <HAL_GPIO_Init+0x20e>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4b      	ldr	r2, [pc, #300]	; (80039f8 <HAL_GPIO_Init+0x318>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d00d      	beq.n	80038ea <HAL_GPIO_Init+0x20a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4a      	ldr	r2, [pc, #296]	; (80039fc <HAL_GPIO_Init+0x31c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d007      	beq.n	80038e6 <HAL_GPIO_Init+0x206>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a49      	ldr	r2, [pc, #292]	; (8003a00 <HAL_GPIO_Init+0x320>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d101      	bne.n	80038e2 <HAL_GPIO_Init+0x202>
 80038de:	2306      	movs	r3, #6
 80038e0:	e00c      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038e2:	2307      	movs	r3, #7
 80038e4:	e00a      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038e6:	2305      	movs	r3, #5
 80038e8:	e008      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038ea:	2304      	movs	r3, #4
 80038ec:	e006      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038ee:	2303      	movs	r3, #3
 80038f0:	e004      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038f2:	2302      	movs	r3, #2
 80038f4:	e002      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038f6:	2301      	movs	r3, #1
 80038f8:	e000      	b.n	80038fc <HAL_GPIO_Init+0x21c>
 80038fa:	2300      	movs	r3, #0
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	f002 0203 	and.w	r2, r2, #3
 8003902:	0092      	lsls	r2, r2, #2
 8003904:	4093      	lsls	r3, r2
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800390c:	4935      	ldr	r1, [pc, #212]	; (80039e4 <HAL_GPIO_Init+0x304>)
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	089b      	lsrs	r3, r3, #2
 8003912:	3302      	adds	r3, #2
 8003914:	69ba      	ldr	r2, [r7, #24]
 8003916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800391a:	4b3a      	ldr	r3, [pc, #232]	; (8003a04 <HAL_GPIO_Init+0x324>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	43db      	mvns	r3, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4013      	ands	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800393e:	4a31      	ldr	r2, [pc, #196]	; (8003a04 <HAL_GPIO_Init+0x324>)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003944:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <HAL_GPIO_Init+0x324>)
 8003946:	68db      	ldr	r3, [r3, #12]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	43db      	mvns	r3, r3
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	4013      	ands	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d003      	beq.n	8003968 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003968:	4a26      	ldr	r2, [pc, #152]	; (8003a04 <HAL_GPIO_Init+0x324>)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800396e:	4b25      	ldr	r3, [pc, #148]	; (8003a04 <HAL_GPIO_Init+0x324>)
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	43db      	mvns	r3, r3
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4013      	ands	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4313      	orrs	r3, r2
 8003990:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003992:	4a1c      	ldr	r2, [pc, #112]	; (8003a04 <HAL_GPIO_Init+0x324>)
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003998:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <HAL_GPIO_Init+0x324>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	43db      	mvns	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	4013      	ands	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039bc:	4a11      	ldr	r2, [pc, #68]	; (8003a04 <HAL_GPIO_Init+0x324>)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	3301      	adds	r3, #1
 80039c6:	61fb      	str	r3, [r7, #28]
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	f67f ae96 	bls.w	80036fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039d0:	bf00      	nop
 80039d2:	bf00      	nop
 80039d4:	3724      	adds	r7, #36	; 0x24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
 80039de:	bf00      	nop
 80039e0:	40023800 	.word	0x40023800
 80039e4:	40013800 	.word	0x40013800
 80039e8:	40020000 	.word	0x40020000
 80039ec:	40020400 	.word	0x40020400
 80039f0:	40020800 	.word	0x40020800
 80039f4:	40020c00 	.word	0x40020c00
 80039f8:	40021000 	.word	0x40021000
 80039fc:	40021400 	.word	0x40021400
 8003a00:	40021800 	.word	0x40021800
 8003a04:	40013c00 	.word	0x40013c00

08003a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]
 8003a14:	4613      	mov	r3, r2
 8003a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a18:	787b      	ldrb	r3, [r7, #1]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a24:	e003      	b.n	8003a2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a26:	887b      	ldrh	r3, [r7, #2]
 8003a28:	041a      	lsls	r2, r3, #16
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	619a      	str	r2, [r3, #24]
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
	...

08003a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	4603      	mov	r3, r0
 8003a44:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a46:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a52:	4a05      	ldr	r2, [pc, #20]	; (8003a68 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a54:	88fb      	ldrh	r3, [r7, #6]
 8003a56:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fe fc7e 	bl	800235c <HAL_GPIO_EXTI_Callback>
  }
}
 8003a60:	bf00      	nop
 8003a62:	3708      	adds	r7, #8
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40013c00 	.word	0x40013c00

08003a6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b084      	sub	sp, #16
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e12b      	b.n	8003cd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fe fd98 	bl	80025c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2224      	movs	r2, #36	; 0x24
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003abe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ace:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ad0:	f000 fa52 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8003ad4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	4a81      	ldr	r2, [pc, #516]	; (8003ce0 <HAL_I2C_Init+0x274>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d807      	bhi.n	8003af0 <HAL_I2C_Init+0x84>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4a80      	ldr	r2, [pc, #512]	; (8003ce4 <HAL_I2C_Init+0x278>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	bf94      	ite	ls
 8003ae8:	2301      	movls	r3, #1
 8003aea:	2300      	movhi	r3, #0
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	e006      	b.n	8003afe <HAL_I2C_Init+0x92>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4a7d      	ldr	r2, [pc, #500]	; (8003ce8 <HAL_I2C_Init+0x27c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	bf94      	ite	ls
 8003af8:	2301      	movls	r3, #1
 8003afa:	2300      	movhi	r3, #0
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e0e7      	b.n	8003cd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4a78      	ldr	r2, [pc, #480]	; (8003cec <HAL_I2C_Init+0x280>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	0c9b      	lsrs	r3, r3, #18
 8003b10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68ba      	ldr	r2, [r7, #8]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4a6a      	ldr	r2, [pc, #424]	; (8003ce0 <HAL_I2C_Init+0x274>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d802      	bhi.n	8003b40 <HAL_I2C_Init+0xd4>
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	e009      	b.n	8003b54 <HAL_I2C_Init+0xe8>
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	4a69      	ldr	r2, [pc, #420]	; (8003cf0 <HAL_I2C_Init+0x284>)
 8003b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b50:	099b      	lsrs	r3, r3, #6
 8003b52:	3301      	adds	r3, #1
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6812      	ldr	r2, [r2, #0]
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	495c      	ldr	r1, [pc, #368]	; (8003ce0 <HAL_I2C_Init+0x274>)
 8003b70:	428b      	cmp	r3, r1
 8003b72:	d819      	bhi.n	8003ba8 <HAL_I2C_Init+0x13c>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	1e59      	subs	r1, r3, #1
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b82:	1c59      	adds	r1, r3, #1
 8003b84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003b88:	400b      	ands	r3, r1
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <HAL_I2C_Init+0x138>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1e59      	subs	r1, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	005b      	lsls	r3, r3, #1
 8003b98:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ba2:	e051      	b.n	8003c48 <HAL_I2C_Init+0x1dc>
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	e04f      	b.n	8003c48 <HAL_I2C_Init+0x1dc>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d111      	bne.n	8003bd4 <HAL_I2C_Init+0x168>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	1e58      	subs	r0, r3, #1
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6859      	ldr	r1, [r3, #4]
 8003bb8:	460b      	mov	r3, r1
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	440b      	add	r3, r1
 8003bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	e012      	b.n	8003bfa <HAL_I2C_Init+0x18e>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	1e58      	subs	r0, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6859      	ldr	r1, [r3, #4]
 8003bdc:	460b      	mov	r3, r1
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	0099      	lsls	r1, r3, #2
 8003be4:	440b      	add	r3, r1
 8003be6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bea:	3301      	adds	r3, #1
 8003bec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bf0c      	ite	eq
 8003bf4:	2301      	moveq	r3, #1
 8003bf6:	2300      	movne	r3, #0
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_I2C_Init+0x196>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e022      	b.n	8003c48 <HAL_I2C_Init+0x1dc>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10e      	bne.n	8003c28 <HAL_I2C_Init+0x1bc>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	1e58      	subs	r0, r3, #1
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6859      	ldr	r1, [r3, #4]
 8003c12:	460b      	mov	r3, r1
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	440b      	add	r3, r1
 8003c18:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c26:	e00f      	b.n	8003c48 <HAL_I2C_Init+0x1dc>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	1e58      	subs	r0, r3, #1
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6859      	ldr	r1, [r3, #4]
 8003c30:	460b      	mov	r3, r1
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	0099      	lsls	r1, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	6809      	ldr	r1, [r1, #0]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69da      	ldr	r2, [r3, #28]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003c76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	6911      	ldr	r1, [r2, #16]
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	68d2      	ldr	r2, [r2, #12]
 8003c82:	4311      	orrs	r1, r2
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	6812      	ldr	r2, [r2, #0]
 8003c88:	430b      	orrs	r3, r1
 8003c8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	431a      	orrs	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	000186a0 	.word	0x000186a0
 8003ce4:	001e847f 	.word	0x001e847f
 8003ce8:	003d08ff 	.word	0x003d08ff
 8003cec:	431bde83 	.word	0x431bde83
 8003cf0:	10624dd3 	.word	0x10624dd3

08003cf4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	4b20      	ldr	r3, [pc, #128]	; (8003d84 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4a1f      	ldr	r2, [pc, #124]	; (8003d84 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0e:	4b1d      	ldr	r3, [pc, #116]	; (8003d84 <HAL_PWREx_EnableOverDrive+0x90>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d1a:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_PWREx_EnableOverDrive+0x94>)
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d20:	f7ff f92a 	bl	8002f78 <HAL_GetTick>
 8003d24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d26:	e009      	b.n	8003d3c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d28:	f7ff f926 	bl	8002f78 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d36:	d901      	bls.n	8003d3c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e01f      	b.n	8003d7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d3c:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <HAL_PWREx_EnableOverDrive+0x98>)
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d48:	d1ee      	bne.n	8003d28 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d4a:	4b11      	ldr	r3, [pc, #68]	; (8003d90 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d50:	f7ff f912 	bl	8002f78 <HAL_GetTick>
 8003d54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d56:	e009      	b.n	8003d6c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d58:	f7ff f90e 	bl	8002f78 <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d66:	d901      	bls.n	8003d6c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e007      	b.n	8003d7c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d6c:	4b07      	ldr	r3, [pc, #28]	; (8003d8c <HAL_PWREx_EnableOverDrive+0x98>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d78:	d1ee      	bne.n	8003d58 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	40023800 	.word	0x40023800
 8003d88:	420e0040 	.word	0x420e0040
 8003d8c:	40007000 	.word	0x40007000
 8003d90:	420e0044 	.word	0x420e0044

08003d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b084      	sub	sp, #16
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0cc      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003da8:	4b68      	ldr	r3, [pc, #416]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 030f 	and.w	r3, r3, #15
 8003db0:	683a      	ldr	r2, [r7, #0]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d90c      	bls.n	8003dd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db6:	4b65      	ldr	r3, [pc, #404]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dbe:	4b63      	ldr	r3, [pc, #396]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 030f 	and.w	r3, r3, #15
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d001      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e0b8      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d020      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003de8:	4b59      	ldr	r3, [pc, #356]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	4a58      	ldr	r2, [pc, #352]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003dee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003df2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0308 	and.w	r3, r3, #8
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e00:	4b53      	ldr	r3, [pc, #332]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4a52      	ldr	r2, [pc, #328]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003e0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e0c:	4b50      	ldr	r3, [pc, #320]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	494d      	ldr	r1, [pc, #308]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d044      	beq.n	8003eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d107      	bne.n	8003e42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e32:	4b47      	ldr	r3, [pc, #284]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d119      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e07f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d003      	beq.n	8003e52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e52:	4b3f      	ldr	r3, [pc, #252]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d109      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e06f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e62:	4b3b      	ldr	r3, [pc, #236]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e067      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e72:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	f023 0203 	bic.w	r2, r3, #3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	4934      	ldr	r1, [pc, #208]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e84:	f7ff f878 	bl	8002f78 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8c:	f7ff f874 	bl	8002f78 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e04f      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea2:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	f003 020c 	and.w	r2, r3, #12
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d1eb      	bne.n	8003e8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003eb4:	4b25      	ldr	r3, [pc, #148]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 030f 	and.w	r3, r3, #15
 8003ebc:	683a      	ldr	r2, [r7, #0]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d20c      	bcs.n	8003edc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ec2:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eca:	4b20      	ldr	r3, [pc, #128]	; (8003f4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d001      	beq.n	8003edc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e032      	b.n	8003f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ee8:	4b19      	ldr	r3, [pc, #100]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	4916      	ldr	r1, [pc, #88]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d009      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f06:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	490e      	ldr	r1, [pc, #56]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003f1a:	f000 f855 	bl	8003fc8 <HAL_RCC_GetSysClockFreq>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	4b0b      	ldr	r3, [pc, #44]	; (8003f50 <HAL_RCC_ClockConfig+0x1bc>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	f003 030f 	and.w	r3, r3, #15
 8003f2a:	490a      	ldr	r1, [pc, #40]	; (8003f54 <HAL_RCC_ClockConfig+0x1c0>)
 8003f2c:	5ccb      	ldrb	r3, [r1, r3]
 8003f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f32:	4a09      	ldr	r2, [pc, #36]	; (8003f58 <HAL_RCC_ClockConfig+0x1c4>)
 8003f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <HAL_RCC_ClockConfig+0x1c8>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fe ffd8 	bl	8002ef0 <HAL_InitTick>

  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40023c00 	.word	0x40023c00
 8003f50:	40023800 	.word	0x40023800
 8003f54:	0800b548 	.word	0x0800b548
 8003f58:	20000004 	.word	0x20000004
 8003f5c:	20000008 	.word	0x20000008

08003f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f64:	4b03      	ldr	r3, [pc, #12]	; (8003f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f66:	681b      	ldr	r3, [r3, #0]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	20000004 	.word	0x20000004

08003f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f7c:	f7ff fff0 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003f80:	4602      	mov	r2, r0
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	0a9b      	lsrs	r3, r3, #10
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	4903      	ldr	r1, [pc, #12]	; (8003f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f8e:	5ccb      	ldrb	r3, [r1, r3]
 8003f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	0800b558 	.word	0x0800b558

08003fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fa4:	f7ff ffdc 	bl	8003f60 <HAL_RCC_GetHCLKFreq>
 8003fa8:	4602      	mov	r2, r0
 8003faa:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	0b5b      	lsrs	r3, r3, #13
 8003fb0:	f003 0307 	and.w	r3, r3, #7
 8003fb4:	4903      	ldr	r1, [pc, #12]	; (8003fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fb6:	5ccb      	ldrb	r3, [r1, r3]
 8003fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	0800b558 	.word	0x0800b558

08003fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fcc:	b0ae      	sub	sp, #184	; 0xb8
 8003fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fee:	4bcb      	ldr	r3, [pc, #812]	; (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b0c      	cmp	r3, #12
 8003ff8:	f200 8206 	bhi.w	8004408 <HAL_RCC_GetSysClockFreq+0x440>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004039 	.word	0x08004039
 8004008:	08004409 	.word	0x08004409
 800400c:	08004409 	.word	0x08004409
 8004010:	08004409 	.word	0x08004409
 8004014:	08004041 	.word	0x08004041
 8004018:	08004409 	.word	0x08004409
 800401c:	08004409 	.word	0x08004409
 8004020:	08004409 	.word	0x08004409
 8004024:	08004049 	.word	0x08004049
 8004028:	08004409 	.word	0x08004409
 800402c:	08004409 	.word	0x08004409
 8004030:	08004409 	.word	0x08004409
 8004034:	08004239 	.word	0x08004239
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004038:	4bb9      	ldr	r3, [pc, #740]	; (8004320 <HAL_RCC_GetSysClockFreq+0x358>)
 800403a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800403e:	e1e7      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004040:	4bb8      	ldr	r3, [pc, #736]	; (8004324 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004042:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004046:	e1e3      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004048:	4bb4      	ldr	r3, [pc, #720]	; (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004054:	4bb1      	ldr	r3, [pc, #708]	; (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405c:	2b00      	cmp	r3, #0
 800405e:	d071      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004060:	4bae      	ldr	r3, [pc, #696]	; (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	099b      	lsrs	r3, r3, #6
 8004066:	2200      	movs	r2, #0
 8004068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800406c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8004070:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004078:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800407c:	2300      	movs	r3, #0
 800407e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004082:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004086:	4622      	mov	r2, r4
 8004088:	462b      	mov	r3, r5
 800408a:	f04f 0000 	mov.w	r0, #0
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	0159      	lsls	r1, r3, #5
 8004094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004098:	0150      	lsls	r0, r2, #5
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4621      	mov	r1, r4
 80040a0:	1a51      	subs	r1, r2, r1
 80040a2:	6439      	str	r1, [r7, #64]	; 0x40
 80040a4:	4629      	mov	r1, r5
 80040a6:	eb63 0301 	sbc.w	r3, r3, r1
 80040aa:	647b      	str	r3, [r7, #68]	; 0x44
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80040b8:	4649      	mov	r1, r9
 80040ba:	018b      	lsls	r3, r1, #6
 80040bc:	4641      	mov	r1, r8
 80040be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040c2:	4641      	mov	r1, r8
 80040c4:	018a      	lsls	r2, r1, #6
 80040c6:	4641      	mov	r1, r8
 80040c8:	1a51      	subs	r1, r2, r1
 80040ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80040cc:	4649      	mov	r1, r9
 80040ce:	eb63 0301 	sbc.w	r3, r3, r1
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d4:	f04f 0200 	mov.w	r2, #0
 80040d8:	f04f 0300 	mov.w	r3, #0
 80040dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80040e0:	4649      	mov	r1, r9
 80040e2:	00cb      	lsls	r3, r1, #3
 80040e4:	4641      	mov	r1, r8
 80040e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ea:	4641      	mov	r1, r8
 80040ec:	00ca      	lsls	r2, r1, #3
 80040ee:	4610      	mov	r0, r2
 80040f0:	4619      	mov	r1, r3
 80040f2:	4603      	mov	r3, r0
 80040f4:	4622      	mov	r2, r4
 80040f6:	189b      	adds	r3, r3, r2
 80040f8:	633b      	str	r3, [r7, #48]	; 0x30
 80040fa:	462b      	mov	r3, r5
 80040fc:	460a      	mov	r2, r1
 80040fe:	eb42 0303 	adc.w	r3, r2, r3
 8004102:	637b      	str	r3, [r7, #52]	; 0x34
 8004104:	f04f 0200 	mov.w	r2, #0
 8004108:	f04f 0300 	mov.w	r3, #0
 800410c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004110:	4629      	mov	r1, r5
 8004112:	024b      	lsls	r3, r1, #9
 8004114:	4621      	mov	r1, r4
 8004116:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800411a:	4621      	mov	r1, r4
 800411c:	024a      	lsls	r2, r1, #9
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004126:	2200      	movs	r2, #0
 8004128:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800412c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004130:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004134:	f7fc fda8 	bl	8000c88 <__aeabi_uldivmod>
 8004138:	4602      	mov	r2, r0
 800413a:	460b      	mov	r3, r1
 800413c:	4613      	mov	r3, r2
 800413e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004142:	e067      	b.n	8004214 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004144:	4b75      	ldr	r3, [pc, #468]	; (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	099b      	lsrs	r3, r3, #6
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004150:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004154:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800415c:	67bb      	str	r3, [r7, #120]	; 0x78
 800415e:	2300      	movs	r3, #0
 8004160:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004162:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8004166:	4622      	mov	r2, r4
 8004168:	462b      	mov	r3, r5
 800416a:	f04f 0000 	mov.w	r0, #0
 800416e:	f04f 0100 	mov.w	r1, #0
 8004172:	0159      	lsls	r1, r3, #5
 8004174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004178:	0150      	lsls	r0, r2, #5
 800417a:	4602      	mov	r2, r0
 800417c:	460b      	mov	r3, r1
 800417e:	4621      	mov	r1, r4
 8004180:	1a51      	subs	r1, r2, r1
 8004182:	62b9      	str	r1, [r7, #40]	; 0x28
 8004184:	4629      	mov	r1, r5
 8004186:	eb63 0301 	sbc.w	r3, r3, r1
 800418a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8004198:	4649      	mov	r1, r9
 800419a:	018b      	lsls	r3, r1, #6
 800419c:	4641      	mov	r1, r8
 800419e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041a2:	4641      	mov	r1, r8
 80041a4:	018a      	lsls	r2, r1, #6
 80041a6:	4641      	mov	r1, r8
 80041a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80041ac:	4649      	mov	r1, r9
 80041ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041c6:	4692      	mov	sl, r2
 80041c8:	469b      	mov	fp, r3
 80041ca:	4623      	mov	r3, r4
 80041cc:	eb1a 0303 	adds.w	r3, sl, r3
 80041d0:	623b      	str	r3, [r7, #32]
 80041d2:	462b      	mov	r3, r5
 80041d4:	eb4b 0303 	adc.w	r3, fp, r3
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
 80041da:	f04f 0200 	mov.w	r2, #0
 80041de:	f04f 0300 	mov.w	r3, #0
 80041e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80041e6:	4629      	mov	r1, r5
 80041e8:	028b      	lsls	r3, r1, #10
 80041ea:	4621      	mov	r1, r4
 80041ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041f0:	4621      	mov	r1, r4
 80041f2:	028a      	lsls	r2, r1, #10
 80041f4:	4610      	mov	r0, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041fc:	2200      	movs	r2, #0
 80041fe:	673b      	str	r3, [r7, #112]	; 0x70
 8004200:	677a      	str	r2, [r7, #116]	; 0x74
 8004202:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004206:	f7fc fd3f 	bl	8000c88 <__aeabi_uldivmod>
 800420a:	4602      	mov	r2, r0
 800420c:	460b      	mov	r3, r1
 800420e:	4613      	mov	r3, r2
 8004210:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004214:	4b41      	ldr	r3, [pc, #260]	; (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	0c1b      	lsrs	r3, r3, #16
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	3301      	adds	r3, #1
 8004220:	005b      	lsls	r3, r3, #1
 8004222:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800422a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800422e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004232:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004236:	e0eb      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004238:	4b38      	ldr	r3, [pc, #224]	; (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004240:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004244:	4b35      	ldr	r3, [pc, #212]	; (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d06b      	beq.n	8004328 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004250:	4b32      	ldr	r3, [pc, #200]	; (800431c <HAL_RCC_GetSysClockFreq+0x354>)
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	099b      	lsrs	r3, r3, #6
 8004256:	2200      	movs	r2, #0
 8004258:	66bb      	str	r3, [r7, #104]	; 0x68
 800425a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800425c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800425e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004262:	663b      	str	r3, [r7, #96]	; 0x60
 8004264:	2300      	movs	r3, #0
 8004266:	667b      	str	r3, [r7, #100]	; 0x64
 8004268:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800426c:	4622      	mov	r2, r4
 800426e:	462b      	mov	r3, r5
 8004270:	f04f 0000 	mov.w	r0, #0
 8004274:	f04f 0100 	mov.w	r1, #0
 8004278:	0159      	lsls	r1, r3, #5
 800427a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800427e:	0150      	lsls	r0, r2, #5
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4621      	mov	r1, r4
 8004286:	1a51      	subs	r1, r2, r1
 8004288:	61b9      	str	r1, [r7, #24]
 800428a:	4629      	mov	r1, r5
 800428c:	eb63 0301 	sbc.w	r3, r3, r1
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800429e:	4659      	mov	r1, fp
 80042a0:	018b      	lsls	r3, r1, #6
 80042a2:	4651      	mov	r1, sl
 80042a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042a8:	4651      	mov	r1, sl
 80042aa:	018a      	lsls	r2, r1, #6
 80042ac:	4651      	mov	r1, sl
 80042ae:	ebb2 0801 	subs.w	r8, r2, r1
 80042b2:	4659      	mov	r1, fp
 80042b4:	eb63 0901 	sbc.w	r9, r3, r1
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042cc:	4690      	mov	r8, r2
 80042ce:	4699      	mov	r9, r3
 80042d0:	4623      	mov	r3, r4
 80042d2:	eb18 0303 	adds.w	r3, r8, r3
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	462b      	mov	r3, r5
 80042da:	eb49 0303 	adc.w	r3, r9, r3
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	f04f 0200 	mov.w	r2, #0
 80042e4:	f04f 0300 	mov.w	r3, #0
 80042e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80042ec:	4629      	mov	r1, r5
 80042ee:	024b      	lsls	r3, r1, #9
 80042f0:	4621      	mov	r1, r4
 80042f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042f6:	4621      	mov	r1, r4
 80042f8:	024a      	lsls	r2, r1, #9
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004302:	2200      	movs	r2, #0
 8004304:	65bb      	str	r3, [r7, #88]	; 0x58
 8004306:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004308:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800430c:	f7fc fcbc 	bl	8000c88 <__aeabi_uldivmod>
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4613      	mov	r3, r2
 8004316:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800431a:	e065      	b.n	80043e8 <HAL_RCC_GetSysClockFreq+0x420>
 800431c:	40023800 	.word	0x40023800
 8004320:	00f42400 	.word	0x00f42400
 8004324:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004328:	4b3d      	ldr	r3, [pc, #244]	; (8004420 <HAL_RCC_GetSysClockFreq+0x458>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	099b      	lsrs	r3, r3, #6
 800432e:	2200      	movs	r2, #0
 8004330:	4618      	mov	r0, r3
 8004332:	4611      	mov	r1, r2
 8004334:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004338:	653b      	str	r3, [r7, #80]	; 0x50
 800433a:	2300      	movs	r3, #0
 800433c:	657b      	str	r3, [r7, #84]	; 0x54
 800433e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004342:	4642      	mov	r2, r8
 8004344:	464b      	mov	r3, r9
 8004346:	f04f 0000 	mov.w	r0, #0
 800434a:	f04f 0100 	mov.w	r1, #0
 800434e:	0159      	lsls	r1, r3, #5
 8004350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004354:	0150      	lsls	r0, r2, #5
 8004356:	4602      	mov	r2, r0
 8004358:	460b      	mov	r3, r1
 800435a:	4641      	mov	r1, r8
 800435c:	1a51      	subs	r1, r2, r1
 800435e:	60b9      	str	r1, [r7, #8]
 8004360:	4649      	mov	r1, r9
 8004362:	eb63 0301 	sbc.w	r3, r3, r1
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	f04f 0200 	mov.w	r2, #0
 800436c:	f04f 0300 	mov.w	r3, #0
 8004370:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004374:	4659      	mov	r1, fp
 8004376:	018b      	lsls	r3, r1, #6
 8004378:	4651      	mov	r1, sl
 800437a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800437e:	4651      	mov	r1, sl
 8004380:	018a      	lsls	r2, r1, #6
 8004382:	4651      	mov	r1, sl
 8004384:	1a54      	subs	r4, r2, r1
 8004386:	4659      	mov	r1, fp
 8004388:	eb63 0501 	sbc.w	r5, r3, r1
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	00eb      	lsls	r3, r5, #3
 8004396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800439a:	00e2      	lsls	r2, r4, #3
 800439c:	4614      	mov	r4, r2
 800439e:	461d      	mov	r5, r3
 80043a0:	4643      	mov	r3, r8
 80043a2:	18e3      	adds	r3, r4, r3
 80043a4:	603b      	str	r3, [r7, #0]
 80043a6:	464b      	mov	r3, r9
 80043a8:	eb45 0303 	adc.w	r3, r5, r3
 80043ac:	607b      	str	r3, [r7, #4]
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043ba:	4629      	mov	r1, r5
 80043bc:	028b      	lsls	r3, r1, #10
 80043be:	4621      	mov	r1, r4
 80043c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043c4:	4621      	mov	r1, r4
 80043c6:	028a      	lsls	r2, r1, #10
 80043c8:	4610      	mov	r0, r2
 80043ca:	4619      	mov	r1, r3
 80043cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80043d0:	2200      	movs	r2, #0
 80043d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043d4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80043d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80043da:	f7fc fc55 	bl	8000c88 <__aeabi_uldivmod>
 80043de:	4602      	mov	r2, r0
 80043e0:	460b      	mov	r3, r1
 80043e2:	4613      	mov	r3, r2
 80043e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80043e8:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <HAL_RCC_GetSysClockFreq+0x458>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	0f1b      	lsrs	r3, r3, #28
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80043f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80043fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004406:	e003      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004408:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_RCC_GetSysClockFreq+0x45c>)
 800440a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800440e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004410:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004414:	4618      	mov	r0, r3
 8004416:	37b8      	adds	r7, #184	; 0xb8
 8004418:	46bd      	mov	sp, r7
 800441a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800
 8004424:	00f42400 	.word	0x00f42400

08004428 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d101      	bne.n	800443a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e28d      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 8083 	beq.w	800454e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004448:	4b94      	ldr	r3, [pc, #592]	; (800469c <HAL_RCC_OscConfig+0x274>)
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	f003 030c 	and.w	r3, r3, #12
 8004450:	2b04      	cmp	r3, #4
 8004452:	d019      	beq.n	8004488 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004454:	4b91      	ldr	r3, [pc, #580]	; (800469c <HAL_RCC_OscConfig+0x274>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800445c:	2b08      	cmp	r3, #8
 800445e:	d106      	bne.n	800446e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004460:	4b8e      	ldr	r3, [pc, #568]	; (800469c <HAL_RCC_OscConfig+0x274>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004468:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800446c:	d00c      	beq.n	8004488 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800446e:	4b8b      	ldr	r3, [pc, #556]	; (800469c <HAL_RCC_OscConfig+0x274>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004476:	2b0c      	cmp	r3, #12
 8004478:	d112      	bne.n	80044a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800447a:	4b88      	ldr	r3, [pc, #544]	; (800469c <HAL_RCC_OscConfig+0x274>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004482:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004486:	d10b      	bne.n	80044a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004488:	4b84      	ldr	r3, [pc, #528]	; (800469c <HAL_RCC_OscConfig+0x274>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d05b      	beq.n	800454c <HAL_RCC_OscConfig+0x124>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d157      	bne.n	800454c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e25a      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a8:	d106      	bne.n	80044b8 <HAL_RCC_OscConfig+0x90>
 80044aa:	4b7c      	ldr	r3, [pc, #496]	; (800469c <HAL_RCC_OscConfig+0x274>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a7b      	ldr	r2, [pc, #492]	; (800469c <HAL_RCC_OscConfig+0x274>)
 80044b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	e01d      	b.n	80044f4 <HAL_RCC_OscConfig+0xcc>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c0:	d10c      	bne.n	80044dc <HAL_RCC_OscConfig+0xb4>
 80044c2:	4b76      	ldr	r3, [pc, #472]	; (800469c <HAL_RCC_OscConfig+0x274>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a75      	ldr	r2, [pc, #468]	; (800469c <HAL_RCC_OscConfig+0x274>)
 80044c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044cc:	6013      	str	r3, [r2, #0]
 80044ce:	4b73      	ldr	r3, [pc, #460]	; (800469c <HAL_RCC_OscConfig+0x274>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a72      	ldr	r2, [pc, #456]	; (800469c <HAL_RCC_OscConfig+0x274>)
 80044d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044d8:	6013      	str	r3, [r2, #0]
 80044da:	e00b      	b.n	80044f4 <HAL_RCC_OscConfig+0xcc>
 80044dc:	4b6f      	ldr	r3, [pc, #444]	; (800469c <HAL_RCC_OscConfig+0x274>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a6e      	ldr	r2, [pc, #440]	; (800469c <HAL_RCC_OscConfig+0x274>)
 80044e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044e6:	6013      	str	r3, [r2, #0]
 80044e8:	4b6c      	ldr	r3, [pc, #432]	; (800469c <HAL_RCC_OscConfig+0x274>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a6b      	ldr	r2, [pc, #428]	; (800469c <HAL_RCC_OscConfig+0x274>)
 80044ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d013      	beq.n	8004524 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044fc:	f7fe fd3c 	bl	8002f78 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004502:	e008      	b.n	8004516 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004504:	f7fe fd38 	bl	8002f78 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	2b64      	cmp	r3, #100	; 0x64
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e21f      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004516:	4b61      	ldr	r3, [pc, #388]	; (800469c <HAL_RCC_OscConfig+0x274>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d0f0      	beq.n	8004504 <HAL_RCC_OscConfig+0xdc>
 8004522:	e014      	b.n	800454e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7fe fd28 	bl	8002f78 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800452c:	f7fe fd24 	bl	8002f78 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	; 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e20b      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800453e:	4b57      	ldr	r3, [pc, #348]	; (800469c <HAL_RCC_OscConfig+0x274>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d1f0      	bne.n	800452c <HAL_RCC_OscConfig+0x104>
 800454a:	e000      	b.n	800454e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800454c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d06f      	beq.n	800463a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800455a:	4b50      	ldr	r3, [pc, #320]	; (800469c <HAL_RCC_OscConfig+0x274>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 030c 	and.w	r3, r3, #12
 8004562:	2b00      	cmp	r3, #0
 8004564:	d017      	beq.n	8004596 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004566:	4b4d      	ldr	r3, [pc, #308]	; (800469c <HAL_RCC_OscConfig+0x274>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800456e:	2b08      	cmp	r3, #8
 8004570:	d105      	bne.n	800457e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004572:	4b4a      	ldr	r3, [pc, #296]	; (800469c <HAL_RCC_OscConfig+0x274>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00b      	beq.n	8004596 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800457e:	4b47      	ldr	r3, [pc, #284]	; (800469c <HAL_RCC_OscConfig+0x274>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004586:	2b0c      	cmp	r3, #12
 8004588:	d11c      	bne.n	80045c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800458a:	4b44      	ldr	r3, [pc, #272]	; (800469c <HAL_RCC_OscConfig+0x274>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004592:	2b00      	cmp	r3, #0
 8004594:	d116      	bne.n	80045c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004596:	4b41      	ldr	r3, [pc, #260]	; (800469c <HAL_RCC_OscConfig+0x274>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <HAL_RCC_OscConfig+0x186>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d001      	beq.n	80045ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e1d3      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ae:	4b3b      	ldr	r3, [pc, #236]	; (800469c <HAL_RCC_OscConfig+0x274>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4937      	ldr	r1, [pc, #220]	; (800469c <HAL_RCC_OscConfig+0x274>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045c2:	e03a      	b.n	800463a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d020      	beq.n	800460e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045cc:	4b34      	ldr	r3, [pc, #208]	; (80046a0 <HAL_RCC_OscConfig+0x278>)
 80045ce:	2201      	movs	r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d2:	f7fe fcd1 	bl	8002f78 <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045da:	f7fe fccd 	bl	8002f78 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e1b4      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ec:	4b2b      	ldr	r3, [pc, #172]	; (800469c <HAL_RCC_OscConfig+0x274>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f8:	4b28      	ldr	r3, [pc, #160]	; (800469c <HAL_RCC_OscConfig+0x274>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4925      	ldr	r1, [pc, #148]	; (800469c <HAL_RCC_OscConfig+0x274>)
 8004608:	4313      	orrs	r3, r2
 800460a:	600b      	str	r3, [r1, #0]
 800460c:	e015      	b.n	800463a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800460e:	4b24      	ldr	r3, [pc, #144]	; (80046a0 <HAL_RCC_OscConfig+0x278>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004614:	f7fe fcb0 	bl	8002f78 <HAL_GetTick>
 8004618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461a:	e008      	b.n	800462e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800461c:	f7fe fcac 	bl	8002f78 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e193      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800462e:	4b1b      	ldr	r3, [pc, #108]	; (800469c <HAL_RCC_OscConfig+0x274>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1f0      	bne.n	800461c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d036      	beq.n	80046b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d016      	beq.n	800467c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800464e:	4b15      	ldr	r3, [pc, #84]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 8004650:	2201      	movs	r2, #1
 8004652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004654:	f7fe fc90 	bl	8002f78 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800465c:	f7fe fc8c 	bl	8002f78 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b02      	cmp	r3, #2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e173      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800466e:	4b0b      	ldr	r3, [pc, #44]	; (800469c <HAL_RCC_OscConfig+0x274>)
 8004670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0f0      	beq.n	800465c <HAL_RCC_OscConfig+0x234>
 800467a:	e01b      	b.n	80046b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800467c:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <HAL_RCC_OscConfig+0x27c>)
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004682:	f7fe fc79 	bl	8002f78 <HAL_GetTick>
 8004686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004688:	e00e      	b.n	80046a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800468a:	f7fe fc75 	bl	8002f78 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d907      	bls.n	80046a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e15c      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
 800469c:	40023800 	.word	0x40023800
 80046a0:	42470000 	.word	0x42470000
 80046a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046a8:	4b8a      	ldr	r3, [pc, #552]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80046aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ac:	f003 0302 	and.w	r3, r3, #2
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1ea      	bne.n	800468a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 8097 	beq.w	80047f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046c2:	2300      	movs	r3, #0
 80046c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046c6:	4b83      	ldr	r3, [pc, #524]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10f      	bne.n	80046f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046d2:	2300      	movs	r3, #0
 80046d4:	60bb      	str	r3, [r7, #8]
 80046d6:	4b7f      	ldr	r3, [pc, #508]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	4a7e      	ldr	r2, [pc, #504]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80046dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e0:	6413      	str	r3, [r2, #64]	; 0x40
 80046e2:	4b7c      	ldr	r3, [pc, #496]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ea:	60bb      	str	r3, [r7, #8]
 80046ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046ee:	2301      	movs	r3, #1
 80046f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046f2:	4b79      	ldr	r3, [pc, #484]	; (80048d8 <HAL_RCC_OscConfig+0x4b0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d118      	bne.n	8004730 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046fe:	4b76      	ldr	r3, [pc, #472]	; (80048d8 <HAL_RCC_OscConfig+0x4b0>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a75      	ldr	r2, [pc, #468]	; (80048d8 <HAL_RCC_OscConfig+0x4b0>)
 8004704:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800470a:	f7fe fc35 	bl	8002f78 <HAL_GetTick>
 800470e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004710:	e008      	b.n	8004724 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004712:	f7fe fc31 	bl	8002f78 <HAL_GetTick>
 8004716:	4602      	mov	r2, r0
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	1ad3      	subs	r3, r2, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d901      	bls.n	8004724 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e118      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004724:	4b6c      	ldr	r3, [pc, #432]	; (80048d8 <HAL_RCC_OscConfig+0x4b0>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0f0      	beq.n	8004712 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d106      	bne.n	8004746 <HAL_RCC_OscConfig+0x31e>
 8004738:	4b66      	ldr	r3, [pc, #408]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 800473a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800473c:	4a65      	ldr	r2, [pc, #404]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 800473e:	f043 0301 	orr.w	r3, r3, #1
 8004742:	6713      	str	r3, [r2, #112]	; 0x70
 8004744:	e01c      	b.n	8004780 <HAL_RCC_OscConfig+0x358>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b05      	cmp	r3, #5
 800474c:	d10c      	bne.n	8004768 <HAL_RCC_OscConfig+0x340>
 800474e:	4b61      	ldr	r3, [pc, #388]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 8004750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004752:	4a60      	ldr	r2, [pc, #384]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 8004754:	f043 0304 	orr.w	r3, r3, #4
 8004758:	6713      	str	r3, [r2, #112]	; 0x70
 800475a:	4b5e      	ldr	r3, [pc, #376]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 800475c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475e:	4a5d      	ldr	r2, [pc, #372]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 8004760:	f043 0301 	orr.w	r3, r3, #1
 8004764:	6713      	str	r3, [r2, #112]	; 0x70
 8004766:	e00b      	b.n	8004780 <HAL_RCC_OscConfig+0x358>
 8004768:	4b5a      	ldr	r3, [pc, #360]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 800476a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800476c:	4a59      	ldr	r2, [pc, #356]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 800476e:	f023 0301 	bic.w	r3, r3, #1
 8004772:	6713      	str	r3, [r2, #112]	; 0x70
 8004774:	4b57      	ldr	r3, [pc, #348]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 8004776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004778:	4a56      	ldr	r2, [pc, #344]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 800477a:	f023 0304 	bic.w	r3, r3, #4
 800477e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d015      	beq.n	80047b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004788:	f7fe fbf6 	bl	8002f78 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800478e:	e00a      	b.n	80047a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004790:	f7fe fbf2 	bl	8002f78 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	f241 3288 	movw	r2, #5000	; 0x1388
 800479e:	4293      	cmp	r3, r2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e0d7      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047a6:	4b4b      	ldr	r3, [pc, #300]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0ee      	beq.n	8004790 <HAL_RCC_OscConfig+0x368>
 80047b2:	e014      	b.n	80047de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b4:	f7fe fbe0 	bl	8002f78 <HAL_GetTick>
 80047b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047ba:	e00a      	b.n	80047d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047bc:	f7fe fbdc 	bl	8002f78 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e0c1      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047d2:	4b40      	ldr	r3, [pc, #256]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80047d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1ee      	bne.n	80047bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047de:	7dfb      	ldrb	r3, [r7, #23]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d105      	bne.n	80047f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047e4:	4b3b      	ldr	r3, [pc, #236]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	4a3a      	ldr	r2, [pc, #232]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80047ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 80ad 	beq.w	8004954 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047fa:	4b36      	ldr	r3, [pc, #216]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	f003 030c 	and.w	r3, r3, #12
 8004802:	2b08      	cmp	r3, #8
 8004804:	d060      	beq.n	80048c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d145      	bne.n	800489a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800480e:	4b33      	ldr	r3, [pc, #204]	; (80048dc <HAL_RCC_OscConfig+0x4b4>)
 8004810:	2200      	movs	r2, #0
 8004812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004814:	f7fe fbb0 	bl	8002f78 <HAL_GetTick>
 8004818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481a:	e008      	b.n	800482e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800481c:	f7fe fbac 	bl	8002f78 <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	2b02      	cmp	r3, #2
 8004828:	d901      	bls.n	800482e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e093      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800482e:	4b29      	ldr	r3, [pc, #164]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f0      	bne.n	800481c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	69da      	ldr	r2, [r3, #28]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	019b      	lsls	r3, r3, #6
 800484a:	431a      	orrs	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	3b01      	subs	r3, #1
 8004854:	041b      	lsls	r3, r3, #16
 8004856:	431a      	orrs	r2, r3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800485c:	061b      	lsls	r3, r3, #24
 800485e:	431a      	orrs	r2, r3
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	071b      	lsls	r3, r3, #28
 8004866:	491b      	ldr	r1, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 8004868:	4313      	orrs	r3, r2
 800486a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800486c:	4b1b      	ldr	r3, [pc, #108]	; (80048dc <HAL_RCC_OscConfig+0x4b4>)
 800486e:	2201      	movs	r2, #1
 8004870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004872:	f7fe fb81 	bl	8002f78 <HAL_GetTick>
 8004876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004878:	e008      	b.n	800488c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800487a:	f7fe fb7d 	bl	8002f78 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	2b02      	cmp	r3, #2
 8004886:	d901      	bls.n	800488c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004888:	2303      	movs	r3, #3
 800488a:	e064      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800488c:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0f0      	beq.n	800487a <HAL_RCC_OscConfig+0x452>
 8004898:	e05c      	b.n	8004954 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489a:	4b10      	ldr	r3, [pc, #64]	; (80048dc <HAL_RCC_OscConfig+0x4b4>)
 800489c:	2200      	movs	r2, #0
 800489e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048a0:	f7fe fb6a 	bl	8002f78 <HAL_GetTick>
 80048a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a6:	e008      	b.n	80048ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a8:	f7fe fb66 	bl	8002f78 <HAL_GetTick>
 80048ac:	4602      	mov	r2, r0
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d901      	bls.n	80048ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80048b6:	2303      	movs	r3, #3
 80048b8:	e04d      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ba:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <HAL_RCC_OscConfig+0x4ac>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1f0      	bne.n	80048a8 <HAL_RCC_OscConfig+0x480>
 80048c6:	e045      	b.n	8004954 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d107      	bne.n	80048e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e040      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
 80048d4:	40023800 	.word	0x40023800
 80048d8:	40007000 	.word	0x40007000
 80048dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048e0:	4b1f      	ldr	r3, [pc, #124]	; (8004960 <HAL_RCC_OscConfig+0x538>)
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d030      	beq.n	8004950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d129      	bne.n	8004950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004906:	429a      	cmp	r2, r3
 8004908:	d122      	bne.n	8004950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800490a:	68fa      	ldr	r2, [r7, #12]
 800490c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004910:	4013      	ands	r3, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004918:	4293      	cmp	r3, r2
 800491a:	d119      	bne.n	8004950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	085b      	lsrs	r3, r3, #1
 8004928:	3b01      	subs	r3, #1
 800492a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800492c:	429a      	cmp	r2, r3
 800492e:	d10f      	bne.n	8004950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d107      	bne.n	8004950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800494a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800494c:	429a      	cmp	r2, r3
 800494e:	d001      	beq.n	8004954 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800

08004964 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	e07b      	b.n	8004a6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	2b00      	cmp	r3, #0
 800497c:	d108      	bne.n	8004990 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004986:	d009      	beq.n	800499c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	61da      	str	r2, [r3, #28]
 800498e:	e005      	b.n	800499c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fd fedc 	bl	8002774 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0302 	and.w	r3, r3, #2
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a0c:	431a      	orrs	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69db      	ldr	r3, [r3, #28]
 8004a12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a16:	431a      	orrs	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a20:	ea42 0103 	orr.w	r1, r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	0c1b      	lsrs	r3, r3, #16
 8004a3a:	f003 0104 	and.w	r1, r3, #4
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a42:	f003 0210 	and.w	r2, r3, #16
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	430a      	orrs	r2, r1
 8004a4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	69da      	ldr	r2, [r3, #28]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b088      	sub	sp, #32
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	60f8      	str	r0, [r7, #12]
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	603b      	str	r3, [r7, #0]
 8004a82:	4613      	mov	r3, r2
 8004a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d101      	bne.n	8004a98 <HAL_SPI_Transmit+0x22>
 8004a94:	2302      	movs	r3, #2
 8004a96:	e126      	b.n	8004ce6 <HAL_SPI_Transmit+0x270>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aa0:	f7fe fa6a 	bl	8002f78 <HAL_GetTick>
 8004aa4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d002      	beq.n	8004abc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004aba:	e10b      	b.n	8004cd4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_SPI_Transmit+0x52>
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d102      	bne.n	8004ace <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004acc:	e102      	b.n	8004cd4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2203      	movs	r2, #3
 8004ad2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	88fa      	ldrh	r2, [r7, #6]
 8004ae6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2200      	movs	r2, #0
 8004af2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b14:	d10f      	bne.n	8004b36 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b40:	2b40      	cmp	r3, #64	; 0x40
 8004b42:	d007      	beq.n	8004b54 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b5c:	d14b      	bne.n	8004bf6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_SPI_Transmit+0xf6>
 8004b66:	8afb      	ldrh	r3, [r7, #22]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d13e      	bne.n	8004bea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b70:	881a      	ldrh	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7c:	1c9a      	adds	r2, r3, #2
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	b29a      	uxth	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b90:	e02b      	b.n	8004bea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d112      	bne.n	8004bc6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	881a      	ldrh	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	1c9a      	adds	r2, r3, #2
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bc4:	e011      	b.n	8004bea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bc6:	f7fe f9d7 	bl	8002f78 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	69bb      	ldr	r3, [r7, #24]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d803      	bhi.n	8004bde <HAL_SPI_Transmit+0x168>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bdc:	d102      	bne.n	8004be4 <HAL_SPI_Transmit+0x16e>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d102      	bne.n	8004bea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004be8:	e074      	b.n	8004cd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1ce      	bne.n	8004b92 <HAL_SPI_Transmit+0x11c>
 8004bf4:	e04c      	b.n	8004c90 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_SPI_Transmit+0x18e>
 8004bfe:	8afb      	ldrh	r3, [r7, #22]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d140      	bne.n	8004c86 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	330c      	adds	r3, #12
 8004c0e:	7812      	ldrb	r2, [r2, #0]
 8004c10:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c2a:	e02c      	b.n	8004c86 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d113      	bne.n	8004c62 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	7812      	ldrb	r2, [r2, #0]
 8004c46:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	b29a      	uxth	r2, r3
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c60:	e011      	b.n	8004c86 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c62:	f7fe f989 	bl	8002f78 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d803      	bhi.n	8004c7a <HAL_SPI_Transmit+0x204>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d102      	bne.n	8004c80 <HAL_SPI_Transmit+0x20a>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d102      	bne.n	8004c86 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c84:	e026      	b.n	8004cd4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1cd      	bne.n	8004c2c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	6839      	ldr	r1, [r7, #0]
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 fa55 	bl	8005144 <SPI_EndRxTxTransaction>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2220      	movs	r2, #32
 8004ca4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d10a      	bne.n	8004cc4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	77fb      	strb	r3, [r7, #31]
 8004cd0:	e000      	b.n	8004cd4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004cd2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ce4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3720      	adds	r7, #32
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004cee:	b580      	push	{r7, lr}
 8004cf0:	b08c      	sub	sp, #48	; 0x30
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	60f8      	str	r0, [r7, #12]
 8004cf6:	60b9      	str	r1, [r7, #8]
 8004cf8:	607a      	str	r2, [r7, #4]
 8004cfa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d00:	2300      	movs	r3, #0
 8004d02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d101      	bne.n	8004d14 <HAL_SPI_TransmitReceive+0x26>
 8004d10:	2302      	movs	r3, #2
 8004d12:	e18a      	b.n	800502a <HAL_SPI_TransmitReceive+0x33c>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d1c:	f7fe f92c 	bl	8002f78 <HAL_GetTick>
 8004d20:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004d32:	887b      	ldrh	r3, [r7, #2]
 8004d34:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d00f      	beq.n	8004d5e <HAL_SPI_TransmitReceive+0x70>
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d44:	d107      	bne.n	8004d56 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d103      	bne.n	8004d56 <HAL_SPI_TransmitReceive+0x68>
 8004d4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d003      	beq.n	8004d5e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004d56:	2302      	movs	r3, #2
 8004d58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d5c:	e15b      	b.n	8005016 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_SPI_TransmitReceive+0x82>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d002      	beq.n	8004d70 <HAL_SPI_TransmitReceive+0x82>
 8004d6a:	887b      	ldrh	r3, [r7, #2]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d103      	bne.n	8004d78 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d76:	e14e      	b.n	8005016 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d003      	beq.n	8004d8c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2205      	movs	r2, #5
 8004d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	687a      	ldr	r2, [r7, #4]
 8004d96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	887a      	ldrh	r2, [r7, #2]
 8004d9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	887a      	ldrh	r2, [r7, #2]
 8004da2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68ba      	ldr	r2, [r7, #8]
 8004da8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	887a      	ldrh	r2, [r7, #2]
 8004dae:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	887a      	ldrh	r2, [r7, #2]
 8004db4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dcc:	2b40      	cmp	r3, #64	; 0x40
 8004dce:	d007      	beq.n	8004de0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dde:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de8:	d178      	bne.n	8004edc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_SPI_TransmitReceive+0x10a>
 8004df2:	8b7b      	ldrh	r3, [r7, #26]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d166      	bne.n	8004ec6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	881a      	ldrh	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e08:	1c9a      	adds	r2, r3, #2
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	3b01      	subs	r3, #1
 8004e16:	b29a      	uxth	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e1c:	e053      	b.n	8004ec6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d11b      	bne.n	8004e64 <HAL_SPI_TransmitReceive+0x176>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e30:	b29b      	uxth	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d016      	beq.n	8004e64 <HAL_SPI_TransmitReceive+0x176>
 8004e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d113      	bne.n	8004e64 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e40:	881a      	ldrh	r2, [r3, #0]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4c:	1c9a      	adds	r2, r3, #2
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	b29a      	uxth	r2, r3
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d119      	bne.n	8004ea6 <HAL_SPI_TransmitReceive+0x1b8>
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d014      	beq.n	8004ea6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	b292      	uxth	r2, r2
 8004e88:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e8e:	1c9a      	adds	r2, r3, #2
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	b29a      	uxth	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ea6:	f7fe f867 	bl	8002f78 <HAL_GetTick>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	1ad3      	subs	r3, r2, r3
 8004eb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d807      	bhi.n	8004ec6 <HAL_SPI_TransmitReceive+0x1d8>
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ebc:	d003      	beq.n	8004ec6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004ec4:	e0a7      	b.n	8005016 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1a6      	bne.n	8004e1e <HAL_SPI_TransmitReceive+0x130>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1a1      	bne.n	8004e1e <HAL_SPI_TransmitReceive+0x130>
 8004eda:	e07c      	b.n	8004fd6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <HAL_SPI_TransmitReceive+0x1fc>
 8004ee4:	8b7b      	ldrh	r3, [r7, #26]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d16b      	bne.n	8004fc2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	7812      	ldrb	r2, [r2, #0]
 8004ef6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	3b01      	subs	r3, #1
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f10:	e057      	b.n	8004fc2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d11c      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x26c>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d017      	beq.n	8004f5a <HAL_SPI_TransmitReceive+0x26c>
 8004f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d114      	bne.n	8004f5a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	330c      	adds	r3, #12
 8004f3a:	7812      	ldrb	r2, [r2, #0]
 8004f3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f42:	1c5a      	adds	r2, r3, #1
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004f56:	2300      	movs	r3, #0
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d119      	bne.n	8004f9c <HAL_SPI_TransmitReceive+0x2ae>
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d014      	beq.n	8004f9c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68da      	ldr	r2, [r3, #12]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b29a      	uxth	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f9c:	f7fd ffec 	bl	8002f78 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d803      	bhi.n	8004fb4 <HAL_SPI_TransmitReceive+0x2c6>
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb2:	d102      	bne.n	8004fba <HAL_SPI_TransmitReceive+0x2cc>
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d103      	bne.n	8004fc2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004fc0:	e029      	b.n	8005016 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004fc6:	b29b      	uxth	r3, r3
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1a2      	bne.n	8004f12 <HAL_SPI_TransmitReceive+0x224>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d19d      	bne.n	8004f12 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f000 f8b2 	bl	8005144 <SPI_EndRxTxTransaction>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d006      	beq.n	8004ff4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004ff2:	e010      	b.n	8005016 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d10b      	bne.n	8005014 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	617b      	str	r3, [r7, #20]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	617b      	str	r3, [r7, #20]
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	e000      	b.n	8005016 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005014:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005026:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800502a:	4618      	mov	r0, r3
 800502c:	3730      	adds	r7, #48	; 0x30
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
	...

08005034 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b088      	sub	sp, #32
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	60b9      	str	r1, [r7, #8]
 800503e:	603b      	str	r3, [r7, #0]
 8005040:	4613      	mov	r3, r2
 8005042:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005044:	f7fd ff98 	bl	8002f78 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	4413      	add	r3, r2
 8005052:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005054:	f7fd ff90 	bl	8002f78 <HAL_GetTick>
 8005058:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800505a:	4b39      	ldr	r3, [pc, #228]	; (8005140 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	015b      	lsls	r3, r3, #5
 8005060:	0d1b      	lsrs	r3, r3, #20
 8005062:	69fa      	ldr	r2, [r7, #28]
 8005064:	fb02 f303 	mul.w	r3, r2, r3
 8005068:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800506a:	e054      	b.n	8005116 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005072:	d050      	beq.n	8005116 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005074:	f7fd ff80 	bl	8002f78 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	69fa      	ldr	r2, [r7, #28]
 8005080:	429a      	cmp	r2, r3
 8005082:	d902      	bls.n	800508a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d13d      	bne.n	8005106 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005098:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050a2:	d111      	bne.n	80050c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050ac:	d004      	beq.n	80050b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b6:	d107      	bne.n	80050c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d0:	d10f      	bne.n	80050f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80050f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005102:	2303      	movs	r3, #3
 8005104:	e017      	b.n	8005136 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	3b01      	subs	r3, #1
 8005114:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	689a      	ldr	r2, [r3, #8]
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4013      	ands	r3, r2
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	429a      	cmp	r2, r3
 8005124:	bf0c      	ite	eq
 8005126:	2301      	moveq	r3, #1
 8005128:	2300      	movne	r3, #0
 800512a:	b2db      	uxtb	r3, r3
 800512c:	461a      	mov	r2, r3
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	429a      	cmp	r2, r3
 8005132:	d19b      	bne.n	800506c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000004 	.word	0x20000004

08005144 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b088      	sub	sp, #32
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005150:	4b1b      	ldr	r3, [pc, #108]	; (80051c0 <SPI_EndRxTxTransaction+0x7c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <SPI_EndRxTxTransaction+0x80>)
 8005156:	fba2 2303 	umull	r2, r3, r2, r3
 800515a:	0d5b      	lsrs	r3, r3, #21
 800515c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005160:	fb02 f303 	mul.w	r3, r2, r3
 8005164:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800516e:	d112      	bne.n	8005196 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	9300      	str	r3, [sp, #0]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2200      	movs	r2, #0
 8005178:	2180      	movs	r1, #128	; 0x80
 800517a:	68f8      	ldr	r0, [r7, #12]
 800517c:	f7ff ff5a 	bl	8005034 <SPI_WaitFlagStateUntilTimeout>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800518a:	f043 0220 	orr.w	r2, r3, #32
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e00f      	b.n	80051b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	3b01      	subs	r3, #1
 80051a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ac:	2b80      	cmp	r3, #128	; 0x80
 80051ae:	d0f2      	beq.n	8005196 <SPI_EndRxTxTransaction+0x52>
 80051b0:	e000      	b.n	80051b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80051b2:	bf00      	nop
  }

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3718      	adds	r7, #24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000004 	.word	0x20000004
 80051c4:	165e9f81 	.word	0x165e9f81

080051c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e041      	b.n	800525e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f7fd fc48 	bl	8002a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3304      	adds	r3, #4
 8005204:	4619      	mov	r1, r3
 8005206:	4610      	mov	r0, r2
 8005208:	f000 fea2 	bl	8005f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b082      	sub	sp, #8
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d101      	bne.n	8005278 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	e041      	b.n	80052fc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800527e:	b2db      	uxtb	r3, r3
 8005280:	2b00      	cmp	r3, #0
 8005282:	d106      	bne.n	8005292 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f7fd fbc1 	bl	8002a14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	3304      	adds	r3, #4
 80052a2:	4619      	mov	r1, r3
 80052a4:	4610      	mov	r0, r2
 80052a6:	f000 fe53 	bl	8005f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2201      	movs	r2, #1
 80052b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2201      	movs	r2, #1
 80052ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2201      	movs	r2, #1
 80052e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2201      	movs	r2, #1
 80052ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3708      	adds	r7, #8
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e041      	b.n	800539a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fd fb24 	bl	8002978 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f000 fe04 	bl	8005f50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
	...

080053a4 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b084      	sub	sp, #16
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d104      	bne.n	80053be <HAL_TIM_IC_Start+0x1a>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	e013      	b.n	80053e6 <HAL_TIM_IC_Start+0x42>
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	2b04      	cmp	r3, #4
 80053c2:	d104      	bne.n	80053ce <HAL_TIM_IC_Start+0x2a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	e00b      	b.n	80053e6 <HAL_TIM_IC_Start+0x42>
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d104      	bne.n	80053de <HAL_TIM_IC_Start+0x3a>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	e003      	b.n	80053e6 <HAL_TIM_IC_Start+0x42>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d104      	bne.n	80053f8 <HAL_TIM_IC_Start+0x54>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	e013      	b.n	8005420 <HAL_TIM_IC_Start+0x7c>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d104      	bne.n	8005408 <HAL_TIM_IC_Start+0x64>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005404:	b2db      	uxtb	r3, r3
 8005406:	e00b      	b.n	8005420 <HAL_TIM_IC_Start+0x7c>
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2b08      	cmp	r3, #8
 800540c:	d104      	bne.n	8005418 <HAL_TIM_IC_Start+0x74>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005414:	b2db      	uxtb	r3, r3
 8005416:	e003      	b.n	8005420 <HAL_TIM_IC_Start+0x7c>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800541e:	b2db      	uxtb	r3, r3
 8005420:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d102      	bne.n	800542e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005428:	7bbb      	ldrb	r3, [r7, #14]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d001      	beq.n	8005432 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 800542e:	2301      	movs	r3, #1
 8005430:	e081      	b.n	8005536 <HAL_TIM_IC_Start+0x192>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d104      	bne.n	8005442 <HAL_TIM_IC_Start+0x9e>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005440:	e013      	b.n	800546a <HAL_TIM_IC_Start+0xc6>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b04      	cmp	r3, #4
 8005446:	d104      	bne.n	8005452 <HAL_TIM_IC_Start+0xae>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005450:	e00b      	b.n	800546a <HAL_TIM_IC_Start+0xc6>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b08      	cmp	r3, #8
 8005456:	d104      	bne.n	8005462 <HAL_TIM_IC_Start+0xbe>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005460:	e003      	b.n	800546a <HAL_TIM_IC_Start+0xc6>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2202      	movs	r2, #2
 8005466:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d104      	bne.n	800547a <HAL_TIM_IC_Start+0xd6>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2202      	movs	r2, #2
 8005474:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005478:	e013      	b.n	80054a2 <HAL_TIM_IC_Start+0xfe>
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2b04      	cmp	r3, #4
 800547e:	d104      	bne.n	800548a <HAL_TIM_IC_Start+0xe6>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2202      	movs	r2, #2
 8005484:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005488:	e00b      	b.n	80054a2 <HAL_TIM_IC_Start+0xfe>
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	2b08      	cmp	r3, #8
 800548e:	d104      	bne.n	800549a <HAL_TIM_IC_Start+0xf6>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005498:	e003      	b.n	80054a2 <HAL_TIM_IC_Start+0xfe>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2201      	movs	r2, #1
 80054a8:	6839      	ldr	r1, [r7, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f001 f9f6 	bl	800689c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a22      	ldr	r2, [pc, #136]	; (8005540 <HAL_TIM_IC_Start+0x19c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d022      	beq.n	8005500 <HAL_TIM_IC_Start+0x15c>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c2:	d01d      	beq.n	8005500 <HAL_TIM_IC_Start+0x15c>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a1e      	ldr	r2, [pc, #120]	; (8005544 <HAL_TIM_IC_Start+0x1a0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d018      	beq.n	8005500 <HAL_TIM_IC_Start+0x15c>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a1d      	ldr	r2, [pc, #116]	; (8005548 <HAL_TIM_IC_Start+0x1a4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d013      	beq.n	8005500 <HAL_TIM_IC_Start+0x15c>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a1b      	ldr	r2, [pc, #108]	; (800554c <HAL_TIM_IC_Start+0x1a8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d00e      	beq.n	8005500 <HAL_TIM_IC_Start+0x15c>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a1a      	ldr	r2, [pc, #104]	; (8005550 <HAL_TIM_IC_Start+0x1ac>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d009      	beq.n	8005500 <HAL_TIM_IC_Start+0x15c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a18      	ldr	r2, [pc, #96]	; (8005554 <HAL_TIM_IC_Start+0x1b0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <HAL_TIM_IC_Start+0x15c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a17      	ldr	r2, [pc, #92]	; (8005558 <HAL_TIM_IC_Start+0x1b4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d111      	bne.n	8005524 <HAL_TIM_IC_Start+0x180>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 0307 	and.w	r3, r3, #7
 800550a:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	2b06      	cmp	r3, #6
 8005510:	d010      	beq.n	8005534 <HAL_TIM_IC_Start+0x190>
    {
      __HAL_TIM_ENABLE(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f042 0201 	orr.w	r2, r2, #1
 8005520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005522:	e007      	b.n	8005534 <HAL_TIM_IC_Start+0x190>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	40010000 	.word	0x40010000
 8005544:	40000400 	.word	0x40000400
 8005548:	40000800 	.word	0x40000800
 800554c:	40000c00 	.word	0x40000c00
 8005550:	40010400 	.word	0x40010400
 8005554:	40014000 	.word	0x40014000
 8005558:	40001800 	.word	0x40001800

0800555c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b084      	sub	sp, #16
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005566:	2300      	movs	r3, #0
 8005568:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d104      	bne.n	800557a <HAL_TIM_IC_Start_IT+0x1e>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005576:	b2db      	uxtb	r3, r3
 8005578:	e013      	b.n	80055a2 <HAL_TIM_IC_Start_IT+0x46>
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b04      	cmp	r3, #4
 800557e:	d104      	bne.n	800558a <HAL_TIM_IC_Start_IT+0x2e>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005586:	b2db      	uxtb	r3, r3
 8005588:	e00b      	b.n	80055a2 <HAL_TIM_IC_Start_IT+0x46>
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	2b08      	cmp	r3, #8
 800558e:	d104      	bne.n	800559a <HAL_TIM_IC_Start_IT+0x3e>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005596:	b2db      	uxtb	r3, r3
 8005598:	e003      	b.n	80055a2 <HAL_TIM_IC_Start_IT+0x46>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d104      	bne.n	80055b4 <HAL_TIM_IC_Start_IT+0x58>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	e013      	b.n	80055dc <HAL_TIM_IC_Start_IT+0x80>
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d104      	bne.n	80055c4 <HAL_TIM_IC_Start_IT+0x68>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	e00b      	b.n	80055dc <HAL_TIM_IC_Start_IT+0x80>
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	2b08      	cmp	r3, #8
 80055c8:	d104      	bne.n	80055d4 <HAL_TIM_IC_Start_IT+0x78>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	e003      	b.n	80055dc <HAL_TIM_IC_Start_IT+0x80>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80055de:	7bbb      	ldrb	r3, [r7, #14]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d102      	bne.n	80055ea <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80055e4:	7b7b      	ldrb	r3, [r7, #13]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d001      	beq.n	80055ee <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e0cc      	b.n	8005788 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d104      	bne.n	80055fe <HAL_TIM_IC_Start_IT+0xa2>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055fc:	e013      	b.n	8005626 <HAL_TIM_IC_Start_IT+0xca>
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b04      	cmp	r3, #4
 8005602:	d104      	bne.n	800560e <HAL_TIM_IC_Start_IT+0xb2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2202      	movs	r2, #2
 8005608:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800560c:	e00b      	b.n	8005626 <HAL_TIM_IC_Start_IT+0xca>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b08      	cmp	r3, #8
 8005612:	d104      	bne.n	800561e <HAL_TIM_IC_Start_IT+0xc2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2202      	movs	r2, #2
 8005618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800561c:	e003      	b.n	8005626 <HAL_TIM_IC_Start_IT+0xca>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2202      	movs	r2, #2
 8005622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d104      	bne.n	8005636 <HAL_TIM_IC_Start_IT+0xda>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2202      	movs	r2, #2
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005634:	e013      	b.n	800565e <HAL_TIM_IC_Start_IT+0x102>
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	2b04      	cmp	r3, #4
 800563a:	d104      	bne.n	8005646 <HAL_TIM_IC_Start_IT+0xea>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2202      	movs	r2, #2
 8005640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005644:	e00b      	b.n	800565e <HAL_TIM_IC_Start_IT+0x102>
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	2b08      	cmp	r3, #8
 800564a:	d104      	bne.n	8005656 <HAL_TIM_IC_Start_IT+0xfa>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2202      	movs	r2, #2
 8005650:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005654:	e003      	b.n	800565e <HAL_TIM_IC_Start_IT+0x102>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2202      	movs	r2, #2
 800565a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	2b0c      	cmp	r3, #12
 8005662:	d841      	bhi.n	80056e8 <HAL_TIM_IC_Start_IT+0x18c>
 8005664:	a201      	add	r2, pc, #4	; (adr r2, 800566c <HAL_TIM_IC_Start_IT+0x110>)
 8005666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566a:	bf00      	nop
 800566c:	080056a1 	.word	0x080056a1
 8005670:	080056e9 	.word	0x080056e9
 8005674:	080056e9 	.word	0x080056e9
 8005678:	080056e9 	.word	0x080056e9
 800567c:	080056b3 	.word	0x080056b3
 8005680:	080056e9 	.word	0x080056e9
 8005684:	080056e9 	.word	0x080056e9
 8005688:	080056e9 	.word	0x080056e9
 800568c:	080056c5 	.word	0x080056c5
 8005690:	080056e9 	.word	0x080056e9
 8005694:	080056e9 	.word	0x080056e9
 8005698:	080056e9 	.word	0x080056e9
 800569c:	080056d7 	.word	0x080056d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	68da      	ldr	r2, [r3, #12]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f042 0202 	orr.w	r2, r2, #2
 80056ae:	60da      	str	r2, [r3, #12]
      break;
 80056b0:	e01d      	b.n	80056ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68da      	ldr	r2, [r3, #12]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f042 0204 	orr.w	r2, r2, #4
 80056c0:	60da      	str	r2, [r3, #12]
      break;
 80056c2:	e014      	b.n	80056ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	68da      	ldr	r2, [r3, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f042 0208 	orr.w	r2, r2, #8
 80056d2:	60da      	str	r2, [r3, #12]
      break;
 80056d4:	e00b      	b.n	80056ee <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0210 	orr.w	r2, r2, #16
 80056e4:	60da      	str	r2, [r3, #12]
      break;
 80056e6:	e002      	b.n	80056ee <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	73fb      	strb	r3, [r7, #15]
      break;
 80056ec:	bf00      	nop
  }

  if (status == HAL_OK)
 80056ee:	7bfb      	ldrb	r3, [r7, #15]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d148      	bne.n	8005786 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2201      	movs	r2, #1
 80056fa:	6839      	ldr	r1, [r7, #0]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f001 f8cd 	bl	800689c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a22      	ldr	r2, [pc, #136]	; (8005790 <HAL_TIM_IC_Start_IT+0x234>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d022      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0x1f6>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005714:	d01d      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0x1f6>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a1e      	ldr	r2, [pc, #120]	; (8005794 <HAL_TIM_IC_Start_IT+0x238>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d018      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0x1f6>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1c      	ldr	r2, [pc, #112]	; (8005798 <HAL_TIM_IC_Start_IT+0x23c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0x1f6>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1b      	ldr	r2, [pc, #108]	; (800579c <HAL_TIM_IC_Start_IT+0x240>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d00e      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0x1f6>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a19      	ldr	r2, [pc, #100]	; (80057a0 <HAL_TIM_IC_Start_IT+0x244>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d009      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0x1f6>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a18      	ldr	r2, [pc, #96]	; (80057a4 <HAL_TIM_IC_Start_IT+0x248>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d004      	beq.n	8005752 <HAL_TIM_IC_Start_IT+0x1f6>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <HAL_TIM_IC_Start_IT+0x24c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d111      	bne.n	8005776 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0307 	and.w	r3, r3, #7
 800575c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	2b06      	cmp	r3, #6
 8005762:	d010      	beq.n	8005786 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f042 0201 	orr.w	r2, r2, #1
 8005772:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005774:	e007      	b.n	8005786 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	681a      	ldr	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f042 0201 	orr.w	r2, r2, #1
 8005784:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005786:	7bfb      	ldrb	r3, [r7, #15]
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40010000 	.word	0x40010000
 8005794:	40000400 	.word	0x40000400
 8005798:	40000800 	.word	0x40000800
 800579c:	40000c00 	.word	0x40000c00
 80057a0:	40010400 	.word	0x40010400
 80057a4:	40014000 	.word	0x40014000
 80057a8:	40001800 	.word	0x40001800

080057ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	f003 0302 	and.w	r3, r3, #2
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d122      	bne.n	8005808 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d11b      	bne.n	8005808 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f06f 0202 	mvn.w	r2, #2
 80057d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d003      	beq.n	80057f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fc fdce 	bl	8002390 <HAL_TIM_IC_CaptureCallback>
 80057f4:	e005      	b.n	8005802 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fb8c 	bl	8005f14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f000 fb93 	bl	8005f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2200      	movs	r2, #0
 8005806:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	691b      	ldr	r3, [r3, #16]
 800580e:	f003 0304 	and.w	r3, r3, #4
 8005812:	2b04      	cmp	r3, #4
 8005814:	d122      	bne.n	800585c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b04      	cmp	r3, #4
 8005822:	d11b      	bne.n	800585c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f06f 0204 	mvn.w	r2, #4
 800582c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2202      	movs	r2, #2
 8005832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800583e:	2b00      	cmp	r3, #0
 8005840:	d003      	beq.n	800584a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fc fda4 	bl	8002390 <HAL_TIM_IC_CaptureCallback>
 8005848:	e005      	b.n	8005856 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 fb62 	bl	8005f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005850:	6878      	ldr	r0, [r7, #4]
 8005852:	f000 fb69 	bl	8005f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f003 0308 	and.w	r3, r3, #8
 8005866:	2b08      	cmp	r3, #8
 8005868:	d122      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f003 0308 	and.w	r3, r3, #8
 8005874:	2b08      	cmp	r3, #8
 8005876:	d11b      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f06f 0208 	mvn.w	r2, #8
 8005880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2204      	movs	r2, #4
 8005886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d003      	beq.n	800589e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fc fd7a 	bl	8002390 <HAL_TIM_IC_CaptureCallback>
 800589c:	e005      	b.n	80058aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 fb38 	bl	8005f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fb3f 	bl	8005f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0310 	and.w	r3, r3, #16
 80058ba:	2b10      	cmp	r3, #16
 80058bc:	d122      	bne.n	8005904 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0310 	and.w	r3, r3, #16
 80058c8:	2b10      	cmp	r3, #16
 80058ca:	d11b      	bne.n	8005904 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0210 	mvn.w	r2, #16
 80058d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2208      	movs	r2, #8
 80058da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fc fd50 	bl	8002390 <HAL_TIM_IC_CaptureCallback>
 80058f0:	e005      	b.n	80058fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fb0e 	bl	8005f14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 fb15 	bl	8005f28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b01      	cmp	r3, #1
 8005910:	d10e      	bne.n	8005930 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b01      	cmp	r3, #1
 800591e:	d107      	bne.n	8005930 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f06f 0201 	mvn.w	r2, #1
 8005928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7fc fd26 	bl	800237c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	691b      	ldr	r3, [r3, #16]
 8005936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593a:	2b80      	cmp	r3, #128	; 0x80
 800593c:	d10e      	bne.n	800595c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005948:	2b80      	cmp	r3, #128	; 0x80
 800594a:	d107      	bne.n	800595c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005954:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f001 f84c 	bl	80069f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005966:	2b40      	cmp	r3, #64	; 0x40
 8005968:	d10e      	bne.n	8005988 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005974:	2b40      	cmp	r3, #64	; 0x40
 8005976:	d107      	bne.n	8005988 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fada 	bl	8005f3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b20      	cmp	r3, #32
 8005994:	d10e      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	f003 0320 	and.w	r3, r3, #32
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d107      	bne.n	80059b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0220 	mvn.w	r2, #32
 80059ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f001 f816 	bl	80069e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80059b4:	bf00      	nop
 80059b6:	3708      	adds	r7, #8
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b086      	sub	sp, #24
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	60f8      	str	r0, [r7, #12]
 80059c4:	60b9      	str	r1, [r7, #8]
 80059c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059c8:	2300      	movs	r3, #0
 80059ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_TIM_IC_ConfigChannel+0x1e>
 80059d6:	2302      	movs	r3, #2
 80059d8:	e088      	b.n	8005aec <HAL_TIM_IC_ConfigChannel+0x130>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2201      	movs	r2, #1
 80059de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d11b      	bne.n	8005a20 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6818      	ldr	r0, [r3, #0]
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	6819      	ldr	r1, [r3, #0]
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	685a      	ldr	r2, [r3, #4]
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f000 fd8c 	bl	8006514 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 020c 	bic.w	r2, r2, #12
 8005a0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6999      	ldr	r1, [r3, #24]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	689a      	ldr	r2, [r3, #8]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	619a      	str	r2, [r3, #24]
 8005a1e:	e060      	b.n	8005ae2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d11c      	bne.n	8005a60 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6818      	ldr	r0, [r3, #0]
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	6819      	ldr	r1, [r3, #0]
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f000 fe10 	bl	800665a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	699a      	ldr	r2, [r3, #24]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005a48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6999      	ldr	r1, [r3, #24]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	021a      	lsls	r2, r3, #8
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	430a      	orrs	r2, r1
 8005a5c:	619a      	str	r2, [r3, #24]
 8005a5e:	e040      	b.n	8005ae2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b08      	cmp	r3, #8
 8005a64:	d11b      	bne.n	8005a9e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6819      	ldr	r1, [r3, #0]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	68db      	ldr	r3, [r3, #12]
 8005a76:	f000 fe5d 	bl	8006734 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	69da      	ldr	r2, [r3, #28]
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 020c 	bic.w	r2, r2, #12
 8005a88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69d9      	ldr	r1, [r3, #28]
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	689a      	ldr	r2, [r3, #8]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	61da      	str	r2, [r3, #28]
 8005a9c:	e021      	b.n	8005ae2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b0c      	cmp	r3, #12
 8005aa2:	d11c      	bne.n	8005ade <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6818      	ldr	r0, [r3, #0]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	6819      	ldr	r1, [r3, #0]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	685a      	ldr	r2, [r3, #4]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f000 fe7a 	bl	80067ac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69da      	ldr	r2, [r3, #28]
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005ac6:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69d9      	ldr	r1, [r3, #28]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	021a      	lsls	r2, r3, #8
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	430a      	orrs	r2, r1
 8005ada:	61da      	str	r2, [r3, #28]
 8005adc:	e001      	b.n	8005ae2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005aea:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3718      	adds	r7, #24
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b00:	2300      	movs	r3, #0
 8005b02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d101      	bne.n	8005b12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e0ae      	b.n	8005c70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2b0c      	cmp	r3, #12
 8005b1e:	f200 809f 	bhi.w	8005c60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b5d 	.word	0x08005b5d
 8005b2c:	08005c61 	.word	0x08005c61
 8005b30:	08005c61 	.word	0x08005c61
 8005b34:	08005c61 	.word	0x08005c61
 8005b38:	08005b9d 	.word	0x08005b9d
 8005b3c:	08005c61 	.word	0x08005c61
 8005b40:	08005c61 	.word	0x08005c61
 8005b44:	08005c61 	.word	0x08005c61
 8005b48:	08005bdf 	.word	0x08005bdf
 8005b4c:	08005c61 	.word	0x08005c61
 8005b50:	08005c61 	.word	0x08005c61
 8005b54:	08005c61 	.word	0x08005c61
 8005b58:	08005c1f 	.word	0x08005c1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f000 fa94 	bl	8006090 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	699a      	ldr	r2, [r3, #24]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f042 0208 	orr.w	r2, r2, #8
 8005b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699a      	ldr	r2, [r3, #24]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0204 	bic.w	r2, r2, #4
 8005b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6999      	ldr	r1, [r3, #24]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	691a      	ldr	r2, [r3, #16]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	430a      	orrs	r2, r1
 8005b98:	619a      	str	r2, [r3, #24]
      break;
 8005b9a:	e064      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f000 fae4 	bl	8006170 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	699a      	ldr	r2, [r3, #24]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	699a      	ldr	r2, [r3, #24]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6999      	ldr	r1, [r3, #24]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	021a      	lsls	r2, r3, #8
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	619a      	str	r2, [r3, #24]
      break;
 8005bdc:	e043      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68b9      	ldr	r1, [r7, #8]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 fb39 	bl	800625c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f042 0208 	orr.w	r2, r2, #8
 8005bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	69da      	ldr	r2, [r3, #28]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0204 	bic.w	r2, r2, #4
 8005c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	69d9      	ldr	r1, [r3, #28]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	691a      	ldr	r2, [r3, #16]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	61da      	str	r2, [r3, #28]
      break;
 8005c1c:	e023      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	4618      	mov	r0, r3
 8005c26:	f000 fb8d 	bl	8006344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	69da      	ldr	r2, [r3, #28]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	69da      	ldr	r2, [r3, #28]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	69d9      	ldr	r1, [r3, #28]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	021a      	lsls	r2, r3, #8
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	61da      	str	r2, [r3, #28]
      break;
 8005c5e:	e002      	b.n	8005c66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	75fb      	strb	r3, [r7, #23]
      break;
 8005c64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3718      	adds	r7, #24
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c82:	2300      	movs	r3, #0
 8005c84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	d101      	bne.n	8005c94 <HAL_TIM_ConfigClockSource+0x1c>
 8005c90:	2302      	movs	r3, #2
 8005c92:	e0b4      	b.n	8005dfe <HAL_TIM_ConfigClockSource+0x186>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ccc:	d03e      	beq.n	8005d4c <HAL_TIM_ConfigClockSource+0xd4>
 8005cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd2:	f200 8087 	bhi.w	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cda:	f000 8086 	beq.w	8005dea <HAL_TIM_ConfigClockSource+0x172>
 8005cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce2:	d87f      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce4:	2b70      	cmp	r3, #112	; 0x70
 8005ce6:	d01a      	beq.n	8005d1e <HAL_TIM_ConfigClockSource+0xa6>
 8005ce8:	2b70      	cmp	r3, #112	; 0x70
 8005cea:	d87b      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cec:	2b60      	cmp	r3, #96	; 0x60
 8005cee:	d050      	beq.n	8005d92 <HAL_TIM_ConfigClockSource+0x11a>
 8005cf0:	2b60      	cmp	r3, #96	; 0x60
 8005cf2:	d877      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf4:	2b50      	cmp	r3, #80	; 0x50
 8005cf6:	d03c      	beq.n	8005d72 <HAL_TIM_ConfigClockSource+0xfa>
 8005cf8:	2b50      	cmp	r3, #80	; 0x50
 8005cfa:	d873      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	d058      	beq.n	8005db2 <HAL_TIM_ConfigClockSource+0x13a>
 8005d00:	2b40      	cmp	r3, #64	; 0x40
 8005d02:	d86f      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d04:	2b30      	cmp	r3, #48	; 0x30
 8005d06:	d064      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d08:	2b30      	cmp	r3, #48	; 0x30
 8005d0a:	d86b      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d060      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d867      	bhi.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d05c      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d18:	2b10      	cmp	r3, #16
 8005d1a:	d05a      	beq.n	8005dd2 <HAL_TIM_ConfigClockSource+0x15a>
 8005d1c:	e062      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6818      	ldr	r0, [r3, #0]
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	6899      	ldr	r1, [r3, #8]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	685a      	ldr	r2, [r3, #4]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f000 fd95 	bl	800685c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	609a      	str	r2, [r3, #8]
      break;
 8005d4a:	e04f      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6818      	ldr	r0, [r3, #0]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	6899      	ldr	r1, [r3, #8]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	685a      	ldr	r2, [r3, #4]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f000 fd7e 	bl	800685c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689a      	ldr	r2, [r3, #8]
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d6e:	609a      	str	r2, [r3, #8]
      break;
 8005d70:	e03c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6818      	ldr	r0, [r3, #0]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	6859      	ldr	r1, [r3, #4]
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	461a      	mov	r2, r3
 8005d80:	f000 fc3c 	bl	80065fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2150      	movs	r1, #80	; 0x50
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f000 fd4b 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 8005d90:	e02c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6818      	ldr	r0, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6859      	ldr	r1, [r3, #4]
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	461a      	mov	r2, r3
 8005da0:	f000 fc98 	bl	80066d4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2160      	movs	r1, #96	; 0x60
 8005daa:	4618      	mov	r0, r3
 8005dac:	f000 fd3b 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 8005db0:	e01c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6818      	ldr	r0, [r3, #0]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	6859      	ldr	r1, [r3, #4]
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	461a      	mov	r2, r3
 8005dc0:	f000 fc1c 	bl	80065fc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	2140      	movs	r1, #64	; 0x40
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f000 fd2b 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 8005dd0:	e00c      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4610      	mov	r0, r2
 8005dde:	f000 fd22 	bl	8006826 <TIM_ITRx_SetConfig>
      break;
 8005de2:	e003      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
      break;
 8005de8:	e000      	b.n	8005dec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005dea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b082      	sub	sp, #8
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <HAL_TIM_SlaveConfigSynchro+0x18>
 8005e1a:	2302      	movs	r3, #2
 8005e1c:	e031      	b.n	8005e82 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2202      	movs	r2, #2
 8005e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8005e2e:	6839      	ldr	r1, [r7, #0]
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 fadd 	bl	80063f0 <TIM_SlaveTimer_SetConfig>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d009      	beq.n	8005e50 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e018      	b.n	8005e82 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68da      	ldr	r2, [r3, #12]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e5e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68da      	ldr	r2, [r3, #12]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005e6e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e80:	2300      	movs	r3, #0
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b085      	sub	sp, #20
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b0c      	cmp	r3, #12
 8005e9e:	d831      	bhi.n	8005f04 <HAL_TIM_ReadCapturedValue+0x78>
 8005ea0:	a201      	add	r2, pc, #4	; (adr r2, 8005ea8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea6:	bf00      	nop
 8005ea8:	08005edd 	.word	0x08005edd
 8005eac:	08005f05 	.word	0x08005f05
 8005eb0:	08005f05 	.word	0x08005f05
 8005eb4:	08005f05 	.word	0x08005f05
 8005eb8:	08005ee7 	.word	0x08005ee7
 8005ebc:	08005f05 	.word	0x08005f05
 8005ec0:	08005f05 	.word	0x08005f05
 8005ec4:	08005f05 	.word	0x08005f05
 8005ec8:	08005ef1 	.word	0x08005ef1
 8005ecc:	08005f05 	.word	0x08005f05
 8005ed0:	08005f05 	.word	0x08005f05
 8005ed4:	08005f05 	.word	0x08005f05
 8005ed8:	08005efb 	.word	0x08005efb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee2:	60fb      	str	r3, [r7, #12]

      break;
 8005ee4:	e00f      	b.n	8005f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eec:	60fb      	str	r3, [r7, #12]

      break;
 8005eee:	e00a      	b.n	8005f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef6:	60fb      	str	r3, [r7, #12]

      break;
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	60fb      	str	r3, [r7, #12]

      break;
 8005f02:	e000      	b.n	8005f06 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005f04:	bf00      	nop
  }

  return tmpreg;
 8005f06:	68fb      	ldr	r3, [r7, #12]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f1c:	bf00      	nop
 8005f1e:	370c      	adds	r7, #12
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
 8005f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a40      	ldr	r2, [pc, #256]	; (8006064 <TIM_Base_SetConfig+0x114>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d013      	beq.n	8005f90 <TIM_Base_SetConfig+0x40>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f6e:	d00f      	beq.n	8005f90 <TIM_Base_SetConfig+0x40>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	4a3d      	ldr	r2, [pc, #244]	; (8006068 <TIM_Base_SetConfig+0x118>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d00b      	beq.n	8005f90 <TIM_Base_SetConfig+0x40>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a3c      	ldr	r2, [pc, #240]	; (800606c <TIM_Base_SetConfig+0x11c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d007      	beq.n	8005f90 <TIM_Base_SetConfig+0x40>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a3b      	ldr	r2, [pc, #236]	; (8006070 <TIM_Base_SetConfig+0x120>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d003      	beq.n	8005f90 <TIM_Base_SetConfig+0x40>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a3a      	ldr	r2, [pc, #232]	; (8006074 <TIM_Base_SetConfig+0x124>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d108      	bne.n	8005fa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a2f      	ldr	r2, [pc, #188]	; (8006064 <TIM_Base_SetConfig+0x114>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d02b      	beq.n	8006002 <TIM_Base_SetConfig+0xb2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb0:	d027      	beq.n	8006002 <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a2c      	ldr	r2, [pc, #176]	; (8006068 <TIM_Base_SetConfig+0x118>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d023      	beq.n	8006002 <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a2b      	ldr	r2, [pc, #172]	; (800606c <TIM_Base_SetConfig+0x11c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d01f      	beq.n	8006002 <TIM_Base_SetConfig+0xb2>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a2a      	ldr	r2, [pc, #168]	; (8006070 <TIM_Base_SetConfig+0x120>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d01b      	beq.n	8006002 <TIM_Base_SetConfig+0xb2>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a29      	ldr	r2, [pc, #164]	; (8006074 <TIM_Base_SetConfig+0x124>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d017      	beq.n	8006002 <TIM_Base_SetConfig+0xb2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a28      	ldr	r2, [pc, #160]	; (8006078 <TIM_Base_SetConfig+0x128>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d013      	beq.n	8006002 <TIM_Base_SetConfig+0xb2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a27      	ldr	r2, [pc, #156]	; (800607c <TIM_Base_SetConfig+0x12c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d00f      	beq.n	8006002 <TIM_Base_SetConfig+0xb2>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a26      	ldr	r2, [pc, #152]	; (8006080 <TIM_Base_SetConfig+0x130>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d00b      	beq.n	8006002 <TIM_Base_SetConfig+0xb2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a25      	ldr	r2, [pc, #148]	; (8006084 <TIM_Base_SetConfig+0x134>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d007      	beq.n	8006002 <TIM_Base_SetConfig+0xb2>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a24      	ldr	r2, [pc, #144]	; (8006088 <TIM_Base_SetConfig+0x138>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d003      	beq.n	8006002 <TIM_Base_SetConfig+0xb2>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a23      	ldr	r2, [pc, #140]	; (800608c <TIM_Base_SetConfig+0x13c>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d108      	bne.n	8006014 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006008:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4313      	orrs	r3, r2
 8006012:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a0a      	ldr	r2, [pc, #40]	; (8006064 <TIM_Base_SetConfig+0x114>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d003      	beq.n	8006048 <TIM_Base_SetConfig+0xf8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a0c      	ldr	r2, [pc, #48]	; (8006074 <TIM_Base_SetConfig+0x124>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d103      	bne.n	8006050 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	691a      	ldr	r2, [r3, #16]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	615a      	str	r2, [r3, #20]
}
 8006056:	bf00      	nop
 8006058:	3714      	adds	r7, #20
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	40010000 	.word	0x40010000
 8006068:	40000400 	.word	0x40000400
 800606c:	40000800 	.word	0x40000800
 8006070:	40000c00 	.word	0x40000c00
 8006074:	40010400 	.word	0x40010400
 8006078:	40014000 	.word	0x40014000
 800607c:	40014400 	.word	0x40014400
 8006080:	40014800 	.word	0x40014800
 8006084:	40001800 	.word	0x40001800
 8006088:	40001c00 	.word	0x40001c00
 800608c:	40002000 	.word	0x40002000

08006090 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006090:	b480      	push	{r7}
 8006092:	b087      	sub	sp, #28
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a1b      	ldr	r3, [r3, #32]
 80060aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0303 	bic.w	r3, r3, #3
 80060c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f023 0302 	bic.w	r3, r3, #2
 80060d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	697a      	ldr	r2, [r7, #20]
 80060e0:	4313      	orrs	r3, r2
 80060e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a20      	ldr	r2, [pc, #128]	; (8006168 <TIM_OC1_SetConfig+0xd8>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d003      	beq.n	80060f4 <TIM_OC1_SetConfig+0x64>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a1f      	ldr	r2, [pc, #124]	; (800616c <TIM_OC1_SetConfig+0xdc>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d10c      	bne.n	800610e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f023 0308 	bic.w	r3, r3, #8
 80060fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f023 0304 	bic.w	r3, r3, #4
 800610c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a15      	ldr	r2, [pc, #84]	; (8006168 <TIM_OC1_SetConfig+0xd8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d003      	beq.n	800611e <TIM_OC1_SetConfig+0x8e>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a14      	ldr	r2, [pc, #80]	; (800616c <TIM_OC1_SetConfig+0xdc>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d111      	bne.n	8006142 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006124:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800612c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	693a      	ldr	r2, [r7, #16]
 800613e:	4313      	orrs	r3, r2
 8006140:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	68fa      	ldr	r2, [r7, #12]
 800614c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685a      	ldr	r2, [r3, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	621a      	str	r2, [r3, #32]
}
 800615c:	bf00      	nop
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	40010000 	.word	0x40010000
 800616c:	40010400 	.word	0x40010400

08006170 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	f023 0210 	bic.w	r2, r3, #16
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	021b      	lsls	r3, r3, #8
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	f023 0320 	bic.w	r3, r3, #32
 80061ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a22      	ldr	r2, [pc, #136]	; (8006254 <TIM_OC2_SetConfig+0xe4>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d003      	beq.n	80061d8 <TIM_OC2_SetConfig+0x68>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a21      	ldr	r2, [pc, #132]	; (8006258 <TIM_OC2_SetConfig+0xe8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d10d      	bne.n	80061f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	697a      	ldr	r2, [r7, #20]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	4a17      	ldr	r2, [pc, #92]	; (8006254 <TIM_OC2_SetConfig+0xe4>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d003      	beq.n	8006204 <TIM_OC2_SetConfig+0x94>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a16      	ldr	r2, [pc, #88]	; (8006258 <TIM_OC2_SetConfig+0xe8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d113      	bne.n	800622c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800620a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006212:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	695b      	ldr	r3, [r3, #20]
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4313      	orrs	r3, r2
 800621e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	699b      	ldr	r3, [r3, #24]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	693a      	ldr	r2, [r7, #16]
 8006228:	4313      	orrs	r3, r2
 800622a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	697a      	ldr	r2, [r7, #20]
 8006244:	621a      	str	r2, [r3, #32]
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40010000 	.word	0x40010000
 8006258:	40010400 	.word	0x40010400

0800625c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800625c:	b480      	push	{r7}
 800625e:	b087      	sub	sp, #28
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	69db      	ldr	r3, [r3, #28]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800628a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f023 0303 	bic.w	r3, r3, #3
 8006292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	021b      	lsls	r3, r3, #8
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	4a21      	ldr	r2, [pc, #132]	; (800633c <TIM_OC3_SetConfig+0xe0>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d003      	beq.n	80062c2 <TIM_OC3_SetConfig+0x66>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a20      	ldr	r2, [pc, #128]	; (8006340 <TIM_OC3_SetConfig+0xe4>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d10d      	bne.n	80062de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	021b      	lsls	r3, r3, #8
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a16      	ldr	r2, [pc, #88]	; (800633c <TIM_OC3_SetConfig+0xe0>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d003      	beq.n	80062ee <TIM_OC3_SetConfig+0x92>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a15      	ldr	r2, [pc, #84]	; (8006340 <TIM_OC3_SetConfig+0xe4>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d113      	bne.n	8006316 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80062fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	695b      	ldr	r3, [r3, #20]
 8006302:	011b      	lsls	r3, r3, #4
 8006304:	693a      	ldr	r2, [r7, #16]
 8006306:	4313      	orrs	r3, r2
 8006308:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	4313      	orrs	r3, r2
 8006314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	697a      	ldr	r2, [r7, #20]
 800632e:	621a      	str	r2, [r3, #32]
}
 8006330:	bf00      	nop
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	40010000 	.word	0x40010000
 8006340:	40010400 	.word	0x40010400

08006344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006344:	b480      	push	{r7}
 8006346:	b087      	sub	sp, #28
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a1b      	ldr	r3, [r3, #32]
 8006352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	69db      	ldr	r3, [r3, #28]
 800636a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800637a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	021b      	lsls	r3, r3, #8
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4313      	orrs	r3, r2
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800638e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	031b      	lsls	r3, r3, #12
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	4313      	orrs	r3, r2
 800639a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a12      	ldr	r2, [pc, #72]	; (80063e8 <TIM_OC4_SetConfig+0xa4>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d003      	beq.n	80063ac <TIM_OC4_SetConfig+0x68>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a11      	ldr	r2, [pc, #68]	; (80063ec <TIM_OC4_SetConfig+0xa8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d109      	bne.n	80063c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	019b      	lsls	r3, r3, #6
 80063ba:	697a      	ldr	r2, [r7, #20]
 80063bc:	4313      	orrs	r3, r2
 80063be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	621a      	str	r2, [r3, #32]
}
 80063da:	bf00      	nop
 80063dc:	371c      	adds	r7, #28
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	40010000 	.word	0x40010000
 80063ec:	40010400 	.word	0x40010400

080063f0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80063fa:	2300      	movs	r3, #0
 80063fc:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800640c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	693a      	ldr	r2, [r7, #16]
 8006414:	4313      	orrs	r3, r2
 8006416:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	f023 0307 	bic.w	r3, r3, #7
 800641e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	693a      	ldr	r2, [r7, #16]
 8006430:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b70      	cmp	r3, #112	; 0x70
 8006438:	d01a      	beq.n	8006470 <TIM_SlaveTimer_SetConfig+0x80>
 800643a:	2b70      	cmp	r3, #112	; 0x70
 800643c:	d860      	bhi.n	8006500 <TIM_SlaveTimer_SetConfig+0x110>
 800643e:	2b60      	cmp	r3, #96	; 0x60
 8006440:	d054      	beq.n	80064ec <TIM_SlaveTimer_SetConfig+0xfc>
 8006442:	2b60      	cmp	r3, #96	; 0x60
 8006444:	d85c      	bhi.n	8006500 <TIM_SlaveTimer_SetConfig+0x110>
 8006446:	2b50      	cmp	r3, #80	; 0x50
 8006448:	d046      	beq.n	80064d8 <TIM_SlaveTimer_SetConfig+0xe8>
 800644a:	2b50      	cmp	r3, #80	; 0x50
 800644c:	d858      	bhi.n	8006500 <TIM_SlaveTimer_SetConfig+0x110>
 800644e:	2b40      	cmp	r3, #64	; 0x40
 8006450:	d019      	beq.n	8006486 <TIM_SlaveTimer_SetConfig+0x96>
 8006452:	2b40      	cmp	r3, #64	; 0x40
 8006454:	d854      	bhi.n	8006500 <TIM_SlaveTimer_SetConfig+0x110>
 8006456:	2b30      	cmp	r3, #48	; 0x30
 8006458:	d055      	beq.n	8006506 <TIM_SlaveTimer_SetConfig+0x116>
 800645a:	2b30      	cmp	r3, #48	; 0x30
 800645c:	d850      	bhi.n	8006500 <TIM_SlaveTimer_SetConfig+0x110>
 800645e:	2b20      	cmp	r3, #32
 8006460:	d051      	beq.n	8006506 <TIM_SlaveTimer_SetConfig+0x116>
 8006462:	2b20      	cmp	r3, #32
 8006464:	d84c      	bhi.n	8006500 <TIM_SlaveTimer_SetConfig+0x110>
 8006466:	2b00      	cmp	r3, #0
 8006468:	d04d      	beq.n	8006506 <TIM_SlaveTimer_SetConfig+0x116>
 800646a:	2b10      	cmp	r3, #16
 800646c:	d04b      	beq.n	8006506 <TIM_SlaveTimer_SetConfig+0x116>
 800646e:	e047      	b.n	8006500 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	68d9      	ldr	r1, [r3, #12]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	f000 f9ec 	bl	800685c <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006484:	e040      	b.n	8006508 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b05      	cmp	r3, #5
 800648c:	d101      	bne.n	8006492 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e03b      	b.n	800650a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	6a1b      	ldr	r3, [r3, #32]
 8006498:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6a1a      	ldr	r2, [r3, #32]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0201 	bic.w	r2, r2, #1
 80064a8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064b8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	621a      	str	r2, [r3, #32]
      break;
 80064d6:	e017      	b.n	8006508 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6818      	ldr	r0, [r3, #0]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	6899      	ldr	r1, [r3, #8]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	461a      	mov	r2, r3
 80064e6:	f000 f889 	bl	80065fc <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80064ea:	e00d      	b.n	8006508 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6818      	ldr	r0, [r3, #0]
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	6899      	ldr	r1, [r3, #8]
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	461a      	mov	r2, r3
 80064fa:	f000 f8eb 	bl	80066d4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80064fe:	e003      	b.n	8006508 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006500:	2301      	movs	r3, #1
 8006502:	75fb      	strb	r3, [r7, #23]
      break;
 8006504:	e000      	b.n	8006508 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006506:	bf00      	nop
  }

  return status;
 8006508:	7dfb      	ldrb	r3, [r7, #23]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
	...

08006514 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	f023 0201 	bic.w	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4a28      	ldr	r2, [pc, #160]	; (80065e0 <TIM_TI1_SetConfig+0xcc>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d01b      	beq.n	800657a <TIM_TI1_SetConfig+0x66>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006548:	d017      	beq.n	800657a <TIM_TI1_SetConfig+0x66>
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	4a25      	ldr	r2, [pc, #148]	; (80065e4 <TIM_TI1_SetConfig+0xd0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d013      	beq.n	800657a <TIM_TI1_SetConfig+0x66>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	4a24      	ldr	r2, [pc, #144]	; (80065e8 <TIM_TI1_SetConfig+0xd4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00f      	beq.n	800657a <TIM_TI1_SetConfig+0x66>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	4a23      	ldr	r2, [pc, #140]	; (80065ec <TIM_TI1_SetConfig+0xd8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d00b      	beq.n	800657a <TIM_TI1_SetConfig+0x66>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4a22      	ldr	r2, [pc, #136]	; (80065f0 <TIM_TI1_SetConfig+0xdc>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d007      	beq.n	800657a <TIM_TI1_SetConfig+0x66>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	4a21      	ldr	r2, [pc, #132]	; (80065f4 <TIM_TI1_SetConfig+0xe0>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d003      	beq.n	800657a <TIM_TI1_SetConfig+0x66>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4a20      	ldr	r2, [pc, #128]	; (80065f8 <TIM_TI1_SetConfig+0xe4>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d101      	bne.n	800657e <TIM_TI1_SetConfig+0x6a>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <TIM_TI1_SetConfig+0x6c>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d008      	beq.n	8006596 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f023 0303 	bic.w	r3, r3, #3
 800658a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4313      	orrs	r3, r2
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	e003      	b.n	800659e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	f043 0301 	orr.w	r3, r3, #1
 800659c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	f023 030a 	bic.w	r3, r3, #10
 80065b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f003 030a 	and.w	r3, r3, #10
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	697a      	ldr	r2, [r7, #20]
 80065ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	621a      	str	r2, [r3, #32]
}
 80065d2:	bf00      	nop
 80065d4:	371c      	adds	r7, #28
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr
 80065de:	bf00      	nop
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40000400 	.word	0x40000400
 80065e8:	40000800 	.word	0x40000800
 80065ec:	40000c00 	.word	0x40000c00
 80065f0:	40010400 	.word	0x40010400
 80065f4:	40014000 	.word	0x40014000
 80065f8:	40001800 	.word	0x40001800

080065fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b087      	sub	sp, #28
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a1b      	ldr	r3, [r3, #32]
 800660c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6a1b      	ldr	r3, [r3, #32]
 8006612:	f023 0201 	bic.w	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	f023 030a 	bic.w	r3, r3, #10
 8006638:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800665a:	b480      	push	{r7}
 800665c:	b087      	sub	sp, #28
 800665e:	af00      	add	r7, sp, #0
 8006660:	60f8      	str	r0, [r7, #12]
 8006662:	60b9      	str	r1, [r7, #8]
 8006664:	607a      	str	r2, [r7, #4]
 8006666:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	f023 0210 	bic.w	r2, r3, #16
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006686:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	021b      	lsls	r3, r3, #8
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	4313      	orrs	r3, r2
 8006690:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006698:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	031b      	lsls	r3, r3, #12
 800669e:	b29b      	uxth	r3, r3
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	4313      	orrs	r3, r2
 80066a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80066ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	011b      	lsls	r3, r3, #4
 80066b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	697a      	ldr	r2, [r7, #20]
 80066c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	621a      	str	r2, [r3, #32]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6a1b      	ldr	r3, [r3, #32]
 80066e4:	f023 0210 	bic.w	r2, r3, #16
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	699b      	ldr	r3, [r3, #24]
 80066f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6a1b      	ldr	r3, [r3, #32]
 80066f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80066fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	031b      	lsls	r3, r3, #12
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4313      	orrs	r3, r2
 8006708:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006710:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	011b      	lsls	r3, r3, #4
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	4313      	orrs	r3, r2
 800671a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	621a      	str	r2, [r3, #32]
}
 8006728:	bf00      	nop
 800672a:	371c      	adds	r7, #28
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006734:	b480      	push	{r7}
 8006736:	b087      	sub	sp, #28
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
 8006740:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a1b      	ldr	r3, [r3, #32]
 8006746:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6a1b      	ldr	r3, [r3, #32]
 8006758:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	f023 0303 	bic.w	r3, r3, #3
 8006760:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4313      	orrs	r3, r2
 8006768:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006770:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	b2db      	uxtb	r3, r3
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006784:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	021b      	lsls	r3, r3, #8
 800678a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	621a      	str	r2, [r3, #32]
}
 80067a0:	bf00      	nop
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
 80067b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	021b      	lsls	r3, r3, #8
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80067ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	031b      	lsls	r3, r3, #12
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80067fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	031b      	lsls	r3, r3, #12
 8006804:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	697a      	ldr	r2, [r7, #20]
 8006812:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	693a      	ldr	r2, [r7, #16]
 8006818:	621a      	str	r2, [r3, #32]
}
 800681a:	bf00      	nop
 800681c:	371c      	adds	r7, #28
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006826:	b480      	push	{r7}
 8006828:	b085      	sub	sp, #20
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
 800682e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800683c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800683e:	683a      	ldr	r2, [r7, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	4313      	orrs	r3, r2
 8006844:	f043 0307 	orr.w	r3, r3, #7
 8006848:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	609a      	str	r2, [r3, #8]
}
 8006850:	bf00      	nop
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006876:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	021a      	lsls	r2, r3, #8
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	431a      	orrs	r2, r3
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	4313      	orrs	r3, r2
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	609a      	str	r2, [r3, #8]
}
 8006890:	bf00      	nop
 8006892:	371c      	adds	r7, #28
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800689c:	b480      	push	{r7}
 800689e:	b087      	sub	sp, #28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f003 031f 	and.w	r3, r3, #31
 80068ae:	2201      	movs	r2, #1
 80068b0:	fa02 f303 	lsl.w	r3, r2, r3
 80068b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	6a1a      	ldr	r2, [r3, #32]
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	43db      	mvns	r3, r3
 80068be:	401a      	ands	r2, r3
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6a1a      	ldr	r2, [r3, #32]
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	f003 031f 	and.w	r3, r3, #31
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	fa01 f303 	lsl.w	r3, r1, r3
 80068d4:	431a      	orrs	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	621a      	str	r2, [r3, #32]
}
 80068da:	bf00      	nop
 80068dc:	371c      	adds	r7, #28
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr
	...

080068e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d101      	bne.n	8006900 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80068fc:	2302      	movs	r3, #2
 80068fe:	e05a      	b.n	80069b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2201      	movs	r2, #1
 8006904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2202      	movs	r2, #2
 800690c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006926:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68fa      	ldr	r2, [r7, #12]
 800692e:	4313      	orrs	r3, r2
 8006930:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a21      	ldr	r2, [pc, #132]	; (80069c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d022      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800694c:	d01d      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a1d      	ldr	r2, [pc, #116]	; (80069c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d018      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a1b      	ldr	r2, [pc, #108]	; (80069cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d013      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a1a      	ldr	r2, [pc, #104]	; (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00e      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a18      	ldr	r2, [pc, #96]	; (80069d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d009      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a17      	ldr	r2, [pc, #92]	; (80069d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d004      	beq.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a15      	ldr	r2, [pc, #84]	; (80069dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d10c      	bne.n	80069a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006990:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	4313      	orrs	r3, r2
 800699a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68ba      	ldr	r2, [r7, #8]
 80069a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3714      	adds	r7, #20
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop
 80069c4:	40010000 	.word	0x40010000
 80069c8:	40000400 	.word	0x40000400
 80069cc:	40000800 	.word	0x40000800
 80069d0:	40000c00 	.word	0x40000c00
 80069d4:	40010400 	.word	0x40010400
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40001800 	.word	0x40001800

080069e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069fc:	bf00      	nop
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e03f      	b.n	8006a9a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fc f932 	bl	8002c98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2224      	movs	r2, #36	; 0x24
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a4a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 f929 	bl	8006ca4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691a      	ldr	r2, [r3, #16]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a60:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	695a      	ldr	r2, [r3, #20]
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a70:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68da      	ldr	r2, [r3, #12]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a80:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2220      	movs	r2, #32
 8006a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}

08006aa2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa2:	b580      	push	{r7, lr}
 8006aa4:	b08a      	sub	sp, #40	; 0x28
 8006aa6:	af02      	add	r7, sp, #8
 8006aa8:	60f8      	str	r0, [r7, #12]
 8006aaa:	60b9      	str	r1, [r7, #8]
 8006aac:	603b      	str	r3, [r7, #0]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b20      	cmp	r3, #32
 8006ac0:	d17c      	bne.n	8006bbc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <HAL_UART_Transmit+0x2c>
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d101      	bne.n	8006ad2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e075      	b.n	8006bbe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d101      	bne.n	8006ae0 <HAL_UART_Transmit+0x3e>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e06e      	b.n	8006bbe <HAL_UART_Transmit+0x11c>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2221      	movs	r2, #33	; 0x21
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006af6:	f7fc fa3f 	bl	8002f78 <HAL_GetTick>
 8006afa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	88fa      	ldrh	r2, [r7, #6]
 8006b00:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	88fa      	ldrh	r2, [r7, #6]
 8006b06:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b10:	d108      	bne.n	8006b24 <HAL_UART_Transmit+0x82>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d104      	bne.n	8006b24 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	61bb      	str	r3, [r7, #24]
 8006b22:	e003      	b.n	8006b2c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006b34:	e02a      	b.n	8006b8c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	9300      	str	r3, [sp, #0]
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	2180      	movs	r1, #128	; 0x80
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 f840 	bl	8006bc6 <UART_WaitOnFlagUntilTimeout>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d001      	beq.n	8006b50 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e036      	b.n	8006bbe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d10b      	bne.n	8006b6e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	3302      	adds	r3, #2
 8006b6a:	61bb      	str	r3, [r7, #24]
 8006b6c:	e007      	b.n	8006b7e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	781a      	ldrb	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	3b01      	subs	r3, #1
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1cf      	bne.n	8006b36 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	2140      	movs	r1, #64	; 0x40
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f000 f810 	bl	8006bc6 <UART_WaitOnFlagUntilTimeout>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d001      	beq.n	8006bb0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	e006      	b.n	8006bbe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e000      	b.n	8006bbe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006bbc:	2302      	movs	r3, #2
  }
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3720      	adds	r7, #32
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b090      	sub	sp, #64	; 0x40
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	603b      	str	r3, [r7, #0]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd6:	e050      	b.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bde:	d04c      	beq.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d007      	beq.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0x30>
 8006be6:	f7fc f9c7 	bl	8002f78 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d241      	bcs.n	8006c7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	330c      	adds	r3, #12
 8006bfc:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c00:	e853 3f00 	ldrex	r3, [r3]
 8006c04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	330c      	adds	r3, #12
 8006c14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006c16:	637a      	str	r2, [r7, #52]	; 0x34
 8006c18:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c1a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006c1e:	e841 2300 	strex	r3, r2, [r1]
 8006c22:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1e5      	bne.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3314      	adds	r3, #20
 8006c30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	e853 3f00 	ldrex	r3, [r3]
 8006c38:	613b      	str	r3, [r7, #16]
   return(result);
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f023 0301 	bic.w	r3, r3, #1
 8006c40:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3314      	adds	r3, #20
 8006c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006c4a:	623a      	str	r2, [r7, #32]
 8006c4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4e:	69f9      	ldr	r1, [r7, #28]
 8006c50:	6a3a      	ldr	r2, [r7, #32]
 8006c52:	e841 2300 	strex	r3, r2, [r1]
 8006c56:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c58:	69bb      	ldr	r3, [r7, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1e5      	bne.n	8006c2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2220      	movs	r2, #32
 8006c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2220      	movs	r2, #32
 8006c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2200      	movs	r2, #0
 8006c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006c76:	2303      	movs	r3, #3
 8006c78:	e00f      	b.n	8006c9a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	4013      	ands	r3, r2
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	bf0c      	ite	eq
 8006c8a:	2301      	moveq	r3, #1
 8006c8c:	2300      	movne	r3, #0
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	461a      	mov	r2, r3
 8006c92:	79fb      	ldrb	r3, [r7, #7]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d09f      	beq.n	8006bd8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3740      	adds	r7, #64	; 0x40
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ca4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ca8:	b0c0      	sub	sp, #256	; 0x100
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc0:	68d9      	ldr	r1, [r3, #12]
 8006cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	ea40 0301 	orr.w	r3, r0, r1
 8006ccc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	431a      	orrs	r2, r3
 8006cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce0:	695b      	ldr	r3, [r3, #20]
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cfc:	f021 010c 	bic.w	r1, r1, #12
 8006d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006d0a:	430b      	orrs	r3, r1
 8006d0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d1e:	6999      	ldr	r1, [r3, #24]
 8006d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	ea40 0301 	orr.w	r3, r0, r1
 8006d2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	4b8f      	ldr	r3, [pc, #572]	; (8006f70 <UART_SetConfig+0x2cc>)
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d005      	beq.n	8006d44 <UART_SetConfig+0xa0>
 8006d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	4b8d      	ldr	r3, [pc, #564]	; (8006f74 <UART_SetConfig+0x2d0>)
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d104      	bne.n	8006d4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d44:	f7fd f92c 	bl	8003fa0 <HAL_RCC_GetPCLK2Freq>
 8006d48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006d4c:	e003      	b.n	8006d56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d4e:	f7fd f913 	bl	8003f78 <HAL_RCC_GetPCLK1Freq>
 8006d52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d60:	f040 810c 	bne.w	8006f7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006d6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006d72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006d76:	4622      	mov	r2, r4
 8006d78:	462b      	mov	r3, r5
 8006d7a:	1891      	adds	r1, r2, r2
 8006d7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d7e:	415b      	adcs	r3, r3
 8006d80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006d86:	4621      	mov	r1, r4
 8006d88:	eb12 0801 	adds.w	r8, r2, r1
 8006d8c:	4629      	mov	r1, r5
 8006d8e:	eb43 0901 	adc.w	r9, r3, r1
 8006d92:	f04f 0200 	mov.w	r2, #0
 8006d96:	f04f 0300 	mov.w	r3, #0
 8006d9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006da2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006da6:	4690      	mov	r8, r2
 8006da8:	4699      	mov	r9, r3
 8006daa:	4623      	mov	r3, r4
 8006dac:	eb18 0303 	adds.w	r3, r8, r3
 8006db0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006db4:	462b      	mov	r3, r5
 8006db6:	eb49 0303 	adc.w	r3, r9, r3
 8006dba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006dca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006dce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	18db      	adds	r3, r3, r3
 8006dd6:	653b      	str	r3, [r7, #80]	; 0x50
 8006dd8:	4613      	mov	r3, r2
 8006dda:	eb42 0303 	adc.w	r3, r2, r3
 8006dde:	657b      	str	r3, [r7, #84]	; 0x54
 8006de0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006de4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006de8:	f7f9 ff4e 	bl	8000c88 <__aeabi_uldivmod>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4b61      	ldr	r3, [pc, #388]	; (8006f78 <UART_SetConfig+0x2d4>)
 8006df2:	fba3 2302 	umull	r2, r3, r3, r2
 8006df6:	095b      	lsrs	r3, r3, #5
 8006df8:	011c      	lsls	r4, r3, #4
 8006dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e04:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006e08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006e0c:	4642      	mov	r2, r8
 8006e0e:	464b      	mov	r3, r9
 8006e10:	1891      	adds	r1, r2, r2
 8006e12:	64b9      	str	r1, [r7, #72]	; 0x48
 8006e14:	415b      	adcs	r3, r3
 8006e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006e1c:	4641      	mov	r1, r8
 8006e1e:	eb12 0a01 	adds.w	sl, r2, r1
 8006e22:	4649      	mov	r1, r9
 8006e24:	eb43 0b01 	adc.w	fp, r3, r1
 8006e28:	f04f 0200 	mov.w	r2, #0
 8006e2c:	f04f 0300 	mov.w	r3, #0
 8006e30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e3c:	4692      	mov	sl, r2
 8006e3e:	469b      	mov	fp, r3
 8006e40:	4643      	mov	r3, r8
 8006e42:	eb1a 0303 	adds.w	r3, sl, r3
 8006e46:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e4a:	464b      	mov	r3, r9
 8006e4c:	eb4b 0303 	adc.w	r3, fp, r3
 8006e50:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006e60:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006e64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	18db      	adds	r3, r3, r3
 8006e6c:	643b      	str	r3, [r7, #64]	; 0x40
 8006e6e:	4613      	mov	r3, r2
 8006e70:	eb42 0303 	adc.w	r3, r2, r3
 8006e74:	647b      	str	r3, [r7, #68]	; 0x44
 8006e76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006e7e:	f7f9 ff03 	bl	8000c88 <__aeabi_uldivmod>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4611      	mov	r1, r2
 8006e88:	4b3b      	ldr	r3, [pc, #236]	; (8006f78 <UART_SetConfig+0x2d4>)
 8006e8a:	fba3 2301 	umull	r2, r3, r3, r1
 8006e8e:	095b      	lsrs	r3, r3, #5
 8006e90:	2264      	movs	r2, #100	; 0x64
 8006e92:	fb02 f303 	mul.w	r3, r2, r3
 8006e96:	1acb      	subs	r3, r1, r3
 8006e98:	00db      	lsls	r3, r3, #3
 8006e9a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006e9e:	4b36      	ldr	r3, [pc, #216]	; (8006f78 <UART_SetConfig+0x2d4>)
 8006ea0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ea4:	095b      	lsrs	r3, r3, #5
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006eac:	441c      	add	r4, r3
 8006eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006eb8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ebc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	464b      	mov	r3, r9
 8006ec4:	1891      	adds	r1, r2, r2
 8006ec6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ec8:	415b      	adcs	r3, r3
 8006eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ecc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006ed0:	4641      	mov	r1, r8
 8006ed2:	1851      	adds	r1, r2, r1
 8006ed4:	6339      	str	r1, [r7, #48]	; 0x30
 8006ed6:	4649      	mov	r1, r9
 8006ed8:	414b      	adcs	r3, r1
 8006eda:	637b      	str	r3, [r7, #52]	; 0x34
 8006edc:	f04f 0200 	mov.w	r2, #0
 8006ee0:	f04f 0300 	mov.w	r3, #0
 8006ee4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006ee8:	4659      	mov	r1, fp
 8006eea:	00cb      	lsls	r3, r1, #3
 8006eec:	4651      	mov	r1, sl
 8006eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ef2:	4651      	mov	r1, sl
 8006ef4:	00ca      	lsls	r2, r1, #3
 8006ef6:	4610      	mov	r0, r2
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4603      	mov	r3, r0
 8006efc:	4642      	mov	r2, r8
 8006efe:	189b      	adds	r3, r3, r2
 8006f00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006f04:	464b      	mov	r3, r9
 8006f06:	460a      	mov	r2, r1
 8006f08:	eb42 0303 	adc.w	r3, r2, r3
 8006f0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006f1c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006f20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006f24:	460b      	mov	r3, r1
 8006f26:	18db      	adds	r3, r3, r3
 8006f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	eb42 0303 	adc.w	r3, r2, r3
 8006f30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006f3a:	f7f9 fea5 	bl	8000c88 <__aeabi_uldivmod>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	460b      	mov	r3, r1
 8006f42:	4b0d      	ldr	r3, [pc, #52]	; (8006f78 <UART_SetConfig+0x2d4>)
 8006f44:	fba3 1302 	umull	r1, r3, r3, r2
 8006f48:	095b      	lsrs	r3, r3, #5
 8006f4a:	2164      	movs	r1, #100	; 0x64
 8006f4c:	fb01 f303 	mul.w	r3, r1, r3
 8006f50:	1ad3      	subs	r3, r2, r3
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	3332      	adds	r3, #50	; 0x32
 8006f56:	4a08      	ldr	r2, [pc, #32]	; (8006f78 <UART_SetConfig+0x2d4>)
 8006f58:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5c:	095b      	lsrs	r3, r3, #5
 8006f5e:	f003 0207 	and.w	r2, r3, #7
 8006f62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4422      	add	r2, r4
 8006f6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f6c:	e105      	b.n	800717a <UART_SetConfig+0x4d6>
 8006f6e:	bf00      	nop
 8006f70:	40011000 	.word	0x40011000
 8006f74:	40011400 	.word	0x40011400
 8006f78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f80:	2200      	movs	r2, #0
 8006f82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006f86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006f8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006f8e:	4642      	mov	r2, r8
 8006f90:	464b      	mov	r3, r9
 8006f92:	1891      	adds	r1, r2, r2
 8006f94:	6239      	str	r1, [r7, #32]
 8006f96:	415b      	adcs	r3, r3
 8006f98:	627b      	str	r3, [r7, #36]	; 0x24
 8006f9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f9e:	4641      	mov	r1, r8
 8006fa0:	1854      	adds	r4, r2, r1
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	eb43 0501 	adc.w	r5, r3, r1
 8006fa8:	f04f 0200 	mov.w	r2, #0
 8006fac:	f04f 0300 	mov.w	r3, #0
 8006fb0:	00eb      	lsls	r3, r5, #3
 8006fb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fb6:	00e2      	lsls	r2, r4, #3
 8006fb8:	4614      	mov	r4, r2
 8006fba:	461d      	mov	r5, r3
 8006fbc:	4643      	mov	r3, r8
 8006fbe:	18e3      	adds	r3, r4, r3
 8006fc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006fc4:	464b      	mov	r3, r9
 8006fc6:	eb45 0303 	adc.w	r3, r5, r3
 8006fca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006fda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006fde:	f04f 0200 	mov.w	r2, #0
 8006fe2:	f04f 0300 	mov.w	r3, #0
 8006fe6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006fea:	4629      	mov	r1, r5
 8006fec:	008b      	lsls	r3, r1, #2
 8006fee:	4621      	mov	r1, r4
 8006ff0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ff4:	4621      	mov	r1, r4
 8006ff6:	008a      	lsls	r2, r1, #2
 8006ff8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006ffc:	f7f9 fe44 	bl	8000c88 <__aeabi_uldivmod>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4b60      	ldr	r3, [pc, #384]	; (8007188 <UART_SetConfig+0x4e4>)
 8007006:	fba3 2302 	umull	r2, r3, r3, r2
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	011c      	lsls	r4, r3, #4
 800700e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007012:	2200      	movs	r2, #0
 8007014:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007018:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800701c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007020:	4642      	mov	r2, r8
 8007022:	464b      	mov	r3, r9
 8007024:	1891      	adds	r1, r2, r2
 8007026:	61b9      	str	r1, [r7, #24]
 8007028:	415b      	adcs	r3, r3
 800702a:	61fb      	str	r3, [r7, #28]
 800702c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007030:	4641      	mov	r1, r8
 8007032:	1851      	adds	r1, r2, r1
 8007034:	6139      	str	r1, [r7, #16]
 8007036:	4649      	mov	r1, r9
 8007038:	414b      	adcs	r3, r1
 800703a:	617b      	str	r3, [r7, #20]
 800703c:	f04f 0200 	mov.w	r2, #0
 8007040:	f04f 0300 	mov.w	r3, #0
 8007044:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007048:	4659      	mov	r1, fp
 800704a:	00cb      	lsls	r3, r1, #3
 800704c:	4651      	mov	r1, sl
 800704e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007052:	4651      	mov	r1, sl
 8007054:	00ca      	lsls	r2, r1, #3
 8007056:	4610      	mov	r0, r2
 8007058:	4619      	mov	r1, r3
 800705a:	4603      	mov	r3, r0
 800705c:	4642      	mov	r2, r8
 800705e:	189b      	adds	r3, r3, r2
 8007060:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007064:	464b      	mov	r3, r9
 8007066:	460a      	mov	r2, r1
 8007068:	eb42 0303 	adc.w	r3, r2, r3
 800706c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	67bb      	str	r3, [r7, #120]	; 0x78
 800707a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800707c:	f04f 0200 	mov.w	r2, #0
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007088:	4649      	mov	r1, r9
 800708a:	008b      	lsls	r3, r1, #2
 800708c:	4641      	mov	r1, r8
 800708e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007092:	4641      	mov	r1, r8
 8007094:	008a      	lsls	r2, r1, #2
 8007096:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800709a:	f7f9 fdf5 	bl	8000c88 <__aeabi_uldivmod>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	4b39      	ldr	r3, [pc, #228]	; (8007188 <UART_SetConfig+0x4e4>)
 80070a4:	fba3 1302 	umull	r1, r3, r3, r2
 80070a8:	095b      	lsrs	r3, r3, #5
 80070aa:	2164      	movs	r1, #100	; 0x64
 80070ac:	fb01 f303 	mul.w	r3, r1, r3
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	011b      	lsls	r3, r3, #4
 80070b4:	3332      	adds	r3, #50	; 0x32
 80070b6:	4a34      	ldr	r2, [pc, #208]	; (8007188 <UART_SetConfig+0x4e4>)
 80070b8:	fba2 2303 	umull	r2, r3, r2, r3
 80070bc:	095b      	lsrs	r3, r3, #5
 80070be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070c2:	441c      	add	r4, r3
 80070c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80070c8:	2200      	movs	r2, #0
 80070ca:	673b      	str	r3, [r7, #112]	; 0x70
 80070cc:	677a      	str	r2, [r7, #116]	; 0x74
 80070ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80070d2:	4642      	mov	r2, r8
 80070d4:	464b      	mov	r3, r9
 80070d6:	1891      	adds	r1, r2, r2
 80070d8:	60b9      	str	r1, [r7, #8]
 80070da:	415b      	adcs	r3, r3
 80070dc:	60fb      	str	r3, [r7, #12]
 80070de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070e2:	4641      	mov	r1, r8
 80070e4:	1851      	adds	r1, r2, r1
 80070e6:	6039      	str	r1, [r7, #0]
 80070e8:	4649      	mov	r1, r9
 80070ea:	414b      	adcs	r3, r1
 80070ec:	607b      	str	r3, [r7, #4]
 80070ee:	f04f 0200 	mov.w	r2, #0
 80070f2:	f04f 0300 	mov.w	r3, #0
 80070f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070fa:	4659      	mov	r1, fp
 80070fc:	00cb      	lsls	r3, r1, #3
 80070fe:	4651      	mov	r1, sl
 8007100:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007104:	4651      	mov	r1, sl
 8007106:	00ca      	lsls	r2, r1, #3
 8007108:	4610      	mov	r0, r2
 800710a:	4619      	mov	r1, r3
 800710c:	4603      	mov	r3, r0
 800710e:	4642      	mov	r2, r8
 8007110:	189b      	adds	r3, r3, r2
 8007112:	66bb      	str	r3, [r7, #104]	; 0x68
 8007114:	464b      	mov	r3, r9
 8007116:	460a      	mov	r2, r1
 8007118:	eb42 0303 	adc.w	r3, r2, r3
 800711c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800711e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	663b      	str	r3, [r7, #96]	; 0x60
 8007128:	667a      	str	r2, [r7, #100]	; 0x64
 800712a:	f04f 0200 	mov.w	r2, #0
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007136:	4649      	mov	r1, r9
 8007138:	008b      	lsls	r3, r1, #2
 800713a:	4641      	mov	r1, r8
 800713c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007140:	4641      	mov	r1, r8
 8007142:	008a      	lsls	r2, r1, #2
 8007144:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007148:	f7f9 fd9e 	bl	8000c88 <__aeabi_uldivmod>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4b0d      	ldr	r3, [pc, #52]	; (8007188 <UART_SetConfig+0x4e4>)
 8007152:	fba3 1302 	umull	r1, r3, r3, r2
 8007156:	095b      	lsrs	r3, r3, #5
 8007158:	2164      	movs	r1, #100	; 0x64
 800715a:	fb01 f303 	mul.w	r3, r1, r3
 800715e:	1ad3      	subs	r3, r2, r3
 8007160:	011b      	lsls	r3, r3, #4
 8007162:	3332      	adds	r3, #50	; 0x32
 8007164:	4a08      	ldr	r2, [pc, #32]	; (8007188 <UART_SetConfig+0x4e4>)
 8007166:	fba2 2303 	umull	r2, r3, r2, r3
 800716a:	095b      	lsrs	r3, r3, #5
 800716c:	f003 020f 	and.w	r2, r3, #15
 8007170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4422      	add	r2, r4
 8007178:	609a      	str	r2, [r3, #8]
}
 800717a:	bf00      	nop
 800717c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007180:	46bd      	mov	sp, r7
 8007182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007186:	bf00      	nop
 8007188:	51eb851f 	.word	0x51eb851f

0800718c <__libc_init_array>:
 800718c:	b570      	push	{r4, r5, r6, lr}
 800718e:	4d0d      	ldr	r5, [pc, #52]	; (80071c4 <__libc_init_array+0x38>)
 8007190:	4c0d      	ldr	r4, [pc, #52]	; (80071c8 <__libc_init_array+0x3c>)
 8007192:	1b64      	subs	r4, r4, r5
 8007194:	10a4      	asrs	r4, r4, #2
 8007196:	2600      	movs	r6, #0
 8007198:	42a6      	cmp	r6, r4
 800719a:	d109      	bne.n	80071b0 <__libc_init_array+0x24>
 800719c:	4d0b      	ldr	r5, [pc, #44]	; (80071cc <__libc_init_array+0x40>)
 800719e:	4c0c      	ldr	r4, [pc, #48]	; (80071d0 <__libc_init_array+0x44>)
 80071a0:	f004 f9a4 	bl	800b4ec <_init>
 80071a4:	1b64      	subs	r4, r4, r5
 80071a6:	10a4      	asrs	r4, r4, #2
 80071a8:	2600      	movs	r6, #0
 80071aa:	42a6      	cmp	r6, r4
 80071ac:	d105      	bne.n	80071ba <__libc_init_array+0x2e>
 80071ae:	bd70      	pop	{r4, r5, r6, pc}
 80071b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b4:	4798      	blx	r3
 80071b6:	3601      	adds	r6, #1
 80071b8:	e7ee      	b.n	8007198 <__libc_init_array+0xc>
 80071ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80071be:	4798      	blx	r3
 80071c0:	3601      	adds	r6, #1
 80071c2:	e7f2      	b.n	80071aa <__libc_init_array+0x1e>
 80071c4:	0800bb60 	.word	0x0800bb60
 80071c8:	0800bb60 	.word	0x0800bb60
 80071cc:	0800bb60 	.word	0x0800bb60
 80071d0:	0800bb64 	.word	0x0800bb64

080071d4 <memcpy>:
 80071d4:	440a      	add	r2, r1
 80071d6:	4291      	cmp	r1, r2
 80071d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80071dc:	d100      	bne.n	80071e0 <memcpy+0xc>
 80071de:	4770      	bx	lr
 80071e0:	b510      	push	{r4, lr}
 80071e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071ea:	4291      	cmp	r1, r2
 80071ec:	d1f9      	bne.n	80071e2 <memcpy+0xe>
 80071ee:	bd10      	pop	{r4, pc}

080071f0 <memset>:
 80071f0:	4402      	add	r2, r0
 80071f2:	4603      	mov	r3, r0
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d100      	bne.n	80071fa <memset+0xa>
 80071f8:	4770      	bx	lr
 80071fa:	f803 1b01 	strb.w	r1, [r3], #1
 80071fe:	e7f9      	b.n	80071f4 <memset+0x4>

08007200 <__cvt>:
 8007200:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007204:	ec55 4b10 	vmov	r4, r5, d0
 8007208:	2d00      	cmp	r5, #0
 800720a:	460e      	mov	r6, r1
 800720c:	4619      	mov	r1, r3
 800720e:	462b      	mov	r3, r5
 8007210:	bfbb      	ittet	lt
 8007212:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007216:	461d      	movlt	r5, r3
 8007218:	2300      	movge	r3, #0
 800721a:	232d      	movlt	r3, #45	; 0x2d
 800721c:	700b      	strb	r3, [r1, #0]
 800721e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007220:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007224:	4691      	mov	r9, r2
 8007226:	f023 0820 	bic.w	r8, r3, #32
 800722a:	bfbc      	itt	lt
 800722c:	4622      	movlt	r2, r4
 800722e:	4614      	movlt	r4, r2
 8007230:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007234:	d005      	beq.n	8007242 <__cvt+0x42>
 8007236:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800723a:	d100      	bne.n	800723e <__cvt+0x3e>
 800723c:	3601      	adds	r6, #1
 800723e:	2102      	movs	r1, #2
 8007240:	e000      	b.n	8007244 <__cvt+0x44>
 8007242:	2103      	movs	r1, #3
 8007244:	ab03      	add	r3, sp, #12
 8007246:	9301      	str	r3, [sp, #4]
 8007248:	ab02      	add	r3, sp, #8
 800724a:	9300      	str	r3, [sp, #0]
 800724c:	ec45 4b10 	vmov	d0, r4, r5
 8007250:	4653      	mov	r3, sl
 8007252:	4632      	mov	r2, r6
 8007254:	f000 fcec 	bl	8007c30 <_dtoa_r>
 8007258:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800725c:	4607      	mov	r7, r0
 800725e:	d102      	bne.n	8007266 <__cvt+0x66>
 8007260:	f019 0f01 	tst.w	r9, #1
 8007264:	d022      	beq.n	80072ac <__cvt+0xac>
 8007266:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800726a:	eb07 0906 	add.w	r9, r7, r6
 800726e:	d110      	bne.n	8007292 <__cvt+0x92>
 8007270:	783b      	ldrb	r3, [r7, #0]
 8007272:	2b30      	cmp	r3, #48	; 0x30
 8007274:	d10a      	bne.n	800728c <__cvt+0x8c>
 8007276:	2200      	movs	r2, #0
 8007278:	2300      	movs	r3, #0
 800727a:	4620      	mov	r0, r4
 800727c:	4629      	mov	r1, r5
 800727e:	f7f9 fc43 	bl	8000b08 <__aeabi_dcmpeq>
 8007282:	b918      	cbnz	r0, 800728c <__cvt+0x8c>
 8007284:	f1c6 0601 	rsb	r6, r6, #1
 8007288:	f8ca 6000 	str.w	r6, [sl]
 800728c:	f8da 3000 	ldr.w	r3, [sl]
 8007290:	4499      	add	r9, r3
 8007292:	2200      	movs	r2, #0
 8007294:	2300      	movs	r3, #0
 8007296:	4620      	mov	r0, r4
 8007298:	4629      	mov	r1, r5
 800729a:	f7f9 fc35 	bl	8000b08 <__aeabi_dcmpeq>
 800729e:	b108      	cbz	r0, 80072a4 <__cvt+0xa4>
 80072a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80072a4:	2230      	movs	r2, #48	; 0x30
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	454b      	cmp	r3, r9
 80072aa:	d307      	bcc.n	80072bc <__cvt+0xbc>
 80072ac:	9b03      	ldr	r3, [sp, #12]
 80072ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072b0:	1bdb      	subs	r3, r3, r7
 80072b2:	4638      	mov	r0, r7
 80072b4:	6013      	str	r3, [r2, #0]
 80072b6:	b004      	add	sp, #16
 80072b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072bc:	1c59      	adds	r1, r3, #1
 80072be:	9103      	str	r1, [sp, #12]
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	e7f0      	b.n	80072a6 <__cvt+0xa6>

080072c4 <__exponent>:
 80072c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072c6:	4603      	mov	r3, r0
 80072c8:	2900      	cmp	r1, #0
 80072ca:	bfb8      	it	lt
 80072cc:	4249      	neglt	r1, r1
 80072ce:	f803 2b02 	strb.w	r2, [r3], #2
 80072d2:	bfb4      	ite	lt
 80072d4:	222d      	movlt	r2, #45	; 0x2d
 80072d6:	222b      	movge	r2, #43	; 0x2b
 80072d8:	2909      	cmp	r1, #9
 80072da:	7042      	strb	r2, [r0, #1]
 80072dc:	dd2a      	ble.n	8007334 <__exponent+0x70>
 80072de:	f10d 0407 	add.w	r4, sp, #7
 80072e2:	46a4      	mov	ip, r4
 80072e4:	270a      	movs	r7, #10
 80072e6:	46a6      	mov	lr, r4
 80072e8:	460a      	mov	r2, r1
 80072ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80072ee:	fb07 1516 	mls	r5, r7, r6, r1
 80072f2:	3530      	adds	r5, #48	; 0x30
 80072f4:	2a63      	cmp	r2, #99	; 0x63
 80072f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80072fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80072fe:	4631      	mov	r1, r6
 8007300:	dcf1      	bgt.n	80072e6 <__exponent+0x22>
 8007302:	3130      	adds	r1, #48	; 0x30
 8007304:	f1ae 0502 	sub.w	r5, lr, #2
 8007308:	f804 1c01 	strb.w	r1, [r4, #-1]
 800730c:	1c44      	adds	r4, r0, #1
 800730e:	4629      	mov	r1, r5
 8007310:	4561      	cmp	r1, ip
 8007312:	d30a      	bcc.n	800732a <__exponent+0x66>
 8007314:	f10d 0209 	add.w	r2, sp, #9
 8007318:	eba2 020e 	sub.w	r2, r2, lr
 800731c:	4565      	cmp	r5, ip
 800731e:	bf88      	it	hi
 8007320:	2200      	movhi	r2, #0
 8007322:	4413      	add	r3, r2
 8007324:	1a18      	subs	r0, r3, r0
 8007326:	b003      	add	sp, #12
 8007328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800732a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800732e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007332:	e7ed      	b.n	8007310 <__exponent+0x4c>
 8007334:	2330      	movs	r3, #48	; 0x30
 8007336:	3130      	adds	r1, #48	; 0x30
 8007338:	7083      	strb	r3, [r0, #2]
 800733a:	70c1      	strb	r1, [r0, #3]
 800733c:	1d03      	adds	r3, r0, #4
 800733e:	e7f1      	b.n	8007324 <__exponent+0x60>

08007340 <_printf_float>:
 8007340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	ed2d 8b02 	vpush	{d8}
 8007348:	b08d      	sub	sp, #52	; 0x34
 800734a:	460c      	mov	r4, r1
 800734c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007350:	4616      	mov	r6, r2
 8007352:	461f      	mov	r7, r3
 8007354:	4605      	mov	r5, r0
 8007356:	f001 fa59 	bl	800880c <_localeconv_r>
 800735a:	f8d0 a000 	ldr.w	sl, [r0]
 800735e:	4650      	mov	r0, sl
 8007360:	f7f8 ff56 	bl	8000210 <strlen>
 8007364:	2300      	movs	r3, #0
 8007366:	930a      	str	r3, [sp, #40]	; 0x28
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	9305      	str	r3, [sp, #20]
 800736c:	f8d8 3000 	ldr.w	r3, [r8]
 8007370:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007374:	3307      	adds	r3, #7
 8007376:	f023 0307 	bic.w	r3, r3, #7
 800737a:	f103 0208 	add.w	r2, r3, #8
 800737e:	f8c8 2000 	str.w	r2, [r8]
 8007382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007386:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800738a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800738e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007392:	9307      	str	r3, [sp, #28]
 8007394:	f8cd 8018 	str.w	r8, [sp, #24]
 8007398:	ee08 0a10 	vmov	s16, r0
 800739c:	4b9f      	ldr	r3, [pc, #636]	; (800761c <_printf_float+0x2dc>)
 800739e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073a2:	f04f 32ff 	mov.w	r2, #4294967295
 80073a6:	f7f9 fbe1 	bl	8000b6c <__aeabi_dcmpun>
 80073aa:	bb88      	cbnz	r0, 8007410 <_printf_float+0xd0>
 80073ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073b0:	4b9a      	ldr	r3, [pc, #616]	; (800761c <_printf_float+0x2dc>)
 80073b2:	f04f 32ff 	mov.w	r2, #4294967295
 80073b6:	f7f9 fbbb 	bl	8000b30 <__aeabi_dcmple>
 80073ba:	bb48      	cbnz	r0, 8007410 <_printf_float+0xd0>
 80073bc:	2200      	movs	r2, #0
 80073be:	2300      	movs	r3, #0
 80073c0:	4640      	mov	r0, r8
 80073c2:	4649      	mov	r1, r9
 80073c4:	f7f9 fbaa 	bl	8000b1c <__aeabi_dcmplt>
 80073c8:	b110      	cbz	r0, 80073d0 <_printf_float+0x90>
 80073ca:	232d      	movs	r3, #45	; 0x2d
 80073cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d0:	4b93      	ldr	r3, [pc, #588]	; (8007620 <_printf_float+0x2e0>)
 80073d2:	4894      	ldr	r0, [pc, #592]	; (8007624 <_printf_float+0x2e4>)
 80073d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80073d8:	bf94      	ite	ls
 80073da:	4698      	movls	r8, r3
 80073dc:	4680      	movhi	r8, r0
 80073de:	2303      	movs	r3, #3
 80073e0:	6123      	str	r3, [r4, #16]
 80073e2:	9b05      	ldr	r3, [sp, #20]
 80073e4:	f023 0204 	bic.w	r2, r3, #4
 80073e8:	6022      	str	r2, [r4, #0]
 80073ea:	f04f 0900 	mov.w	r9, #0
 80073ee:	9700      	str	r7, [sp, #0]
 80073f0:	4633      	mov	r3, r6
 80073f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80073f4:	4621      	mov	r1, r4
 80073f6:	4628      	mov	r0, r5
 80073f8:	f000 f9d8 	bl	80077ac <_printf_common>
 80073fc:	3001      	adds	r0, #1
 80073fe:	f040 8090 	bne.w	8007522 <_printf_float+0x1e2>
 8007402:	f04f 30ff 	mov.w	r0, #4294967295
 8007406:	b00d      	add	sp, #52	; 0x34
 8007408:	ecbd 8b02 	vpop	{d8}
 800740c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007410:	4642      	mov	r2, r8
 8007412:	464b      	mov	r3, r9
 8007414:	4640      	mov	r0, r8
 8007416:	4649      	mov	r1, r9
 8007418:	f7f9 fba8 	bl	8000b6c <__aeabi_dcmpun>
 800741c:	b140      	cbz	r0, 8007430 <_printf_float+0xf0>
 800741e:	464b      	mov	r3, r9
 8007420:	2b00      	cmp	r3, #0
 8007422:	bfbc      	itt	lt
 8007424:	232d      	movlt	r3, #45	; 0x2d
 8007426:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800742a:	487f      	ldr	r0, [pc, #508]	; (8007628 <_printf_float+0x2e8>)
 800742c:	4b7f      	ldr	r3, [pc, #508]	; (800762c <_printf_float+0x2ec>)
 800742e:	e7d1      	b.n	80073d4 <_printf_float+0x94>
 8007430:	6863      	ldr	r3, [r4, #4]
 8007432:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007436:	9206      	str	r2, [sp, #24]
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	d13f      	bne.n	80074bc <_printf_float+0x17c>
 800743c:	2306      	movs	r3, #6
 800743e:	6063      	str	r3, [r4, #4]
 8007440:	9b05      	ldr	r3, [sp, #20]
 8007442:	6861      	ldr	r1, [r4, #4]
 8007444:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007448:	2300      	movs	r3, #0
 800744a:	9303      	str	r3, [sp, #12]
 800744c:	ab0a      	add	r3, sp, #40	; 0x28
 800744e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007452:	ab09      	add	r3, sp, #36	; 0x24
 8007454:	ec49 8b10 	vmov	d0, r8, r9
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	6022      	str	r2, [r4, #0]
 800745c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007460:	4628      	mov	r0, r5
 8007462:	f7ff fecd 	bl	8007200 <__cvt>
 8007466:	9b06      	ldr	r3, [sp, #24]
 8007468:	9909      	ldr	r1, [sp, #36]	; 0x24
 800746a:	2b47      	cmp	r3, #71	; 0x47
 800746c:	4680      	mov	r8, r0
 800746e:	d108      	bne.n	8007482 <_printf_float+0x142>
 8007470:	1cc8      	adds	r0, r1, #3
 8007472:	db02      	blt.n	800747a <_printf_float+0x13a>
 8007474:	6863      	ldr	r3, [r4, #4]
 8007476:	4299      	cmp	r1, r3
 8007478:	dd41      	ble.n	80074fe <_printf_float+0x1be>
 800747a:	f1ab 0b02 	sub.w	fp, fp, #2
 800747e:	fa5f fb8b 	uxtb.w	fp, fp
 8007482:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007486:	d820      	bhi.n	80074ca <_printf_float+0x18a>
 8007488:	3901      	subs	r1, #1
 800748a:	465a      	mov	r2, fp
 800748c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007490:	9109      	str	r1, [sp, #36]	; 0x24
 8007492:	f7ff ff17 	bl	80072c4 <__exponent>
 8007496:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007498:	1813      	adds	r3, r2, r0
 800749a:	2a01      	cmp	r2, #1
 800749c:	4681      	mov	r9, r0
 800749e:	6123      	str	r3, [r4, #16]
 80074a0:	dc02      	bgt.n	80074a8 <_printf_float+0x168>
 80074a2:	6822      	ldr	r2, [r4, #0]
 80074a4:	07d2      	lsls	r2, r2, #31
 80074a6:	d501      	bpl.n	80074ac <_printf_float+0x16c>
 80074a8:	3301      	adds	r3, #1
 80074aa:	6123      	str	r3, [r4, #16]
 80074ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d09c      	beq.n	80073ee <_printf_float+0xae>
 80074b4:	232d      	movs	r3, #45	; 0x2d
 80074b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ba:	e798      	b.n	80073ee <_printf_float+0xae>
 80074bc:	9a06      	ldr	r2, [sp, #24]
 80074be:	2a47      	cmp	r2, #71	; 0x47
 80074c0:	d1be      	bne.n	8007440 <_printf_float+0x100>
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d1bc      	bne.n	8007440 <_printf_float+0x100>
 80074c6:	2301      	movs	r3, #1
 80074c8:	e7b9      	b.n	800743e <_printf_float+0xfe>
 80074ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80074ce:	d118      	bne.n	8007502 <_printf_float+0x1c2>
 80074d0:	2900      	cmp	r1, #0
 80074d2:	6863      	ldr	r3, [r4, #4]
 80074d4:	dd0b      	ble.n	80074ee <_printf_float+0x1ae>
 80074d6:	6121      	str	r1, [r4, #16]
 80074d8:	b913      	cbnz	r3, 80074e0 <_printf_float+0x1a0>
 80074da:	6822      	ldr	r2, [r4, #0]
 80074dc:	07d0      	lsls	r0, r2, #31
 80074de:	d502      	bpl.n	80074e6 <_printf_float+0x1a6>
 80074e0:	3301      	adds	r3, #1
 80074e2:	440b      	add	r3, r1
 80074e4:	6123      	str	r3, [r4, #16]
 80074e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80074e8:	f04f 0900 	mov.w	r9, #0
 80074ec:	e7de      	b.n	80074ac <_printf_float+0x16c>
 80074ee:	b913      	cbnz	r3, 80074f6 <_printf_float+0x1b6>
 80074f0:	6822      	ldr	r2, [r4, #0]
 80074f2:	07d2      	lsls	r2, r2, #31
 80074f4:	d501      	bpl.n	80074fa <_printf_float+0x1ba>
 80074f6:	3302      	adds	r3, #2
 80074f8:	e7f4      	b.n	80074e4 <_printf_float+0x1a4>
 80074fa:	2301      	movs	r3, #1
 80074fc:	e7f2      	b.n	80074e4 <_printf_float+0x1a4>
 80074fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007502:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007504:	4299      	cmp	r1, r3
 8007506:	db05      	blt.n	8007514 <_printf_float+0x1d4>
 8007508:	6823      	ldr	r3, [r4, #0]
 800750a:	6121      	str	r1, [r4, #16]
 800750c:	07d8      	lsls	r0, r3, #31
 800750e:	d5ea      	bpl.n	80074e6 <_printf_float+0x1a6>
 8007510:	1c4b      	adds	r3, r1, #1
 8007512:	e7e7      	b.n	80074e4 <_printf_float+0x1a4>
 8007514:	2900      	cmp	r1, #0
 8007516:	bfd4      	ite	le
 8007518:	f1c1 0202 	rsble	r2, r1, #2
 800751c:	2201      	movgt	r2, #1
 800751e:	4413      	add	r3, r2
 8007520:	e7e0      	b.n	80074e4 <_printf_float+0x1a4>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	055a      	lsls	r2, r3, #21
 8007526:	d407      	bmi.n	8007538 <_printf_float+0x1f8>
 8007528:	6923      	ldr	r3, [r4, #16]
 800752a:	4642      	mov	r2, r8
 800752c:	4631      	mov	r1, r6
 800752e:	4628      	mov	r0, r5
 8007530:	47b8      	blx	r7
 8007532:	3001      	adds	r0, #1
 8007534:	d12c      	bne.n	8007590 <_printf_float+0x250>
 8007536:	e764      	b.n	8007402 <_printf_float+0xc2>
 8007538:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800753c:	f240 80e0 	bls.w	8007700 <_printf_float+0x3c0>
 8007540:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007544:	2200      	movs	r2, #0
 8007546:	2300      	movs	r3, #0
 8007548:	f7f9 fade 	bl	8000b08 <__aeabi_dcmpeq>
 800754c:	2800      	cmp	r0, #0
 800754e:	d034      	beq.n	80075ba <_printf_float+0x27a>
 8007550:	4a37      	ldr	r2, [pc, #220]	; (8007630 <_printf_float+0x2f0>)
 8007552:	2301      	movs	r3, #1
 8007554:	4631      	mov	r1, r6
 8007556:	4628      	mov	r0, r5
 8007558:	47b8      	blx	r7
 800755a:	3001      	adds	r0, #1
 800755c:	f43f af51 	beq.w	8007402 <_printf_float+0xc2>
 8007560:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007564:	429a      	cmp	r2, r3
 8007566:	db02      	blt.n	800756e <_printf_float+0x22e>
 8007568:	6823      	ldr	r3, [r4, #0]
 800756a:	07d8      	lsls	r0, r3, #31
 800756c:	d510      	bpl.n	8007590 <_printf_float+0x250>
 800756e:	ee18 3a10 	vmov	r3, s16
 8007572:	4652      	mov	r2, sl
 8007574:	4631      	mov	r1, r6
 8007576:	4628      	mov	r0, r5
 8007578:	47b8      	blx	r7
 800757a:	3001      	adds	r0, #1
 800757c:	f43f af41 	beq.w	8007402 <_printf_float+0xc2>
 8007580:	f04f 0800 	mov.w	r8, #0
 8007584:	f104 091a 	add.w	r9, r4, #26
 8007588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800758a:	3b01      	subs	r3, #1
 800758c:	4543      	cmp	r3, r8
 800758e:	dc09      	bgt.n	80075a4 <_printf_float+0x264>
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	079b      	lsls	r3, r3, #30
 8007594:	f100 8105 	bmi.w	80077a2 <_printf_float+0x462>
 8007598:	68e0      	ldr	r0, [r4, #12]
 800759a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800759c:	4298      	cmp	r0, r3
 800759e:	bfb8      	it	lt
 80075a0:	4618      	movlt	r0, r3
 80075a2:	e730      	b.n	8007406 <_printf_float+0xc6>
 80075a4:	2301      	movs	r3, #1
 80075a6:	464a      	mov	r2, r9
 80075a8:	4631      	mov	r1, r6
 80075aa:	4628      	mov	r0, r5
 80075ac:	47b8      	blx	r7
 80075ae:	3001      	adds	r0, #1
 80075b0:	f43f af27 	beq.w	8007402 <_printf_float+0xc2>
 80075b4:	f108 0801 	add.w	r8, r8, #1
 80075b8:	e7e6      	b.n	8007588 <_printf_float+0x248>
 80075ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075bc:	2b00      	cmp	r3, #0
 80075be:	dc39      	bgt.n	8007634 <_printf_float+0x2f4>
 80075c0:	4a1b      	ldr	r2, [pc, #108]	; (8007630 <_printf_float+0x2f0>)
 80075c2:	2301      	movs	r3, #1
 80075c4:	4631      	mov	r1, r6
 80075c6:	4628      	mov	r0, r5
 80075c8:	47b8      	blx	r7
 80075ca:	3001      	adds	r0, #1
 80075cc:	f43f af19 	beq.w	8007402 <_printf_float+0xc2>
 80075d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075d4:	4313      	orrs	r3, r2
 80075d6:	d102      	bne.n	80075de <_printf_float+0x29e>
 80075d8:	6823      	ldr	r3, [r4, #0]
 80075da:	07d9      	lsls	r1, r3, #31
 80075dc:	d5d8      	bpl.n	8007590 <_printf_float+0x250>
 80075de:	ee18 3a10 	vmov	r3, s16
 80075e2:	4652      	mov	r2, sl
 80075e4:	4631      	mov	r1, r6
 80075e6:	4628      	mov	r0, r5
 80075e8:	47b8      	blx	r7
 80075ea:	3001      	adds	r0, #1
 80075ec:	f43f af09 	beq.w	8007402 <_printf_float+0xc2>
 80075f0:	f04f 0900 	mov.w	r9, #0
 80075f4:	f104 0a1a 	add.w	sl, r4, #26
 80075f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fa:	425b      	negs	r3, r3
 80075fc:	454b      	cmp	r3, r9
 80075fe:	dc01      	bgt.n	8007604 <_printf_float+0x2c4>
 8007600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007602:	e792      	b.n	800752a <_printf_float+0x1ea>
 8007604:	2301      	movs	r3, #1
 8007606:	4652      	mov	r2, sl
 8007608:	4631      	mov	r1, r6
 800760a:	4628      	mov	r0, r5
 800760c:	47b8      	blx	r7
 800760e:	3001      	adds	r0, #1
 8007610:	f43f aef7 	beq.w	8007402 <_printf_float+0xc2>
 8007614:	f109 0901 	add.w	r9, r9, #1
 8007618:	e7ee      	b.n	80075f8 <_printf_float+0x2b8>
 800761a:	bf00      	nop
 800761c:	7fefffff 	.word	0x7fefffff
 8007620:	0800b564 	.word	0x0800b564
 8007624:	0800b568 	.word	0x0800b568
 8007628:	0800b570 	.word	0x0800b570
 800762c:	0800b56c 	.word	0x0800b56c
 8007630:	0800b574 	.word	0x0800b574
 8007634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007636:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007638:	429a      	cmp	r2, r3
 800763a:	bfa8      	it	ge
 800763c:	461a      	movge	r2, r3
 800763e:	2a00      	cmp	r2, #0
 8007640:	4691      	mov	r9, r2
 8007642:	dc37      	bgt.n	80076b4 <_printf_float+0x374>
 8007644:	f04f 0b00 	mov.w	fp, #0
 8007648:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800764c:	f104 021a 	add.w	r2, r4, #26
 8007650:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007652:	9305      	str	r3, [sp, #20]
 8007654:	eba3 0309 	sub.w	r3, r3, r9
 8007658:	455b      	cmp	r3, fp
 800765a:	dc33      	bgt.n	80076c4 <_printf_float+0x384>
 800765c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007660:	429a      	cmp	r2, r3
 8007662:	db3b      	blt.n	80076dc <_printf_float+0x39c>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	07da      	lsls	r2, r3, #31
 8007668:	d438      	bmi.n	80076dc <_printf_float+0x39c>
 800766a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800766c:	9a05      	ldr	r2, [sp, #20]
 800766e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007670:	1a9a      	subs	r2, r3, r2
 8007672:	eba3 0901 	sub.w	r9, r3, r1
 8007676:	4591      	cmp	r9, r2
 8007678:	bfa8      	it	ge
 800767a:	4691      	movge	r9, r2
 800767c:	f1b9 0f00 	cmp.w	r9, #0
 8007680:	dc35      	bgt.n	80076ee <_printf_float+0x3ae>
 8007682:	f04f 0800 	mov.w	r8, #0
 8007686:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800768a:	f104 0a1a 	add.w	sl, r4, #26
 800768e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007692:	1a9b      	subs	r3, r3, r2
 8007694:	eba3 0309 	sub.w	r3, r3, r9
 8007698:	4543      	cmp	r3, r8
 800769a:	f77f af79 	ble.w	8007590 <_printf_float+0x250>
 800769e:	2301      	movs	r3, #1
 80076a0:	4652      	mov	r2, sl
 80076a2:	4631      	mov	r1, r6
 80076a4:	4628      	mov	r0, r5
 80076a6:	47b8      	blx	r7
 80076a8:	3001      	adds	r0, #1
 80076aa:	f43f aeaa 	beq.w	8007402 <_printf_float+0xc2>
 80076ae:	f108 0801 	add.w	r8, r8, #1
 80076b2:	e7ec      	b.n	800768e <_printf_float+0x34e>
 80076b4:	4613      	mov	r3, r2
 80076b6:	4631      	mov	r1, r6
 80076b8:	4642      	mov	r2, r8
 80076ba:	4628      	mov	r0, r5
 80076bc:	47b8      	blx	r7
 80076be:	3001      	adds	r0, #1
 80076c0:	d1c0      	bne.n	8007644 <_printf_float+0x304>
 80076c2:	e69e      	b.n	8007402 <_printf_float+0xc2>
 80076c4:	2301      	movs	r3, #1
 80076c6:	4631      	mov	r1, r6
 80076c8:	4628      	mov	r0, r5
 80076ca:	9205      	str	r2, [sp, #20]
 80076cc:	47b8      	blx	r7
 80076ce:	3001      	adds	r0, #1
 80076d0:	f43f ae97 	beq.w	8007402 <_printf_float+0xc2>
 80076d4:	9a05      	ldr	r2, [sp, #20]
 80076d6:	f10b 0b01 	add.w	fp, fp, #1
 80076da:	e7b9      	b.n	8007650 <_printf_float+0x310>
 80076dc:	ee18 3a10 	vmov	r3, s16
 80076e0:	4652      	mov	r2, sl
 80076e2:	4631      	mov	r1, r6
 80076e4:	4628      	mov	r0, r5
 80076e6:	47b8      	blx	r7
 80076e8:	3001      	adds	r0, #1
 80076ea:	d1be      	bne.n	800766a <_printf_float+0x32a>
 80076ec:	e689      	b.n	8007402 <_printf_float+0xc2>
 80076ee:	9a05      	ldr	r2, [sp, #20]
 80076f0:	464b      	mov	r3, r9
 80076f2:	4442      	add	r2, r8
 80076f4:	4631      	mov	r1, r6
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b8      	blx	r7
 80076fa:	3001      	adds	r0, #1
 80076fc:	d1c1      	bne.n	8007682 <_printf_float+0x342>
 80076fe:	e680      	b.n	8007402 <_printf_float+0xc2>
 8007700:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007702:	2a01      	cmp	r2, #1
 8007704:	dc01      	bgt.n	800770a <_printf_float+0x3ca>
 8007706:	07db      	lsls	r3, r3, #31
 8007708:	d538      	bpl.n	800777c <_printf_float+0x43c>
 800770a:	2301      	movs	r3, #1
 800770c:	4642      	mov	r2, r8
 800770e:	4631      	mov	r1, r6
 8007710:	4628      	mov	r0, r5
 8007712:	47b8      	blx	r7
 8007714:	3001      	adds	r0, #1
 8007716:	f43f ae74 	beq.w	8007402 <_printf_float+0xc2>
 800771a:	ee18 3a10 	vmov	r3, s16
 800771e:	4652      	mov	r2, sl
 8007720:	4631      	mov	r1, r6
 8007722:	4628      	mov	r0, r5
 8007724:	47b8      	blx	r7
 8007726:	3001      	adds	r0, #1
 8007728:	f43f ae6b 	beq.w	8007402 <_printf_float+0xc2>
 800772c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007730:	2200      	movs	r2, #0
 8007732:	2300      	movs	r3, #0
 8007734:	f7f9 f9e8 	bl	8000b08 <__aeabi_dcmpeq>
 8007738:	b9d8      	cbnz	r0, 8007772 <_printf_float+0x432>
 800773a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800773c:	f108 0201 	add.w	r2, r8, #1
 8007740:	3b01      	subs	r3, #1
 8007742:	4631      	mov	r1, r6
 8007744:	4628      	mov	r0, r5
 8007746:	47b8      	blx	r7
 8007748:	3001      	adds	r0, #1
 800774a:	d10e      	bne.n	800776a <_printf_float+0x42a>
 800774c:	e659      	b.n	8007402 <_printf_float+0xc2>
 800774e:	2301      	movs	r3, #1
 8007750:	4652      	mov	r2, sl
 8007752:	4631      	mov	r1, r6
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	f43f ae52 	beq.w	8007402 <_printf_float+0xc2>
 800775e:	f108 0801 	add.w	r8, r8, #1
 8007762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007764:	3b01      	subs	r3, #1
 8007766:	4543      	cmp	r3, r8
 8007768:	dcf1      	bgt.n	800774e <_printf_float+0x40e>
 800776a:	464b      	mov	r3, r9
 800776c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007770:	e6dc      	b.n	800752c <_printf_float+0x1ec>
 8007772:	f04f 0800 	mov.w	r8, #0
 8007776:	f104 0a1a 	add.w	sl, r4, #26
 800777a:	e7f2      	b.n	8007762 <_printf_float+0x422>
 800777c:	2301      	movs	r3, #1
 800777e:	4642      	mov	r2, r8
 8007780:	e7df      	b.n	8007742 <_printf_float+0x402>
 8007782:	2301      	movs	r3, #1
 8007784:	464a      	mov	r2, r9
 8007786:	4631      	mov	r1, r6
 8007788:	4628      	mov	r0, r5
 800778a:	47b8      	blx	r7
 800778c:	3001      	adds	r0, #1
 800778e:	f43f ae38 	beq.w	8007402 <_printf_float+0xc2>
 8007792:	f108 0801 	add.w	r8, r8, #1
 8007796:	68e3      	ldr	r3, [r4, #12]
 8007798:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800779a:	1a5b      	subs	r3, r3, r1
 800779c:	4543      	cmp	r3, r8
 800779e:	dcf0      	bgt.n	8007782 <_printf_float+0x442>
 80077a0:	e6fa      	b.n	8007598 <_printf_float+0x258>
 80077a2:	f04f 0800 	mov.w	r8, #0
 80077a6:	f104 0919 	add.w	r9, r4, #25
 80077aa:	e7f4      	b.n	8007796 <_printf_float+0x456>

080077ac <_printf_common>:
 80077ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b0:	4616      	mov	r6, r2
 80077b2:	4699      	mov	r9, r3
 80077b4:	688a      	ldr	r2, [r1, #8]
 80077b6:	690b      	ldr	r3, [r1, #16]
 80077b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077bc:	4293      	cmp	r3, r2
 80077be:	bfb8      	it	lt
 80077c0:	4613      	movlt	r3, r2
 80077c2:	6033      	str	r3, [r6, #0]
 80077c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077c8:	4607      	mov	r7, r0
 80077ca:	460c      	mov	r4, r1
 80077cc:	b10a      	cbz	r2, 80077d2 <_printf_common+0x26>
 80077ce:	3301      	adds	r3, #1
 80077d0:	6033      	str	r3, [r6, #0]
 80077d2:	6823      	ldr	r3, [r4, #0]
 80077d4:	0699      	lsls	r1, r3, #26
 80077d6:	bf42      	ittt	mi
 80077d8:	6833      	ldrmi	r3, [r6, #0]
 80077da:	3302      	addmi	r3, #2
 80077dc:	6033      	strmi	r3, [r6, #0]
 80077de:	6825      	ldr	r5, [r4, #0]
 80077e0:	f015 0506 	ands.w	r5, r5, #6
 80077e4:	d106      	bne.n	80077f4 <_printf_common+0x48>
 80077e6:	f104 0a19 	add.w	sl, r4, #25
 80077ea:	68e3      	ldr	r3, [r4, #12]
 80077ec:	6832      	ldr	r2, [r6, #0]
 80077ee:	1a9b      	subs	r3, r3, r2
 80077f0:	42ab      	cmp	r3, r5
 80077f2:	dc26      	bgt.n	8007842 <_printf_common+0x96>
 80077f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077f8:	1e13      	subs	r3, r2, #0
 80077fa:	6822      	ldr	r2, [r4, #0]
 80077fc:	bf18      	it	ne
 80077fe:	2301      	movne	r3, #1
 8007800:	0692      	lsls	r2, r2, #26
 8007802:	d42b      	bmi.n	800785c <_printf_common+0xb0>
 8007804:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007808:	4649      	mov	r1, r9
 800780a:	4638      	mov	r0, r7
 800780c:	47c0      	blx	r8
 800780e:	3001      	adds	r0, #1
 8007810:	d01e      	beq.n	8007850 <_printf_common+0xa4>
 8007812:	6823      	ldr	r3, [r4, #0]
 8007814:	68e5      	ldr	r5, [r4, #12]
 8007816:	6832      	ldr	r2, [r6, #0]
 8007818:	f003 0306 	and.w	r3, r3, #6
 800781c:	2b04      	cmp	r3, #4
 800781e:	bf08      	it	eq
 8007820:	1aad      	subeq	r5, r5, r2
 8007822:	68a3      	ldr	r3, [r4, #8]
 8007824:	6922      	ldr	r2, [r4, #16]
 8007826:	bf0c      	ite	eq
 8007828:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800782c:	2500      	movne	r5, #0
 800782e:	4293      	cmp	r3, r2
 8007830:	bfc4      	itt	gt
 8007832:	1a9b      	subgt	r3, r3, r2
 8007834:	18ed      	addgt	r5, r5, r3
 8007836:	2600      	movs	r6, #0
 8007838:	341a      	adds	r4, #26
 800783a:	42b5      	cmp	r5, r6
 800783c:	d11a      	bne.n	8007874 <_printf_common+0xc8>
 800783e:	2000      	movs	r0, #0
 8007840:	e008      	b.n	8007854 <_printf_common+0xa8>
 8007842:	2301      	movs	r3, #1
 8007844:	4652      	mov	r2, sl
 8007846:	4649      	mov	r1, r9
 8007848:	4638      	mov	r0, r7
 800784a:	47c0      	blx	r8
 800784c:	3001      	adds	r0, #1
 800784e:	d103      	bne.n	8007858 <_printf_common+0xac>
 8007850:	f04f 30ff 	mov.w	r0, #4294967295
 8007854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007858:	3501      	adds	r5, #1
 800785a:	e7c6      	b.n	80077ea <_printf_common+0x3e>
 800785c:	18e1      	adds	r1, r4, r3
 800785e:	1c5a      	adds	r2, r3, #1
 8007860:	2030      	movs	r0, #48	; 0x30
 8007862:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007866:	4422      	add	r2, r4
 8007868:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800786c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007870:	3302      	adds	r3, #2
 8007872:	e7c7      	b.n	8007804 <_printf_common+0x58>
 8007874:	2301      	movs	r3, #1
 8007876:	4622      	mov	r2, r4
 8007878:	4649      	mov	r1, r9
 800787a:	4638      	mov	r0, r7
 800787c:	47c0      	blx	r8
 800787e:	3001      	adds	r0, #1
 8007880:	d0e6      	beq.n	8007850 <_printf_common+0xa4>
 8007882:	3601      	adds	r6, #1
 8007884:	e7d9      	b.n	800783a <_printf_common+0x8e>
	...

08007888 <_printf_i>:
 8007888:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800788c:	7e0f      	ldrb	r7, [r1, #24]
 800788e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007890:	2f78      	cmp	r7, #120	; 0x78
 8007892:	4691      	mov	r9, r2
 8007894:	4680      	mov	r8, r0
 8007896:	460c      	mov	r4, r1
 8007898:	469a      	mov	sl, r3
 800789a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800789e:	d807      	bhi.n	80078b0 <_printf_i+0x28>
 80078a0:	2f62      	cmp	r7, #98	; 0x62
 80078a2:	d80a      	bhi.n	80078ba <_printf_i+0x32>
 80078a4:	2f00      	cmp	r7, #0
 80078a6:	f000 80d8 	beq.w	8007a5a <_printf_i+0x1d2>
 80078aa:	2f58      	cmp	r7, #88	; 0x58
 80078ac:	f000 80a3 	beq.w	80079f6 <_printf_i+0x16e>
 80078b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078b8:	e03a      	b.n	8007930 <_printf_i+0xa8>
 80078ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078be:	2b15      	cmp	r3, #21
 80078c0:	d8f6      	bhi.n	80078b0 <_printf_i+0x28>
 80078c2:	a101      	add	r1, pc, #4	; (adr r1, 80078c8 <_printf_i+0x40>)
 80078c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078c8:	08007921 	.word	0x08007921
 80078cc:	08007935 	.word	0x08007935
 80078d0:	080078b1 	.word	0x080078b1
 80078d4:	080078b1 	.word	0x080078b1
 80078d8:	080078b1 	.word	0x080078b1
 80078dc:	080078b1 	.word	0x080078b1
 80078e0:	08007935 	.word	0x08007935
 80078e4:	080078b1 	.word	0x080078b1
 80078e8:	080078b1 	.word	0x080078b1
 80078ec:	080078b1 	.word	0x080078b1
 80078f0:	080078b1 	.word	0x080078b1
 80078f4:	08007a41 	.word	0x08007a41
 80078f8:	08007965 	.word	0x08007965
 80078fc:	08007a23 	.word	0x08007a23
 8007900:	080078b1 	.word	0x080078b1
 8007904:	080078b1 	.word	0x080078b1
 8007908:	08007a63 	.word	0x08007a63
 800790c:	080078b1 	.word	0x080078b1
 8007910:	08007965 	.word	0x08007965
 8007914:	080078b1 	.word	0x080078b1
 8007918:	080078b1 	.word	0x080078b1
 800791c:	08007a2b 	.word	0x08007a2b
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	1d1a      	adds	r2, r3, #4
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	602a      	str	r2, [r5, #0]
 8007928:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800792c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007930:	2301      	movs	r3, #1
 8007932:	e0a3      	b.n	8007a7c <_printf_i+0x1f4>
 8007934:	6820      	ldr	r0, [r4, #0]
 8007936:	6829      	ldr	r1, [r5, #0]
 8007938:	0606      	lsls	r6, r0, #24
 800793a:	f101 0304 	add.w	r3, r1, #4
 800793e:	d50a      	bpl.n	8007956 <_printf_i+0xce>
 8007940:	680e      	ldr	r6, [r1, #0]
 8007942:	602b      	str	r3, [r5, #0]
 8007944:	2e00      	cmp	r6, #0
 8007946:	da03      	bge.n	8007950 <_printf_i+0xc8>
 8007948:	232d      	movs	r3, #45	; 0x2d
 800794a:	4276      	negs	r6, r6
 800794c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007950:	485e      	ldr	r0, [pc, #376]	; (8007acc <_printf_i+0x244>)
 8007952:	230a      	movs	r3, #10
 8007954:	e019      	b.n	800798a <_printf_i+0x102>
 8007956:	680e      	ldr	r6, [r1, #0]
 8007958:	602b      	str	r3, [r5, #0]
 800795a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800795e:	bf18      	it	ne
 8007960:	b236      	sxthne	r6, r6
 8007962:	e7ef      	b.n	8007944 <_printf_i+0xbc>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	6820      	ldr	r0, [r4, #0]
 8007968:	1d19      	adds	r1, r3, #4
 800796a:	6029      	str	r1, [r5, #0]
 800796c:	0601      	lsls	r1, r0, #24
 800796e:	d501      	bpl.n	8007974 <_printf_i+0xec>
 8007970:	681e      	ldr	r6, [r3, #0]
 8007972:	e002      	b.n	800797a <_printf_i+0xf2>
 8007974:	0646      	lsls	r6, r0, #25
 8007976:	d5fb      	bpl.n	8007970 <_printf_i+0xe8>
 8007978:	881e      	ldrh	r6, [r3, #0]
 800797a:	4854      	ldr	r0, [pc, #336]	; (8007acc <_printf_i+0x244>)
 800797c:	2f6f      	cmp	r7, #111	; 0x6f
 800797e:	bf0c      	ite	eq
 8007980:	2308      	moveq	r3, #8
 8007982:	230a      	movne	r3, #10
 8007984:	2100      	movs	r1, #0
 8007986:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800798a:	6865      	ldr	r5, [r4, #4]
 800798c:	60a5      	str	r5, [r4, #8]
 800798e:	2d00      	cmp	r5, #0
 8007990:	bfa2      	ittt	ge
 8007992:	6821      	ldrge	r1, [r4, #0]
 8007994:	f021 0104 	bicge.w	r1, r1, #4
 8007998:	6021      	strge	r1, [r4, #0]
 800799a:	b90e      	cbnz	r6, 80079a0 <_printf_i+0x118>
 800799c:	2d00      	cmp	r5, #0
 800799e:	d04d      	beq.n	8007a3c <_printf_i+0x1b4>
 80079a0:	4615      	mov	r5, r2
 80079a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80079a6:	fb03 6711 	mls	r7, r3, r1, r6
 80079aa:	5dc7      	ldrb	r7, [r0, r7]
 80079ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079b0:	4637      	mov	r7, r6
 80079b2:	42bb      	cmp	r3, r7
 80079b4:	460e      	mov	r6, r1
 80079b6:	d9f4      	bls.n	80079a2 <_printf_i+0x11a>
 80079b8:	2b08      	cmp	r3, #8
 80079ba:	d10b      	bne.n	80079d4 <_printf_i+0x14c>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	07de      	lsls	r6, r3, #31
 80079c0:	d508      	bpl.n	80079d4 <_printf_i+0x14c>
 80079c2:	6923      	ldr	r3, [r4, #16]
 80079c4:	6861      	ldr	r1, [r4, #4]
 80079c6:	4299      	cmp	r1, r3
 80079c8:	bfde      	ittt	le
 80079ca:	2330      	movle	r3, #48	; 0x30
 80079cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079d4:	1b52      	subs	r2, r2, r5
 80079d6:	6122      	str	r2, [r4, #16]
 80079d8:	f8cd a000 	str.w	sl, [sp]
 80079dc:	464b      	mov	r3, r9
 80079de:	aa03      	add	r2, sp, #12
 80079e0:	4621      	mov	r1, r4
 80079e2:	4640      	mov	r0, r8
 80079e4:	f7ff fee2 	bl	80077ac <_printf_common>
 80079e8:	3001      	adds	r0, #1
 80079ea:	d14c      	bne.n	8007a86 <_printf_i+0x1fe>
 80079ec:	f04f 30ff 	mov.w	r0, #4294967295
 80079f0:	b004      	add	sp, #16
 80079f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079f6:	4835      	ldr	r0, [pc, #212]	; (8007acc <_printf_i+0x244>)
 80079f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079fc:	6829      	ldr	r1, [r5, #0]
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a04:	6029      	str	r1, [r5, #0]
 8007a06:	061d      	lsls	r5, r3, #24
 8007a08:	d514      	bpl.n	8007a34 <_printf_i+0x1ac>
 8007a0a:	07df      	lsls	r7, r3, #31
 8007a0c:	bf44      	itt	mi
 8007a0e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a12:	6023      	strmi	r3, [r4, #0]
 8007a14:	b91e      	cbnz	r6, 8007a1e <_printf_i+0x196>
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	f023 0320 	bic.w	r3, r3, #32
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	2310      	movs	r3, #16
 8007a20:	e7b0      	b.n	8007984 <_printf_i+0xfc>
 8007a22:	6823      	ldr	r3, [r4, #0]
 8007a24:	f043 0320 	orr.w	r3, r3, #32
 8007a28:	6023      	str	r3, [r4, #0]
 8007a2a:	2378      	movs	r3, #120	; 0x78
 8007a2c:	4828      	ldr	r0, [pc, #160]	; (8007ad0 <_printf_i+0x248>)
 8007a2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a32:	e7e3      	b.n	80079fc <_printf_i+0x174>
 8007a34:	0659      	lsls	r1, r3, #25
 8007a36:	bf48      	it	mi
 8007a38:	b2b6      	uxthmi	r6, r6
 8007a3a:	e7e6      	b.n	8007a0a <_printf_i+0x182>
 8007a3c:	4615      	mov	r5, r2
 8007a3e:	e7bb      	b.n	80079b8 <_printf_i+0x130>
 8007a40:	682b      	ldr	r3, [r5, #0]
 8007a42:	6826      	ldr	r6, [r4, #0]
 8007a44:	6961      	ldr	r1, [r4, #20]
 8007a46:	1d18      	adds	r0, r3, #4
 8007a48:	6028      	str	r0, [r5, #0]
 8007a4a:	0635      	lsls	r5, r6, #24
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	d501      	bpl.n	8007a54 <_printf_i+0x1cc>
 8007a50:	6019      	str	r1, [r3, #0]
 8007a52:	e002      	b.n	8007a5a <_printf_i+0x1d2>
 8007a54:	0670      	lsls	r0, r6, #25
 8007a56:	d5fb      	bpl.n	8007a50 <_printf_i+0x1c8>
 8007a58:	8019      	strh	r1, [r3, #0]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	6123      	str	r3, [r4, #16]
 8007a5e:	4615      	mov	r5, r2
 8007a60:	e7ba      	b.n	80079d8 <_printf_i+0x150>
 8007a62:	682b      	ldr	r3, [r5, #0]
 8007a64:	1d1a      	adds	r2, r3, #4
 8007a66:	602a      	str	r2, [r5, #0]
 8007a68:	681d      	ldr	r5, [r3, #0]
 8007a6a:	6862      	ldr	r2, [r4, #4]
 8007a6c:	2100      	movs	r1, #0
 8007a6e:	4628      	mov	r0, r5
 8007a70:	f7f8 fbd6 	bl	8000220 <memchr>
 8007a74:	b108      	cbz	r0, 8007a7a <_printf_i+0x1f2>
 8007a76:	1b40      	subs	r0, r0, r5
 8007a78:	6060      	str	r0, [r4, #4]
 8007a7a:	6863      	ldr	r3, [r4, #4]
 8007a7c:	6123      	str	r3, [r4, #16]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a84:	e7a8      	b.n	80079d8 <_printf_i+0x150>
 8007a86:	6923      	ldr	r3, [r4, #16]
 8007a88:	462a      	mov	r2, r5
 8007a8a:	4649      	mov	r1, r9
 8007a8c:	4640      	mov	r0, r8
 8007a8e:	47d0      	blx	sl
 8007a90:	3001      	adds	r0, #1
 8007a92:	d0ab      	beq.n	80079ec <_printf_i+0x164>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	079b      	lsls	r3, r3, #30
 8007a98:	d413      	bmi.n	8007ac2 <_printf_i+0x23a>
 8007a9a:	68e0      	ldr	r0, [r4, #12]
 8007a9c:	9b03      	ldr	r3, [sp, #12]
 8007a9e:	4298      	cmp	r0, r3
 8007aa0:	bfb8      	it	lt
 8007aa2:	4618      	movlt	r0, r3
 8007aa4:	e7a4      	b.n	80079f0 <_printf_i+0x168>
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	4632      	mov	r2, r6
 8007aaa:	4649      	mov	r1, r9
 8007aac:	4640      	mov	r0, r8
 8007aae:	47d0      	blx	sl
 8007ab0:	3001      	adds	r0, #1
 8007ab2:	d09b      	beq.n	80079ec <_printf_i+0x164>
 8007ab4:	3501      	adds	r5, #1
 8007ab6:	68e3      	ldr	r3, [r4, #12]
 8007ab8:	9903      	ldr	r1, [sp, #12]
 8007aba:	1a5b      	subs	r3, r3, r1
 8007abc:	42ab      	cmp	r3, r5
 8007abe:	dcf2      	bgt.n	8007aa6 <_printf_i+0x21e>
 8007ac0:	e7eb      	b.n	8007a9a <_printf_i+0x212>
 8007ac2:	2500      	movs	r5, #0
 8007ac4:	f104 0619 	add.w	r6, r4, #25
 8007ac8:	e7f5      	b.n	8007ab6 <_printf_i+0x22e>
 8007aca:	bf00      	nop
 8007acc:	0800b576 	.word	0x0800b576
 8007ad0:	0800b587 	.word	0x0800b587

08007ad4 <siprintf>:
 8007ad4:	b40e      	push	{r1, r2, r3}
 8007ad6:	b500      	push	{lr}
 8007ad8:	b09c      	sub	sp, #112	; 0x70
 8007ada:	ab1d      	add	r3, sp, #116	; 0x74
 8007adc:	9002      	str	r0, [sp, #8]
 8007ade:	9006      	str	r0, [sp, #24]
 8007ae0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ae4:	4809      	ldr	r0, [pc, #36]	; (8007b0c <siprintf+0x38>)
 8007ae6:	9107      	str	r1, [sp, #28]
 8007ae8:	9104      	str	r1, [sp, #16]
 8007aea:	4909      	ldr	r1, [pc, #36]	; (8007b10 <siprintf+0x3c>)
 8007aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af0:	9105      	str	r1, [sp, #20]
 8007af2:	6800      	ldr	r0, [r0, #0]
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	a902      	add	r1, sp, #8
 8007af8:	f001 fb6a 	bl	80091d0 <_svfiprintf_r>
 8007afc:	9b02      	ldr	r3, [sp, #8]
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	b01c      	add	sp, #112	; 0x70
 8007b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b08:	b003      	add	sp, #12
 8007b0a:	4770      	bx	lr
 8007b0c:	20000010 	.word	0x20000010
 8007b10:	ffff0208 	.word	0xffff0208

08007b14 <quorem>:
 8007b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b18:	6903      	ldr	r3, [r0, #16]
 8007b1a:	690c      	ldr	r4, [r1, #16]
 8007b1c:	42a3      	cmp	r3, r4
 8007b1e:	4607      	mov	r7, r0
 8007b20:	f2c0 8081 	blt.w	8007c26 <quorem+0x112>
 8007b24:	3c01      	subs	r4, #1
 8007b26:	f101 0814 	add.w	r8, r1, #20
 8007b2a:	f100 0514 	add.w	r5, r0, #20
 8007b2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b32:	9301      	str	r3, [sp, #4]
 8007b34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007b38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007b44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007b48:	fbb2 f6f3 	udiv	r6, r2, r3
 8007b4c:	d331      	bcc.n	8007bb2 <quorem+0x9e>
 8007b4e:	f04f 0e00 	mov.w	lr, #0
 8007b52:	4640      	mov	r0, r8
 8007b54:	46ac      	mov	ip, r5
 8007b56:	46f2      	mov	sl, lr
 8007b58:	f850 2b04 	ldr.w	r2, [r0], #4
 8007b5c:	b293      	uxth	r3, r2
 8007b5e:	fb06 e303 	mla	r3, r6, r3, lr
 8007b62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007b66:	b29b      	uxth	r3, r3
 8007b68:	ebaa 0303 	sub.w	r3, sl, r3
 8007b6c:	f8dc a000 	ldr.w	sl, [ip]
 8007b70:	0c12      	lsrs	r2, r2, #16
 8007b72:	fa13 f38a 	uxtah	r3, r3, sl
 8007b76:	fb06 e202 	mla	r2, r6, r2, lr
 8007b7a:	9300      	str	r3, [sp, #0]
 8007b7c:	9b00      	ldr	r3, [sp, #0]
 8007b7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007b82:	b292      	uxth	r2, r2
 8007b84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007b88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007b8c:	f8bd 3000 	ldrh.w	r3, [sp]
 8007b90:	4581      	cmp	r9, r0
 8007b92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b96:	f84c 3b04 	str.w	r3, [ip], #4
 8007b9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007b9e:	d2db      	bcs.n	8007b58 <quorem+0x44>
 8007ba0:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ba4:	b92b      	cbnz	r3, 8007bb2 <quorem+0x9e>
 8007ba6:	9b01      	ldr	r3, [sp, #4]
 8007ba8:	3b04      	subs	r3, #4
 8007baa:	429d      	cmp	r5, r3
 8007bac:	461a      	mov	r2, r3
 8007bae:	d32e      	bcc.n	8007c0e <quorem+0xfa>
 8007bb0:	613c      	str	r4, [r7, #16]
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	f001 f8b8 	bl	8008d28 <__mcmp>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	db24      	blt.n	8007c06 <quorem+0xf2>
 8007bbc:	3601      	adds	r6, #1
 8007bbe:	4628      	mov	r0, r5
 8007bc0:	f04f 0c00 	mov.w	ip, #0
 8007bc4:	f858 2b04 	ldr.w	r2, [r8], #4
 8007bc8:	f8d0 e000 	ldr.w	lr, [r0]
 8007bcc:	b293      	uxth	r3, r2
 8007bce:	ebac 0303 	sub.w	r3, ip, r3
 8007bd2:	0c12      	lsrs	r2, r2, #16
 8007bd4:	fa13 f38e 	uxtah	r3, r3, lr
 8007bd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007bdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007be6:	45c1      	cmp	r9, r8
 8007be8:	f840 3b04 	str.w	r3, [r0], #4
 8007bec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007bf0:	d2e8      	bcs.n	8007bc4 <quorem+0xb0>
 8007bf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bfa:	b922      	cbnz	r2, 8007c06 <quorem+0xf2>
 8007bfc:	3b04      	subs	r3, #4
 8007bfe:	429d      	cmp	r5, r3
 8007c00:	461a      	mov	r2, r3
 8007c02:	d30a      	bcc.n	8007c1a <quorem+0x106>
 8007c04:	613c      	str	r4, [r7, #16]
 8007c06:	4630      	mov	r0, r6
 8007c08:	b003      	add	sp, #12
 8007c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0e:	6812      	ldr	r2, [r2, #0]
 8007c10:	3b04      	subs	r3, #4
 8007c12:	2a00      	cmp	r2, #0
 8007c14:	d1cc      	bne.n	8007bb0 <quorem+0x9c>
 8007c16:	3c01      	subs	r4, #1
 8007c18:	e7c7      	b.n	8007baa <quorem+0x96>
 8007c1a:	6812      	ldr	r2, [r2, #0]
 8007c1c:	3b04      	subs	r3, #4
 8007c1e:	2a00      	cmp	r2, #0
 8007c20:	d1f0      	bne.n	8007c04 <quorem+0xf0>
 8007c22:	3c01      	subs	r4, #1
 8007c24:	e7eb      	b.n	8007bfe <quorem+0xea>
 8007c26:	2000      	movs	r0, #0
 8007c28:	e7ee      	b.n	8007c08 <quorem+0xf4>
 8007c2a:	0000      	movs	r0, r0
 8007c2c:	0000      	movs	r0, r0
	...

08007c30 <_dtoa_r>:
 8007c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c34:	ed2d 8b04 	vpush	{d8-d9}
 8007c38:	ec57 6b10 	vmov	r6, r7, d0
 8007c3c:	b093      	sub	sp, #76	; 0x4c
 8007c3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007c44:	9106      	str	r1, [sp, #24]
 8007c46:	ee10 aa10 	vmov	sl, s0
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	9209      	str	r2, [sp, #36]	; 0x24
 8007c4e:	930c      	str	r3, [sp, #48]	; 0x30
 8007c50:	46bb      	mov	fp, r7
 8007c52:	b975      	cbnz	r5, 8007c72 <_dtoa_r+0x42>
 8007c54:	2010      	movs	r0, #16
 8007c56:	f000 fddd 	bl	8008814 <malloc>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	6260      	str	r0, [r4, #36]	; 0x24
 8007c5e:	b920      	cbnz	r0, 8007c6a <_dtoa_r+0x3a>
 8007c60:	4ba7      	ldr	r3, [pc, #668]	; (8007f00 <_dtoa_r+0x2d0>)
 8007c62:	21ea      	movs	r1, #234	; 0xea
 8007c64:	48a7      	ldr	r0, [pc, #668]	; (8007f04 <_dtoa_r+0x2d4>)
 8007c66:	f001 fbc3 	bl	80093f0 <__assert_func>
 8007c6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007c6e:	6005      	str	r5, [r0, #0]
 8007c70:	60c5      	str	r5, [r0, #12]
 8007c72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c74:	6819      	ldr	r1, [r3, #0]
 8007c76:	b151      	cbz	r1, 8007c8e <_dtoa_r+0x5e>
 8007c78:	685a      	ldr	r2, [r3, #4]
 8007c7a:	604a      	str	r2, [r1, #4]
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	4093      	lsls	r3, r2
 8007c80:	608b      	str	r3, [r1, #8]
 8007c82:	4620      	mov	r0, r4
 8007c84:	f000 fe0e 	bl	80088a4 <_Bfree>
 8007c88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	601a      	str	r2, [r3, #0]
 8007c8e:	1e3b      	subs	r3, r7, #0
 8007c90:	bfaa      	itet	ge
 8007c92:	2300      	movge	r3, #0
 8007c94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007c98:	f8c8 3000 	strge.w	r3, [r8]
 8007c9c:	4b9a      	ldr	r3, [pc, #616]	; (8007f08 <_dtoa_r+0x2d8>)
 8007c9e:	bfbc      	itt	lt
 8007ca0:	2201      	movlt	r2, #1
 8007ca2:	f8c8 2000 	strlt.w	r2, [r8]
 8007ca6:	ea33 030b 	bics.w	r3, r3, fp
 8007caa:	d11b      	bne.n	8007ce4 <_dtoa_r+0xb4>
 8007cac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cae:	f242 730f 	movw	r3, #9999	; 0x270f
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cb8:	4333      	orrs	r3, r6
 8007cba:	f000 8592 	beq.w	80087e2 <_dtoa_r+0xbb2>
 8007cbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007cc0:	b963      	cbnz	r3, 8007cdc <_dtoa_r+0xac>
 8007cc2:	4b92      	ldr	r3, [pc, #584]	; (8007f0c <_dtoa_r+0x2dc>)
 8007cc4:	e022      	b.n	8007d0c <_dtoa_r+0xdc>
 8007cc6:	4b92      	ldr	r3, [pc, #584]	; (8007f10 <_dtoa_r+0x2e0>)
 8007cc8:	9301      	str	r3, [sp, #4]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007cce:	6013      	str	r3, [r2, #0]
 8007cd0:	9801      	ldr	r0, [sp, #4]
 8007cd2:	b013      	add	sp, #76	; 0x4c
 8007cd4:	ecbd 8b04 	vpop	{d8-d9}
 8007cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cdc:	4b8b      	ldr	r3, [pc, #556]	; (8007f0c <_dtoa_r+0x2dc>)
 8007cde:	9301      	str	r3, [sp, #4]
 8007ce0:	3303      	adds	r3, #3
 8007ce2:	e7f3      	b.n	8007ccc <_dtoa_r+0x9c>
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	4650      	mov	r0, sl
 8007cea:	4659      	mov	r1, fp
 8007cec:	f7f8 ff0c 	bl	8000b08 <__aeabi_dcmpeq>
 8007cf0:	ec4b ab19 	vmov	d9, sl, fp
 8007cf4:	4680      	mov	r8, r0
 8007cf6:	b158      	cbz	r0, 8007d10 <_dtoa_r+0xe0>
 8007cf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	6013      	str	r3, [r2, #0]
 8007cfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 856b 	beq.w	80087dc <_dtoa_r+0xbac>
 8007d06:	4883      	ldr	r0, [pc, #524]	; (8007f14 <_dtoa_r+0x2e4>)
 8007d08:	6018      	str	r0, [r3, #0]
 8007d0a:	1e43      	subs	r3, r0, #1
 8007d0c:	9301      	str	r3, [sp, #4]
 8007d0e:	e7df      	b.n	8007cd0 <_dtoa_r+0xa0>
 8007d10:	ec4b ab10 	vmov	d0, sl, fp
 8007d14:	aa10      	add	r2, sp, #64	; 0x40
 8007d16:	a911      	add	r1, sp, #68	; 0x44
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f001 f8ab 	bl	8008e74 <__d2b>
 8007d1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007d22:	ee08 0a10 	vmov	s16, r0
 8007d26:	2d00      	cmp	r5, #0
 8007d28:	f000 8084 	beq.w	8007e34 <_dtoa_r+0x204>
 8007d2c:	ee19 3a90 	vmov	r3, s19
 8007d30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007d38:	4656      	mov	r6, sl
 8007d3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007d3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007d42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007d46:	4b74      	ldr	r3, [pc, #464]	; (8007f18 <_dtoa_r+0x2e8>)
 8007d48:	2200      	movs	r2, #0
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	4639      	mov	r1, r7
 8007d4e:	f7f8 fabb 	bl	80002c8 <__aeabi_dsub>
 8007d52:	a365      	add	r3, pc, #404	; (adr r3, 8007ee8 <_dtoa_r+0x2b8>)
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f7f8 fc6e 	bl	8000638 <__aeabi_dmul>
 8007d5c:	a364      	add	r3, pc, #400	; (adr r3, 8007ef0 <_dtoa_r+0x2c0>)
 8007d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d62:	f7f8 fab3 	bl	80002cc <__adddf3>
 8007d66:	4606      	mov	r6, r0
 8007d68:	4628      	mov	r0, r5
 8007d6a:	460f      	mov	r7, r1
 8007d6c:	f7f8 fbfa 	bl	8000564 <__aeabi_i2d>
 8007d70:	a361      	add	r3, pc, #388	; (adr r3, 8007ef8 <_dtoa_r+0x2c8>)
 8007d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d76:	f7f8 fc5f 	bl	8000638 <__aeabi_dmul>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	460b      	mov	r3, r1
 8007d7e:	4630      	mov	r0, r6
 8007d80:	4639      	mov	r1, r7
 8007d82:	f7f8 faa3 	bl	80002cc <__adddf3>
 8007d86:	4606      	mov	r6, r0
 8007d88:	460f      	mov	r7, r1
 8007d8a:	f7f8 ff05 	bl	8000b98 <__aeabi_d2iz>
 8007d8e:	2200      	movs	r2, #0
 8007d90:	9000      	str	r0, [sp, #0]
 8007d92:	2300      	movs	r3, #0
 8007d94:	4630      	mov	r0, r6
 8007d96:	4639      	mov	r1, r7
 8007d98:	f7f8 fec0 	bl	8000b1c <__aeabi_dcmplt>
 8007d9c:	b150      	cbz	r0, 8007db4 <_dtoa_r+0x184>
 8007d9e:	9800      	ldr	r0, [sp, #0]
 8007da0:	f7f8 fbe0 	bl	8000564 <__aeabi_i2d>
 8007da4:	4632      	mov	r2, r6
 8007da6:	463b      	mov	r3, r7
 8007da8:	f7f8 feae 	bl	8000b08 <__aeabi_dcmpeq>
 8007dac:	b910      	cbnz	r0, 8007db4 <_dtoa_r+0x184>
 8007dae:	9b00      	ldr	r3, [sp, #0]
 8007db0:	3b01      	subs	r3, #1
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	9b00      	ldr	r3, [sp, #0]
 8007db6:	2b16      	cmp	r3, #22
 8007db8:	d85a      	bhi.n	8007e70 <_dtoa_r+0x240>
 8007dba:	9a00      	ldr	r2, [sp, #0]
 8007dbc:	4b57      	ldr	r3, [pc, #348]	; (8007f1c <_dtoa_r+0x2ec>)
 8007dbe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc6:	ec51 0b19 	vmov	r0, r1, d9
 8007dca:	f7f8 fea7 	bl	8000b1c <__aeabi_dcmplt>
 8007dce:	2800      	cmp	r0, #0
 8007dd0:	d050      	beq.n	8007e74 <_dtoa_r+0x244>
 8007dd2:	9b00      	ldr	r3, [sp, #0]
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	2300      	movs	r3, #0
 8007dda:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007dde:	1b5d      	subs	r5, r3, r5
 8007de0:	1e6b      	subs	r3, r5, #1
 8007de2:	9305      	str	r3, [sp, #20]
 8007de4:	bf45      	ittet	mi
 8007de6:	f1c5 0301 	rsbmi	r3, r5, #1
 8007dea:	9304      	strmi	r3, [sp, #16]
 8007dec:	2300      	movpl	r3, #0
 8007dee:	2300      	movmi	r3, #0
 8007df0:	bf4c      	ite	mi
 8007df2:	9305      	strmi	r3, [sp, #20]
 8007df4:	9304      	strpl	r3, [sp, #16]
 8007df6:	9b00      	ldr	r3, [sp, #0]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	db3d      	blt.n	8007e78 <_dtoa_r+0x248>
 8007dfc:	9b05      	ldr	r3, [sp, #20]
 8007dfe:	9a00      	ldr	r2, [sp, #0]
 8007e00:	920a      	str	r2, [sp, #40]	; 0x28
 8007e02:	4413      	add	r3, r2
 8007e04:	9305      	str	r3, [sp, #20]
 8007e06:	2300      	movs	r3, #0
 8007e08:	9307      	str	r3, [sp, #28]
 8007e0a:	9b06      	ldr	r3, [sp, #24]
 8007e0c:	2b09      	cmp	r3, #9
 8007e0e:	f200 8089 	bhi.w	8007f24 <_dtoa_r+0x2f4>
 8007e12:	2b05      	cmp	r3, #5
 8007e14:	bfc4      	itt	gt
 8007e16:	3b04      	subgt	r3, #4
 8007e18:	9306      	strgt	r3, [sp, #24]
 8007e1a:	9b06      	ldr	r3, [sp, #24]
 8007e1c:	f1a3 0302 	sub.w	r3, r3, #2
 8007e20:	bfcc      	ite	gt
 8007e22:	2500      	movgt	r5, #0
 8007e24:	2501      	movle	r5, #1
 8007e26:	2b03      	cmp	r3, #3
 8007e28:	f200 8087 	bhi.w	8007f3a <_dtoa_r+0x30a>
 8007e2c:	e8df f003 	tbb	[pc, r3]
 8007e30:	59383a2d 	.word	0x59383a2d
 8007e34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007e38:	441d      	add	r5, r3
 8007e3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007e3e:	2b20      	cmp	r3, #32
 8007e40:	bfc1      	itttt	gt
 8007e42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007e46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007e4a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007e4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007e52:	bfda      	itte	le
 8007e54:	f1c3 0320 	rsble	r3, r3, #32
 8007e58:	fa06 f003 	lslle.w	r0, r6, r3
 8007e5c:	4318      	orrgt	r0, r3
 8007e5e:	f7f8 fb71 	bl	8000544 <__aeabi_ui2d>
 8007e62:	2301      	movs	r3, #1
 8007e64:	4606      	mov	r6, r0
 8007e66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007e6a:	3d01      	subs	r5, #1
 8007e6c:	930e      	str	r3, [sp, #56]	; 0x38
 8007e6e:	e76a      	b.n	8007d46 <_dtoa_r+0x116>
 8007e70:	2301      	movs	r3, #1
 8007e72:	e7b2      	b.n	8007dda <_dtoa_r+0x1aa>
 8007e74:	900b      	str	r0, [sp, #44]	; 0x2c
 8007e76:	e7b1      	b.n	8007ddc <_dtoa_r+0x1ac>
 8007e78:	9b04      	ldr	r3, [sp, #16]
 8007e7a:	9a00      	ldr	r2, [sp, #0]
 8007e7c:	1a9b      	subs	r3, r3, r2
 8007e7e:	9304      	str	r3, [sp, #16]
 8007e80:	4253      	negs	r3, r2
 8007e82:	9307      	str	r3, [sp, #28]
 8007e84:	2300      	movs	r3, #0
 8007e86:	930a      	str	r3, [sp, #40]	; 0x28
 8007e88:	e7bf      	b.n	8007e0a <_dtoa_r+0x1da>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	9308      	str	r3, [sp, #32]
 8007e8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	dc55      	bgt.n	8007f40 <_dtoa_r+0x310>
 8007e94:	2301      	movs	r3, #1
 8007e96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e9e:	e00c      	b.n	8007eba <_dtoa_r+0x28a>
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e7f3      	b.n	8007e8c <_dtoa_r+0x25c>
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ea8:	9308      	str	r3, [sp, #32]
 8007eaa:	9b00      	ldr	r3, [sp, #0]
 8007eac:	4413      	add	r3, r2
 8007eae:	9302      	str	r3, [sp, #8]
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	9303      	str	r3, [sp, #12]
 8007eb6:	bfb8      	it	lt
 8007eb8:	2301      	movlt	r3, #1
 8007eba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	6042      	str	r2, [r0, #4]
 8007ec0:	2204      	movs	r2, #4
 8007ec2:	f102 0614 	add.w	r6, r2, #20
 8007ec6:	429e      	cmp	r6, r3
 8007ec8:	6841      	ldr	r1, [r0, #4]
 8007eca:	d93d      	bls.n	8007f48 <_dtoa_r+0x318>
 8007ecc:	4620      	mov	r0, r4
 8007ece:	f000 fca9 	bl	8008824 <_Balloc>
 8007ed2:	9001      	str	r0, [sp, #4]
 8007ed4:	2800      	cmp	r0, #0
 8007ed6:	d13b      	bne.n	8007f50 <_dtoa_r+0x320>
 8007ed8:	4b11      	ldr	r3, [pc, #68]	; (8007f20 <_dtoa_r+0x2f0>)
 8007eda:	4602      	mov	r2, r0
 8007edc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007ee0:	e6c0      	b.n	8007c64 <_dtoa_r+0x34>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	e7df      	b.n	8007ea6 <_dtoa_r+0x276>
 8007ee6:	bf00      	nop
 8007ee8:	636f4361 	.word	0x636f4361
 8007eec:	3fd287a7 	.word	0x3fd287a7
 8007ef0:	8b60c8b3 	.word	0x8b60c8b3
 8007ef4:	3fc68a28 	.word	0x3fc68a28
 8007ef8:	509f79fb 	.word	0x509f79fb
 8007efc:	3fd34413 	.word	0x3fd34413
 8007f00:	0800b5a5 	.word	0x0800b5a5
 8007f04:	0800b5bc 	.word	0x0800b5bc
 8007f08:	7ff00000 	.word	0x7ff00000
 8007f0c:	0800b5a1 	.word	0x0800b5a1
 8007f10:	0800b598 	.word	0x0800b598
 8007f14:	0800b575 	.word	0x0800b575
 8007f18:	3ff80000 	.word	0x3ff80000
 8007f1c:	0800b6b0 	.word	0x0800b6b0
 8007f20:	0800b617 	.word	0x0800b617
 8007f24:	2501      	movs	r5, #1
 8007f26:	2300      	movs	r3, #0
 8007f28:	9306      	str	r3, [sp, #24]
 8007f2a:	9508      	str	r5, [sp, #32]
 8007f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f30:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f34:	2200      	movs	r2, #0
 8007f36:	2312      	movs	r3, #18
 8007f38:	e7b0      	b.n	8007e9c <_dtoa_r+0x26c>
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	9308      	str	r3, [sp, #32]
 8007f3e:	e7f5      	b.n	8007f2c <_dtoa_r+0x2fc>
 8007f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f46:	e7b8      	b.n	8007eba <_dtoa_r+0x28a>
 8007f48:	3101      	adds	r1, #1
 8007f4a:	6041      	str	r1, [r0, #4]
 8007f4c:	0052      	lsls	r2, r2, #1
 8007f4e:	e7b8      	b.n	8007ec2 <_dtoa_r+0x292>
 8007f50:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007f52:	9a01      	ldr	r2, [sp, #4]
 8007f54:	601a      	str	r2, [r3, #0]
 8007f56:	9b03      	ldr	r3, [sp, #12]
 8007f58:	2b0e      	cmp	r3, #14
 8007f5a:	f200 809d 	bhi.w	8008098 <_dtoa_r+0x468>
 8007f5e:	2d00      	cmp	r5, #0
 8007f60:	f000 809a 	beq.w	8008098 <_dtoa_r+0x468>
 8007f64:	9b00      	ldr	r3, [sp, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	dd32      	ble.n	8007fd0 <_dtoa_r+0x3a0>
 8007f6a:	4ab7      	ldr	r2, [pc, #732]	; (8008248 <_dtoa_r+0x618>)
 8007f6c:	f003 030f 	and.w	r3, r3, #15
 8007f70:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007f74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007f78:	9b00      	ldr	r3, [sp, #0]
 8007f7a:	05d8      	lsls	r0, r3, #23
 8007f7c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007f80:	d516      	bpl.n	8007fb0 <_dtoa_r+0x380>
 8007f82:	4bb2      	ldr	r3, [pc, #712]	; (800824c <_dtoa_r+0x61c>)
 8007f84:	ec51 0b19 	vmov	r0, r1, d9
 8007f88:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007f8c:	f7f8 fc7e 	bl	800088c <__aeabi_ddiv>
 8007f90:	f007 070f 	and.w	r7, r7, #15
 8007f94:	4682      	mov	sl, r0
 8007f96:	468b      	mov	fp, r1
 8007f98:	2503      	movs	r5, #3
 8007f9a:	4eac      	ldr	r6, [pc, #688]	; (800824c <_dtoa_r+0x61c>)
 8007f9c:	b957      	cbnz	r7, 8007fb4 <_dtoa_r+0x384>
 8007f9e:	4642      	mov	r2, r8
 8007fa0:	464b      	mov	r3, r9
 8007fa2:	4650      	mov	r0, sl
 8007fa4:	4659      	mov	r1, fp
 8007fa6:	f7f8 fc71 	bl	800088c <__aeabi_ddiv>
 8007faa:	4682      	mov	sl, r0
 8007fac:	468b      	mov	fp, r1
 8007fae:	e028      	b.n	8008002 <_dtoa_r+0x3d2>
 8007fb0:	2502      	movs	r5, #2
 8007fb2:	e7f2      	b.n	8007f9a <_dtoa_r+0x36a>
 8007fb4:	07f9      	lsls	r1, r7, #31
 8007fb6:	d508      	bpl.n	8007fca <_dtoa_r+0x39a>
 8007fb8:	4640      	mov	r0, r8
 8007fba:	4649      	mov	r1, r9
 8007fbc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007fc0:	f7f8 fb3a 	bl	8000638 <__aeabi_dmul>
 8007fc4:	3501      	adds	r5, #1
 8007fc6:	4680      	mov	r8, r0
 8007fc8:	4689      	mov	r9, r1
 8007fca:	107f      	asrs	r7, r7, #1
 8007fcc:	3608      	adds	r6, #8
 8007fce:	e7e5      	b.n	8007f9c <_dtoa_r+0x36c>
 8007fd0:	f000 809b 	beq.w	800810a <_dtoa_r+0x4da>
 8007fd4:	9b00      	ldr	r3, [sp, #0]
 8007fd6:	4f9d      	ldr	r7, [pc, #628]	; (800824c <_dtoa_r+0x61c>)
 8007fd8:	425e      	negs	r6, r3
 8007fda:	4b9b      	ldr	r3, [pc, #620]	; (8008248 <_dtoa_r+0x618>)
 8007fdc:	f006 020f 	and.w	r2, r6, #15
 8007fe0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe8:	ec51 0b19 	vmov	r0, r1, d9
 8007fec:	f7f8 fb24 	bl	8000638 <__aeabi_dmul>
 8007ff0:	1136      	asrs	r6, r6, #4
 8007ff2:	4682      	mov	sl, r0
 8007ff4:	468b      	mov	fp, r1
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	2502      	movs	r5, #2
 8007ffa:	2e00      	cmp	r6, #0
 8007ffc:	d17a      	bne.n	80080f4 <_dtoa_r+0x4c4>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d1d3      	bne.n	8007faa <_dtoa_r+0x37a>
 8008002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008004:	2b00      	cmp	r3, #0
 8008006:	f000 8082 	beq.w	800810e <_dtoa_r+0x4de>
 800800a:	4b91      	ldr	r3, [pc, #580]	; (8008250 <_dtoa_r+0x620>)
 800800c:	2200      	movs	r2, #0
 800800e:	4650      	mov	r0, sl
 8008010:	4659      	mov	r1, fp
 8008012:	f7f8 fd83 	bl	8000b1c <__aeabi_dcmplt>
 8008016:	2800      	cmp	r0, #0
 8008018:	d079      	beq.n	800810e <_dtoa_r+0x4de>
 800801a:	9b03      	ldr	r3, [sp, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d076      	beq.n	800810e <_dtoa_r+0x4de>
 8008020:	9b02      	ldr	r3, [sp, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	dd36      	ble.n	8008094 <_dtoa_r+0x464>
 8008026:	9b00      	ldr	r3, [sp, #0]
 8008028:	4650      	mov	r0, sl
 800802a:	4659      	mov	r1, fp
 800802c:	1e5f      	subs	r7, r3, #1
 800802e:	2200      	movs	r2, #0
 8008030:	4b88      	ldr	r3, [pc, #544]	; (8008254 <_dtoa_r+0x624>)
 8008032:	f7f8 fb01 	bl	8000638 <__aeabi_dmul>
 8008036:	9e02      	ldr	r6, [sp, #8]
 8008038:	4682      	mov	sl, r0
 800803a:	468b      	mov	fp, r1
 800803c:	3501      	adds	r5, #1
 800803e:	4628      	mov	r0, r5
 8008040:	f7f8 fa90 	bl	8000564 <__aeabi_i2d>
 8008044:	4652      	mov	r2, sl
 8008046:	465b      	mov	r3, fp
 8008048:	f7f8 faf6 	bl	8000638 <__aeabi_dmul>
 800804c:	4b82      	ldr	r3, [pc, #520]	; (8008258 <_dtoa_r+0x628>)
 800804e:	2200      	movs	r2, #0
 8008050:	f7f8 f93c 	bl	80002cc <__adddf3>
 8008054:	46d0      	mov	r8, sl
 8008056:	46d9      	mov	r9, fp
 8008058:	4682      	mov	sl, r0
 800805a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800805e:	2e00      	cmp	r6, #0
 8008060:	d158      	bne.n	8008114 <_dtoa_r+0x4e4>
 8008062:	4b7e      	ldr	r3, [pc, #504]	; (800825c <_dtoa_r+0x62c>)
 8008064:	2200      	movs	r2, #0
 8008066:	4640      	mov	r0, r8
 8008068:	4649      	mov	r1, r9
 800806a:	f7f8 f92d 	bl	80002c8 <__aeabi_dsub>
 800806e:	4652      	mov	r2, sl
 8008070:	465b      	mov	r3, fp
 8008072:	4680      	mov	r8, r0
 8008074:	4689      	mov	r9, r1
 8008076:	f7f8 fd6f 	bl	8000b58 <__aeabi_dcmpgt>
 800807a:	2800      	cmp	r0, #0
 800807c:	f040 8295 	bne.w	80085aa <_dtoa_r+0x97a>
 8008080:	4652      	mov	r2, sl
 8008082:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008086:	4640      	mov	r0, r8
 8008088:	4649      	mov	r1, r9
 800808a:	f7f8 fd47 	bl	8000b1c <__aeabi_dcmplt>
 800808e:	2800      	cmp	r0, #0
 8008090:	f040 8289 	bne.w	80085a6 <_dtoa_r+0x976>
 8008094:	ec5b ab19 	vmov	sl, fp, d9
 8008098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800809a:	2b00      	cmp	r3, #0
 800809c:	f2c0 8148 	blt.w	8008330 <_dtoa_r+0x700>
 80080a0:	9a00      	ldr	r2, [sp, #0]
 80080a2:	2a0e      	cmp	r2, #14
 80080a4:	f300 8144 	bgt.w	8008330 <_dtoa_r+0x700>
 80080a8:	4b67      	ldr	r3, [pc, #412]	; (8008248 <_dtoa_r+0x618>)
 80080aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f280 80d5 	bge.w	8008264 <_dtoa_r+0x634>
 80080ba:	9b03      	ldr	r3, [sp, #12]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f300 80d1 	bgt.w	8008264 <_dtoa_r+0x634>
 80080c2:	f040 826f 	bne.w	80085a4 <_dtoa_r+0x974>
 80080c6:	4b65      	ldr	r3, [pc, #404]	; (800825c <_dtoa_r+0x62c>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	4640      	mov	r0, r8
 80080cc:	4649      	mov	r1, r9
 80080ce:	f7f8 fab3 	bl	8000638 <__aeabi_dmul>
 80080d2:	4652      	mov	r2, sl
 80080d4:	465b      	mov	r3, fp
 80080d6:	f7f8 fd35 	bl	8000b44 <__aeabi_dcmpge>
 80080da:	9e03      	ldr	r6, [sp, #12]
 80080dc:	4637      	mov	r7, r6
 80080de:	2800      	cmp	r0, #0
 80080e0:	f040 8245 	bne.w	800856e <_dtoa_r+0x93e>
 80080e4:	9d01      	ldr	r5, [sp, #4]
 80080e6:	2331      	movs	r3, #49	; 0x31
 80080e8:	f805 3b01 	strb.w	r3, [r5], #1
 80080ec:	9b00      	ldr	r3, [sp, #0]
 80080ee:	3301      	adds	r3, #1
 80080f0:	9300      	str	r3, [sp, #0]
 80080f2:	e240      	b.n	8008576 <_dtoa_r+0x946>
 80080f4:	07f2      	lsls	r2, r6, #31
 80080f6:	d505      	bpl.n	8008104 <_dtoa_r+0x4d4>
 80080f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080fc:	f7f8 fa9c 	bl	8000638 <__aeabi_dmul>
 8008100:	3501      	adds	r5, #1
 8008102:	2301      	movs	r3, #1
 8008104:	1076      	asrs	r6, r6, #1
 8008106:	3708      	adds	r7, #8
 8008108:	e777      	b.n	8007ffa <_dtoa_r+0x3ca>
 800810a:	2502      	movs	r5, #2
 800810c:	e779      	b.n	8008002 <_dtoa_r+0x3d2>
 800810e:	9f00      	ldr	r7, [sp, #0]
 8008110:	9e03      	ldr	r6, [sp, #12]
 8008112:	e794      	b.n	800803e <_dtoa_r+0x40e>
 8008114:	9901      	ldr	r1, [sp, #4]
 8008116:	4b4c      	ldr	r3, [pc, #304]	; (8008248 <_dtoa_r+0x618>)
 8008118:	4431      	add	r1, r6
 800811a:	910d      	str	r1, [sp, #52]	; 0x34
 800811c:	9908      	ldr	r1, [sp, #32]
 800811e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008122:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008126:	2900      	cmp	r1, #0
 8008128:	d043      	beq.n	80081b2 <_dtoa_r+0x582>
 800812a:	494d      	ldr	r1, [pc, #308]	; (8008260 <_dtoa_r+0x630>)
 800812c:	2000      	movs	r0, #0
 800812e:	f7f8 fbad 	bl	800088c <__aeabi_ddiv>
 8008132:	4652      	mov	r2, sl
 8008134:	465b      	mov	r3, fp
 8008136:	f7f8 f8c7 	bl	80002c8 <__aeabi_dsub>
 800813a:	9d01      	ldr	r5, [sp, #4]
 800813c:	4682      	mov	sl, r0
 800813e:	468b      	mov	fp, r1
 8008140:	4649      	mov	r1, r9
 8008142:	4640      	mov	r0, r8
 8008144:	f7f8 fd28 	bl	8000b98 <__aeabi_d2iz>
 8008148:	4606      	mov	r6, r0
 800814a:	f7f8 fa0b 	bl	8000564 <__aeabi_i2d>
 800814e:	4602      	mov	r2, r0
 8008150:	460b      	mov	r3, r1
 8008152:	4640      	mov	r0, r8
 8008154:	4649      	mov	r1, r9
 8008156:	f7f8 f8b7 	bl	80002c8 <__aeabi_dsub>
 800815a:	3630      	adds	r6, #48	; 0x30
 800815c:	f805 6b01 	strb.w	r6, [r5], #1
 8008160:	4652      	mov	r2, sl
 8008162:	465b      	mov	r3, fp
 8008164:	4680      	mov	r8, r0
 8008166:	4689      	mov	r9, r1
 8008168:	f7f8 fcd8 	bl	8000b1c <__aeabi_dcmplt>
 800816c:	2800      	cmp	r0, #0
 800816e:	d163      	bne.n	8008238 <_dtoa_r+0x608>
 8008170:	4642      	mov	r2, r8
 8008172:	464b      	mov	r3, r9
 8008174:	4936      	ldr	r1, [pc, #216]	; (8008250 <_dtoa_r+0x620>)
 8008176:	2000      	movs	r0, #0
 8008178:	f7f8 f8a6 	bl	80002c8 <__aeabi_dsub>
 800817c:	4652      	mov	r2, sl
 800817e:	465b      	mov	r3, fp
 8008180:	f7f8 fccc 	bl	8000b1c <__aeabi_dcmplt>
 8008184:	2800      	cmp	r0, #0
 8008186:	f040 80b5 	bne.w	80082f4 <_dtoa_r+0x6c4>
 800818a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800818c:	429d      	cmp	r5, r3
 800818e:	d081      	beq.n	8008094 <_dtoa_r+0x464>
 8008190:	4b30      	ldr	r3, [pc, #192]	; (8008254 <_dtoa_r+0x624>)
 8008192:	2200      	movs	r2, #0
 8008194:	4650      	mov	r0, sl
 8008196:	4659      	mov	r1, fp
 8008198:	f7f8 fa4e 	bl	8000638 <__aeabi_dmul>
 800819c:	4b2d      	ldr	r3, [pc, #180]	; (8008254 <_dtoa_r+0x624>)
 800819e:	4682      	mov	sl, r0
 80081a0:	468b      	mov	fp, r1
 80081a2:	4640      	mov	r0, r8
 80081a4:	4649      	mov	r1, r9
 80081a6:	2200      	movs	r2, #0
 80081a8:	f7f8 fa46 	bl	8000638 <__aeabi_dmul>
 80081ac:	4680      	mov	r8, r0
 80081ae:	4689      	mov	r9, r1
 80081b0:	e7c6      	b.n	8008140 <_dtoa_r+0x510>
 80081b2:	4650      	mov	r0, sl
 80081b4:	4659      	mov	r1, fp
 80081b6:	f7f8 fa3f 	bl	8000638 <__aeabi_dmul>
 80081ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081bc:	9d01      	ldr	r5, [sp, #4]
 80081be:	930f      	str	r3, [sp, #60]	; 0x3c
 80081c0:	4682      	mov	sl, r0
 80081c2:	468b      	mov	fp, r1
 80081c4:	4649      	mov	r1, r9
 80081c6:	4640      	mov	r0, r8
 80081c8:	f7f8 fce6 	bl	8000b98 <__aeabi_d2iz>
 80081cc:	4606      	mov	r6, r0
 80081ce:	f7f8 f9c9 	bl	8000564 <__aeabi_i2d>
 80081d2:	3630      	adds	r6, #48	; 0x30
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4640      	mov	r0, r8
 80081da:	4649      	mov	r1, r9
 80081dc:	f7f8 f874 	bl	80002c8 <__aeabi_dsub>
 80081e0:	f805 6b01 	strb.w	r6, [r5], #1
 80081e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80081e6:	429d      	cmp	r5, r3
 80081e8:	4680      	mov	r8, r0
 80081ea:	4689      	mov	r9, r1
 80081ec:	f04f 0200 	mov.w	r2, #0
 80081f0:	d124      	bne.n	800823c <_dtoa_r+0x60c>
 80081f2:	4b1b      	ldr	r3, [pc, #108]	; (8008260 <_dtoa_r+0x630>)
 80081f4:	4650      	mov	r0, sl
 80081f6:	4659      	mov	r1, fp
 80081f8:	f7f8 f868 	bl	80002cc <__adddf3>
 80081fc:	4602      	mov	r2, r0
 80081fe:	460b      	mov	r3, r1
 8008200:	4640      	mov	r0, r8
 8008202:	4649      	mov	r1, r9
 8008204:	f7f8 fca8 	bl	8000b58 <__aeabi_dcmpgt>
 8008208:	2800      	cmp	r0, #0
 800820a:	d173      	bne.n	80082f4 <_dtoa_r+0x6c4>
 800820c:	4652      	mov	r2, sl
 800820e:	465b      	mov	r3, fp
 8008210:	4913      	ldr	r1, [pc, #76]	; (8008260 <_dtoa_r+0x630>)
 8008212:	2000      	movs	r0, #0
 8008214:	f7f8 f858 	bl	80002c8 <__aeabi_dsub>
 8008218:	4602      	mov	r2, r0
 800821a:	460b      	mov	r3, r1
 800821c:	4640      	mov	r0, r8
 800821e:	4649      	mov	r1, r9
 8008220:	f7f8 fc7c 	bl	8000b1c <__aeabi_dcmplt>
 8008224:	2800      	cmp	r0, #0
 8008226:	f43f af35 	beq.w	8008094 <_dtoa_r+0x464>
 800822a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800822c:	1e6b      	subs	r3, r5, #1
 800822e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008230:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008234:	2b30      	cmp	r3, #48	; 0x30
 8008236:	d0f8      	beq.n	800822a <_dtoa_r+0x5fa>
 8008238:	9700      	str	r7, [sp, #0]
 800823a:	e049      	b.n	80082d0 <_dtoa_r+0x6a0>
 800823c:	4b05      	ldr	r3, [pc, #20]	; (8008254 <_dtoa_r+0x624>)
 800823e:	f7f8 f9fb 	bl	8000638 <__aeabi_dmul>
 8008242:	4680      	mov	r8, r0
 8008244:	4689      	mov	r9, r1
 8008246:	e7bd      	b.n	80081c4 <_dtoa_r+0x594>
 8008248:	0800b6b0 	.word	0x0800b6b0
 800824c:	0800b688 	.word	0x0800b688
 8008250:	3ff00000 	.word	0x3ff00000
 8008254:	40240000 	.word	0x40240000
 8008258:	401c0000 	.word	0x401c0000
 800825c:	40140000 	.word	0x40140000
 8008260:	3fe00000 	.word	0x3fe00000
 8008264:	9d01      	ldr	r5, [sp, #4]
 8008266:	4656      	mov	r6, sl
 8008268:	465f      	mov	r7, fp
 800826a:	4642      	mov	r2, r8
 800826c:	464b      	mov	r3, r9
 800826e:	4630      	mov	r0, r6
 8008270:	4639      	mov	r1, r7
 8008272:	f7f8 fb0b 	bl	800088c <__aeabi_ddiv>
 8008276:	f7f8 fc8f 	bl	8000b98 <__aeabi_d2iz>
 800827a:	4682      	mov	sl, r0
 800827c:	f7f8 f972 	bl	8000564 <__aeabi_i2d>
 8008280:	4642      	mov	r2, r8
 8008282:	464b      	mov	r3, r9
 8008284:	f7f8 f9d8 	bl	8000638 <__aeabi_dmul>
 8008288:	4602      	mov	r2, r0
 800828a:	460b      	mov	r3, r1
 800828c:	4630      	mov	r0, r6
 800828e:	4639      	mov	r1, r7
 8008290:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008294:	f7f8 f818 	bl	80002c8 <__aeabi_dsub>
 8008298:	f805 6b01 	strb.w	r6, [r5], #1
 800829c:	9e01      	ldr	r6, [sp, #4]
 800829e:	9f03      	ldr	r7, [sp, #12]
 80082a0:	1bae      	subs	r6, r5, r6
 80082a2:	42b7      	cmp	r7, r6
 80082a4:	4602      	mov	r2, r0
 80082a6:	460b      	mov	r3, r1
 80082a8:	d135      	bne.n	8008316 <_dtoa_r+0x6e6>
 80082aa:	f7f8 f80f 	bl	80002cc <__adddf3>
 80082ae:	4642      	mov	r2, r8
 80082b0:	464b      	mov	r3, r9
 80082b2:	4606      	mov	r6, r0
 80082b4:	460f      	mov	r7, r1
 80082b6:	f7f8 fc4f 	bl	8000b58 <__aeabi_dcmpgt>
 80082ba:	b9d0      	cbnz	r0, 80082f2 <_dtoa_r+0x6c2>
 80082bc:	4642      	mov	r2, r8
 80082be:	464b      	mov	r3, r9
 80082c0:	4630      	mov	r0, r6
 80082c2:	4639      	mov	r1, r7
 80082c4:	f7f8 fc20 	bl	8000b08 <__aeabi_dcmpeq>
 80082c8:	b110      	cbz	r0, 80082d0 <_dtoa_r+0x6a0>
 80082ca:	f01a 0f01 	tst.w	sl, #1
 80082ce:	d110      	bne.n	80082f2 <_dtoa_r+0x6c2>
 80082d0:	4620      	mov	r0, r4
 80082d2:	ee18 1a10 	vmov	r1, s16
 80082d6:	f000 fae5 	bl	80088a4 <_Bfree>
 80082da:	2300      	movs	r3, #0
 80082dc:	9800      	ldr	r0, [sp, #0]
 80082de:	702b      	strb	r3, [r5, #0]
 80082e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082e2:	3001      	adds	r0, #1
 80082e4:	6018      	str	r0, [r3, #0]
 80082e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	f43f acf1 	beq.w	8007cd0 <_dtoa_r+0xa0>
 80082ee:	601d      	str	r5, [r3, #0]
 80082f0:	e4ee      	b.n	8007cd0 <_dtoa_r+0xa0>
 80082f2:	9f00      	ldr	r7, [sp, #0]
 80082f4:	462b      	mov	r3, r5
 80082f6:	461d      	mov	r5, r3
 80082f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80082fc:	2a39      	cmp	r2, #57	; 0x39
 80082fe:	d106      	bne.n	800830e <_dtoa_r+0x6de>
 8008300:	9a01      	ldr	r2, [sp, #4]
 8008302:	429a      	cmp	r2, r3
 8008304:	d1f7      	bne.n	80082f6 <_dtoa_r+0x6c6>
 8008306:	9901      	ldr	r1, [sp, #4]
 8008308:	2230      	movs	r2, #48	; 0x30
 800830a:	3701      	adds	r7, #1
 800830c:	700a      	strb	r2, [r1, #0]
 800830e:	781a      	ldrb	r2, [r3, #0]
 8008310:	3201      	adds	r2, #1
 8008312:	701a      	strb	r2, [r3, #0]
 8008314:	e790      	b.n	8008238 <_dtoa_r+0x608>
 8008316:	4ba6      	ldr	r3, [pc, #664]	; (80085b0 <_dtoa_r+0x980>)
 8008318:	2200      	movs	r2, #0
 800831a:	f7f8 f98d 	bl	8000638 <__aeabi_dmul>
 800831e:	2200      	movs	r2, #0
 8008320:	2300      	movs	r3, #0
 8008322:	4606      	mov	r6, r0
 8008324:	460f      	mov	r7, r1
 8008326:	f7f8 fbef 	bl	8000b08 <__aeabi_dcmpeq>
 800832a:	2800      	cmp	r0, #0
 800832c:	d09d      	beq.n	800826a <_dtoa_r+0x63a>
 800832e:	e7cf      	b.n	80082d0 <_dtoa_r+0x6a0>
 8008330:	9a08      	ldr	r2, [sp, #32]
 8008332:	2a00      	cmp	r2, #0
 8008334:	f000 80d7 	beq.w	80084e6 <_dtoa_r+0x8b6>
 8008338:	9a06      	ldr	r2, [sp, #24]
 800833a:	2a01      	cmp	r2, #1
 800833c:	f300 80ba 	bgt.w	80084b4 <_dtoa_r+0x884>
 8008340:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008342:	2a00      	cmp	r2, #0
 8008344:	f000 80b2 	beq.w	80084ac <_dtoa_r+0x87c>
 8008348:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800834c:	9e07      	ldr	r6, [sp, #28]
 800834e:	9d04      	ldr	r5, [sp, #16]
 8008350:	9a04      	ldr	r2, [sp, #16]
 8008352:	441a      	add	r2, r3
 8008354:	9204      	str	r2, [sp, #16]
 8008356:	9a05      	ldr	r2, [sp, #20]
 8008358:	2101      	movs	r1, #1
 800835a:	441a      	add	r2, r3
 800835c:	4620      	mov	r0, r4
 800835e:	9205      	str	r2, [sp, #20]
 8008360:	f000 fb58 	bl	8008a14 <__i2b>
 8008364:	4607      	mov	r7, r0
 8008366:	2d00      	cmp	r5, #0
 8008368:	dd0c      	ble.n	8008384 <_dtoa_r+0x754>
 800836a:	9b05      	ldr	r3, [sp, #20]
 800836c:	2b00      	cmp	r3, #0
 800836e:	dd09      	ble.n	8008384 <_dtoa_r+0x754>
 8008370:	42ab      	cmp	r3, r5
 8008372:	9a04      	ldr	r2, [sp, #16]
 8008374:	bfa8      	it	ge
 8008376:	462b      	movge	r3, r5
 8008378:	1ad2      	subs	r2, r2, r3
 800837a:	9204      	str	r2, [sp, #16]
 800837c:	9a05      	ldr	r2, [sp, #20]
 800837e:	1aed      	subs	r5, r5, r3
 8008380:	1ad3      	subs	r3, r2, r3
 8008382:	9305      	str	r3, [sp, #20]
 8008384:	9b07      	ldr	r3, [sp, #28]
 8008386:	b31b      	cbz	r3, 80083d0 <_dtoa_r+0x7a0>
 8008388:	9b08      	ldr	r3, [sp, #32]
 800838a:	2b00      	cmp	r3, #0
 800838c:	f000 80af 	beq.w	80084ee <_dtoa_r+0x8be>
 8008390:	2e00      	cmp	r6, #0
 8008392:	dd13      	ble.n	80083bc <_dtoa_r+0x78c>
 8008394:	4639      	mov	r1, r7
 8008396:	4632      	mov	r2, r6
 8008398:	4620      	mov	r0, r4
 800839a:	f000 fbfb 	bl	8008b94 <__pow5mult>
 800839e:	ee18 2a10 	vmov	r2, s16
 80083a2:	4601      	mov	r1, r0
 80083a4:	4607      	mov	r7, r0
 80083a6:	4620      	mov	r0, r4
 80083a8:	f000 fb4a 	bl	8008a40 <__multiply>
 80083ac:	ee18 1a10 	vmov	r1, s16
 80083b0:	4680      	mov	r8, r0
 80083b2:	4620      	mov	r0, r4
 80083b4:	f000 fa76 	bl	80088a4 <_Bfree>
 80083b8:	ee08 8a10 	vmov	s16, r8
 80083bc:	9b07      	ldr	r3, [sp, #28]
 80083be:	1b9a      	subs	r2, r3, r6
 80083c0:	d006      	beq.n	80083d0 <_dtoa_r+0x7a0>
 80083c2:	ee18 1a10 	vmov	r1, s16
 80083c6:	4620      	mov	r0, r4
 80083c8:	f000 fbe4 	bl	8008b94 <__pow5mult>
 80083cc:	ee08 0a10 	vmov	s16, r0
 80083d0:	2101      	movs	r1, #1
 80083d2:	4620      	mov	r0, r4
 80083d4:	f000 fb1e 	bl	8008a14 <__i2b>
 80083d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083da:	2b00      	cmp	r3, #0
 80083dc:	4606      	mov	r6, r0
 80083de:	f340 8088 	ble.w	80084f2 <_dtoa_r+0x8c2>
 80083e2:	461a      	mov	r2, r3
 80083e4:	4601      	mov	r1, r0
 80083e6:	4620      	mov	r0, r4
 80083e8:	f000 fbd4 	bl	8008b94 <__pow5mult>
 80083ec:	9b06      	ldr	r3, [sp, #24]
 80083ee:	2b01      	cmp	r3, #1
 80083f0:	4606      	mov	r6, r0
 80083f2:	f340 8081 	ble.w	80084f8 <_dtoa_r+0x8c8>
 80083f6:	f04f 0800 	mov.w	r8, #0
 80083fa:	6933      	ldr	r3, [r6, #16]
 80083fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008400:	6918      	ldr	r0, [r3, #16]
 8008402:	f000 fab7 	bl	8008974 <__hi0bits>
 8008406:	f1c0 0020 	rsb	r0, r0, #32
 800840a:	9b05      	ldr	r3, [sp, #20]
 800840c:	4418      	add	r0, r3
 800840e:	f010 001f 	ands.w	r0, r0, #31
 8008412:	f000 8092 	beq.w	800853a <_dtoa_r+0x90a>
 8008416:	f1c0 0320 	rsb	r3, r0, #32
 800841a:	2b04      	cmp	r3, #4
 800841c:	f340 808a 	ble.w	8008534 <_dtoa_r+0x904>
 8008420:	f1c0 001c 	rsb	r0, r0, #28
 8008424:	9b04      	ldr	r3, [sp, #16]
 8008426:	4403      	add	r3, r0
 8008428:	9304      	str	r3, [sp, #16]
 800842a:	9b05      	ldr	r3, [sp, #20]
 800842c:	4403      	add	r3, r0
 800842e:	4405      	add	r5, r0
 8008430:	9305      	str	r3, [sp, #20]
 8008432:	9b04      	ldr	r3, [sp, #16]
 8008434:	2b00      	cmp	r3, #0
 8008436:	dd07      	ble.n	8008448 <_dtoa_r+0x818>
 8008438:	ee18 1a10 	vmov	r1, s16
 800843c:	461a      	mov	r2, r3
 800843e:	4620      	mov	r0, r4
 8008440:	f000 fc02 	bl	8008c48 <__lshift>
 8008444:	ee08 0a10 	vmov	s16, r0
 8008448:	9b05      	ldr	r3, [sp, #20]
 800844a:	2b00      	cmp	r3, #0
 800844c:	dd05      	ble.n	800845a <_dtoa_r+0x82a>
 800844e:	4631      	mov	r1, r6
 8008450:	461a      	mov	r2, r3
 8008452:	4620      	mov	r0, r4
 8008454:	f000 fbf8 	bl	8008c48 <__lshift>
 8008458:	4606      	mov	r6, r0
 800845a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d06e      	beq.n	800853e <_dtoa_r+0x90e>
 8008460:	ee18 0a10 	vmov	r0, s16
 8008464:	4631      	mov	r1, r6
 8008466:	f000 fc5f 	bl	8008d28 <__mcmp>
 800846a:	2800      	cmp	r0, #0
 800846c:	da67      	bge.n	800853e <_dtoa_r+0x90e>
 800846e:	9b00      	ldr	r3, [sp, #0]
 8008470:	3b01      	subs	r3, #1
 8008472:	ee18 1a10 	vmov	r1, s16
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	220a      	movs	r2, #10
 800847a:	2300      	movs	r3, #0
 800847c:	4620      	mov	r0, r4
 800847e:	f000 fa33 	bl	80088e8 <__multadd>
 8008482:	9b08      	ldr	r3, [sp, #32]
 8008484:	ee08 0a10 	vmov	s16, r0
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 81b1 	beq.w	80087f0 <_dtoa_r+0xbc0>
 800848e:	2300      	movs	r3, #0
 8008490:	4639      	mov	r1, r7
 8008492:	220a      	movs	r2, #10
 8008494:	4620      	mov	r0, r4
 8008496:	f000 fa27 	bl	80088e8 <__multadd>
 800849a:	9b02      	ldr	r3, [sp, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	4607      	mov	r7, r0
 80084a0:	f300 808e 	bgt.w	80085c0 <_dtoa_r+0x990>
 80084a4:	9b06      	ldr	r3, [sp, #24]
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	dc51      	bgt.n	800854e <_dtoa_r+0x91e>
 80084aa:	e089      	b.n	80085c0 <_dtoa_r+0x990>
 80084ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80084b2:	e74b      	b.n	800834c <_dtoa_r+0x71c>
 80084b4:	9b03      	ldr	r3, [sp, #12]
 80084b6:	1e5e      	subs	r6, r3, #1
 80084b8:	9b07      	ldr	r3, [sp, #28]
 80084ba:	42b3      	cmp	r3, r6
 80084bc:	bfbf      	itttt	lt
 80084be:	9b07      	ldrlt	r3, [sp, #28]
 80084c0:	9607      	strlt	r6, [sp, #28]
 80084c2:	1af2      	sublt	r2, r6, r3
 80084c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80084c6:	bfb6      	itet	lt
 80084c8:	189b      	addlt	r3, r3, r2
 80084ca:	1b9e      	subge	r6, r3, r6
 80084cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80084ce:	9b03      	ldr	r3, [sp, #12]
 80084d0:	bfb8      	it	lt
 80084d2:	2600      	movlt	r6, #0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	bfb7      	itett	lt
 80084d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80084dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80084e0:	1a9d      	sublt	r5, r3, r2
 80084e2:	2300      	movlt	r3, #0
 80084e4:	e734      	b.n	8008350 <_dtoa_r+0x720>
 80084e6:	9e07      	ldr	r6, [sp, #28]
 80084e8:	9d04      	ldr	r5, [sp, #16]
 80084ea:	9f08      	ldr	r7, [sp, #32]
 80084ec:	e73b      	b.n	8008366 <_dtoa_r+0x736>
 80084ee:	9a07      	ldr	r2, [sp, #28]
 80084f0:	e767      	b.n	80083c2 <_dtoa_r+0x792>
 80084f2:	9b06      	ldr	r3, [sp, #24]
 80084f4:	2b01      	cmp	r3, #1
 80084f6:	dc18      	bgt.n	800852a <_dtoa_r+0x8fa>
 80084f8:	f1ba 0f00 	cmp.w	sl, #0
 80084fc:	d115      	bne.n	800852a <_dtoa_r+0x8fa>
 80084fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008502:	b993      	cbnz	r3, 800852a <_dtoa_r+0x8fa>
 8008504:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008508:	0d1b      	lsrs	r3, r3, #20
 800850a:	051b      	lsls	r3, r3, #20
 800850c:	b183      	cbz	r3, 8008530 <_dtoa_r+0x900>
 800850e:	9b04      	ldr	r3, [sp, #16]
 8008510:	3301      	adds	r3, #1
 8008512:	9304      	str	r3, [sp, #16]
 8008514:	9b05      	ldr	r3, [sp, #20]
 8008516:	3301      	adds	r3, #1
 8008518:	9305      	str	r3, [sp, #20]
 800851a:	f04f 0801 	mov.w	r8, #1
 800851e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008520:	2b00      	cmp	r3, #0
 8008522:	f47f af6a 	bne.w	80083fa <_dtoa_r+0x7ca>
 8008526:	2001      	movs	r0, #1
 8008528:	e76f      	b.n	800840a <_dtoa_r+0x7da>
 800852a:	f04f 0800 	mov.w	r8, #0
 800852e:	e7f6      	b.n	800851e <_dtoa_r+0x8ee>
 8008530:	4698      	mov	r8, r3
 8008532:	e7f4      	b.n	800851e <_dtoa_r+0x8ee>
 8008534:	f43f af7d 	beq.w	8008432 <_dtoa_r+0x802>
 8008538:	4618      	mov	r0, r3
 800853a:	301c      	adds	r0, #28
 800853c:	e772      	b.n	8008424 <_dtoa_r+0x7f4>
 800853e:	9b03      	ldr	r3, [sp, #12]
 8008540:	2b00      	cmp	r3, #0
 8008542:	dc37      	bgt.n	80085b4 <_dtoa_r+0x984>
 8008544:	9b06      	ldr	r3, [sp, #24]
 8008546:	2b02      	cmp	r3, #2
 8008548:	dd34      	ble.n	80085b4 <_dtoa_r+0x984>
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	9302      	str	r3, [sp, #8]
 800854e:	9b02      	ldr	r3, [sp, #8]
 8008550:	b96b      	cbnz	r3, 800856e <_dtoa_r+0x93e>
 8008552:	4631      	mov	r1, r6
 8008554:	2205      	movs	r2, #5
 8008556:	4620      	mov	r0, r4
 8008558:	f000 f9c6 	bl	80088e8 <__multadd>
 800855c:	4601      	mov	r1, r0
 800855e:	4606      	mov	r6, r0
 8008560:	ee18 0a10 	vmov	r0, s16
 8008564:	f000 fbe0 	bl	8008d28 <__mcmp>
 8008568:	2800      	cmp	r0, #0
 800856a:	f73f adbb 	bgt.w	80080e4 <_dtoa_r+0x4b4>
 800856e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008570:	9d01      	ldr	r5, [sp, #4]
 8008572:	43db      	mvns	r3, r3
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	f04f 0800 	mov.w	r8, #0
 800857a:	4631      	mov	r1, r6
 800857c:	4620      	mov	r0, r4
 800857e:	f000 f991 	bl	80088a4 <_Bfree>
 8008582:	2f00      	cmp	r7, #0
 8008584:	f43f aea4 	beq.w	80082d0 <_dtoa_r+0x6a0>
 8008588:	f1b8 0f00 	cmp.w	r8, #0
 800858c:	d005      	beq.n	800859a <_dtoa_r+0x96a>
 800858e:	45b8      	cmp	r8, r7
 8008590:	d003      	beq.n	800859a <_dtoa_r+0x96a>
 8008592:	4641      	mov	r1, r8
 8008594:	4620      	mov	r0, r4
 8008596:	f000 f985 	bl	80088a4 <_Bfree>
 800859a:	4639      	mov	r1, r7
 800859c:	4620      	mov	r0, r4
 800859e:	f000 f981 	bl	80088a4 <_Bfree>
 80085a2:	e695      	b.n	80082d0 <_dtoa_r+0x6a0>
 80085a4:	2600      	movs	r6, #0
 80085a6:	4637      	mov	r7, r6
 80085a8:	e7e1      	b.n	800856e <_dtoa_r+0x93e>
 80085aa:	9700      	str	r7, [sp, #0]
 80085ac:	4637      	mov	r7, r6
 80085ae:	e599      	b.n	80080e4 <_dtoa_r+0x4b4>
 80085b0:	40240000 	.word	0x40240000
 80085b4:	9b08      	ldr	r3, [sp, #32]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f000 80ca 	beq.w	8008750 <_dtoa_r+0xb20>
 80085bc:	9b03      	ldr	r3, [sp, #12]
 80085be:	9302      	str	r3, [sp, #8]
 80085c0:	2d00      	cmp	r5, #0
 80085c2:	dd05      	ble.n	80085d0 <_dtoa_r+0x9a0>
 80085c4:	4639      	mov	r1, r7
 80085c6:	462a      	mov	r2, r5
 80085c8:	4620      	mov	r0, r4
 80085ca:	f000 fb3d 	bl	8008c48 <__lshift>
 80085ce:	4607      	mov	r7, r0
 80085d0:	f1b8 0f00 	cmp.w	r8, #0
 80085d4:	d05b      	beq.n	800868e <_dtoa_r+0xa5e>
 80085d6:	6879      	ldr	r1, [r7, #4]
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 f923 	bl	8008824 <_Balloc>
 80085de:	4605      	mov	r5, r0
 80085e0:	b928      	cbnz	r0, 80085ee <_dtoa_r+0x9be>
 80085e2:	4b87      	ldr	r3, [pc, #540]	; (8008800 <_dtoa_r+0xbd0>)
 80085e4:	4602      	mov	r2, r0
 80085e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80085ea:	f7ff bb3b 	b.w	8007c64 <_dtoa_r+0x34>
 80085ee:	693a      	ldr	r2, [r7, #16]
 80085f0:	3202      	adds	r2, #2
 80085f2:	0092      	lsls	r2, r2, #2
 80085f4:	f107 010c 	add.w	r1, r7, #12
 80085f8:	300c      	adds	r0, #12
 80085fa:	f7fe fdeb 	bl	80071d4 <memcpy>
 80085fe:	2201      	movs	r2, #1
 8008600:	4629      	mov	r1, r5
 8008602:	4620      	mov	r0, r4
 8008604:	f000 fb20 	bl	8008c48 <__lshift>
 8008608:	9b01      	ldr	r3, [sp, #4]
 800860a:	f103 0901 	add.w	r9, r3, #1
 800860e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008612:	4413      	add	r3, r2
 8008614:	9305      	str	r3, [sp, #20]
 8008616:	f00a 0301 	and.w	r3, sl, #1
 800861a:	46b8      	mov	r8, r7
 800861c:	9304      	str	r3, [sp, #16]
 800861e:	4607      	mov	r7, r0
 8008620:	4631      	mov	r1, r6
 8008622:	ee18 0a10 	vmov	r0, s16
 8008626:	f7ff fa75 	bl	8007b14 <quorem>
 800862a:	4641      	mov	r1, r8
 800862c:	9002      	str	r0, [sp, #8]
 800862e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008632:	ee18 0a10 	vmov	r0, s16
 8008636:	f000 fb77 	bl	8008d28 <__mcmp>
 800863a:	463a      	mov	r2, r7
 800863c:	9003      	str	r0, [sp, #12]
 800863e:	4631      	mov	r1, r6
 8008640:	4620      	mov	r0, r4
 8008642:	f000 fb8d 	bl	8008d60 <__mdiff>
 8008646:	68c2      	ldr	r2, [r0, #12]
 8008648:	f109 3bff 	add.w	fp, r9, #4294967295
 800864c:	4605      	mov	r5, r0
 800864e:	bb02      	cbnz	r2, 8008692 <_dtoa_r+0xa62>
 8008650:	4601      	mov	r1, r0
 8008652:	ee18 0a10 	vmov	r0, s16
 8008656:	f000 fb67 	bl	8008d28 <__mcmp>
 800865a:	4602      	mov	r2, r0
 800865c:	4629      	mov	r1, r5
 800865e:	4620      	mov	r0, r4
 8008660:	9207      	str	r2, [sp, #28]
 8008662:	f000 f91f 	bl	80088a4 <_Bfree>
 8008666:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800866a:	ea43 0102 	orr.w	r1, r3, r2
 800866e:	9b04      	ldr	r3, [sp, #16]
 8008670:	430b      	orrs	r3, r1
 8008672:	464d      	mov	r5, r9
 8008674:	d10f      	bne.n	8008696 <_dtoa_r+0xa66>
 8008676:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800867a:	d02a      	beq.n	80086d2 <_dtoa_r+0xaa2>
 800867c:	9b03      	ldr	r3, [sp, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	dd02      	ble.n	8008688 <_dtoa_r+0xa58>
 8008682:	9b02      	ldr	r3, [sp, #8]
 8008684:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008688:	f88b a000 	strb.w	sl, [fp]
 800868c:	e775      	b.n	800857a <_dtoa_r+0x94a>
 800868e:	4638      	mov	r0, r7
 8008690:	e7ba      	b.n	8008608 <_dtoa_r+0x9d8>
 8008692:	2201      	movs	r2, #1
 8008694:	e7e2      	b.n	800865c <_dtoa_r+0xa2c>
 8008696:	9b03      	ldr	r3, [sp, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	db04      	blt.n	80086a6 <_dtoa_r+0xa76>
 800869c:	9906      	ldr	r1, [sp, #24]
 800869e:	430b      	orrs	r3, r1
 80086a0:	9904      	ldr	r1, [sp, #16]
 80086a2:	430b      	orrs	r3, r1
 80086a4:	d122      	bne.n	80086ec <_dtoa_r+0xabc>
 80086a6:	2a00      	cmp	r2, #0
 80086a8:	ddee      	ble.n	8008688 <_dtoa_r+0xa58>
 80086aa:	ee18 1a10 	vmov	r1, s16
 80086ae:	2201      	movs	r2, #1
 80086b0:	4620      	mov	r0, r4
 80086b2:	f000 fac9 	bl	8008c48 <__lshift>
 80086b6:	4631      	mov	r1, r6
 80086b8:	ee08 0a10 	vmov	s16, r0
 80086bc:	f000 fb34 	bl	8008d28 <__mcmp>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	dc03      	bgt.n	80086cc <_dtoa_r+0xa9c>
 80086c4:	d1e0      	bne.n	8008688 <_dtoa_r+0xa58>
 80086c6:	f01a 0f01 	tst.w	sl, #1
 80086ca:	d0dd      	beq.n	8008688 <_dtoa_r+0xa58>
 80086cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086d0:	d1d7      	bne.n	8008682 <_dtoa_r+0xa52>
 80086d2:	2339      	movs	r3, #57	; 0x39
 80086d4:	f88b 3000 	strb.w	r3, [fp]
 80086d8:	462b      	mov	r3, r5
 80086da:	461d      	mov	r5, r3
 80086dc:	3b01      	subs	r3, #1
 80086de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80086e2:	2a39      	cmp	r2, #57	; 0x39
 80086e4:	d071      	beq.n	80087ca <_dtoa_r+0xb9a>
 80086e6:	3201      	adds	r2, #1
 80086e8:	701a      	strb	r2, [r3, #0]
 80086ea:	e746      	b.n	800857a <_dtoa_r+0x94a>
 80086ec:	2a00      	cmp	r2, #0
 80086ee:	dd07      	ble.n	8008700 <_dtoa_r+0xad0>
 80086f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086f4:	d0ed      	beq.n	80086d2 <_dtoa_r+0xaa2>
 80086f6:	f10a 0301 	add.w	r3, sl, #1
 80086fa:	f88b 3000 	strb.w	r3, [fp]
 80086fe:	e73c      	b.n	800857a <_dtoa_r+0x94a>
 8008700:	9b05      	ldr	r3, [sp, #20]
 8008702:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008706:	4599      	cmp	r9, r3
 8008708:	d047      	beq.n	800879a <_dtoa_r+0xb6a>
 800870a:	ee18 1a10 	vmov	r1, s16
 800870e:	2300      	movs	r3, #0
 8008710:	220a      	movs	r2, #10
 8008712:	4620      	mov	r0, r4
 8008714:	f000 f8e8 	bl	80088e8 <__multadd>
 8008718:	45b8      	cmp	r8, r7
 800871a:	ee08 0a10 	vmov	s16, r0
 800871e:	f04f 0300 	mov.w	r3, #0
 8008722:	f04f 020a 	mov.w	r2, #10
 8008726:	4641      	mov	r1, r8
 8008728:	4620      	mov	r0, r4
 800872a:	d106      	bne.n	800873a <_dtoa_r+0xb0a>
 800872c:	f000 f8dc 	bl	80088e8 <__multadd>
 8008730:	4680      	mov	r8, r0
 8008732:	4607      	mov	r7, r0
 8008734:	f109 0901 	add.w	r9, r9, #1
 8008738:	e772      	b.n	8008620 <_dtoa_r+0x9f0>
 800873a:	f000 f8d5 	bl	80088e8 <__multadd>
 800873e:	4639      	mov	r1, r7
 8008740:	4680      	mov	r8, r0
 8008742:	2300      	movs	r3, #0
 8008744:	220a      	movs	r2, #10
 8008746:	4620      	mov	r0, r4
 8008748:	f000 f8ce 	bl	80088e8 <__multadd>
 800874c:	4607      	mov	r7, r0
 800874e:	e7f1      	b.n	8008734 <_dtoa_r+0xb04>
 8008750:	9b03      	ldr	r3, [sp, #12]
 8008752:	9302      	str	r3, [sp, #8]
 8008754:	9d01      	ldr	r5, [sp, #4]
 8008756:	ee18 0a10 	vmov	r0, s16
 800875a:	4631      	mov	r1, r6
 800875c:	f7ff f9da 	bl	8007b14 <quorem>
 8008760:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008764:	9b01      	ldr	r3, [sp, #4]
 8008766:	f805 ab01 	strb.w	sl, [r5], #1
 800876a:	1aea      	subs	r2, r5, r3
 800876c:	9b02      	ldr	r3, [sp, #8]
 800876e:	4293      	cmp	r3, r2
 8008770:	dd09      	ble.n	8008786 <_dtoa_r+0xb56>
 8008772:	ee18 1a10 	vmov	r1, s16
 8008776:	2300      	movs	r3, #0
 8008778:	220a      	movs	r2, #10
 800877a:	4620      	mov	r0, r4
 800877c:	f000 f8b4 	bl	80088e8 <__multadd>
 8008780:	ee08 0a10 	vmov	s16, r0
 8008784:	e7e7      	b.n	8008756 <_dtoa_r+0xb26>
 8008786:	9b02      	ldr	r3, [sp, #8]
 8008788:	2b00      	cmp	r3, #0
 800878a:	bfc8      	it	gt
 800878c:	461d      	movgt	r5, r3
 800878e:	9b01      	ldr	r3, [sp, #4]
 8008790:	bfd8      	it	le
 8008792:	2501      	movle	r5, #1
 8008794:	441d      	add	r5, r3
 8008796:	f04f 0800 	mov.w	r8, #0
 800879a:	ee18 1a10 	vmov	r1, s16
 800879e:	2201      	movs	r2, #1
 80087a0:	4620      	mov	r0, r4
 80087a2:	f000 fa51 	bl	8008c48 <__lshift>
 80087a6:	4631      	mov	r1, r6
 80087a8:	ee08 0a10 	vmov	s16, r0
 80087ac:	f000 fabc 	bl	8008d28 <__mcmp>
 80087b0:	2800      	cmp	r0, #0
 80087b2:	dc91      	bgt.n	80086d8 <_dtoa_r+0xaa8>
 80087b4:	d102      	bne.n	80087bc <_dtoa_r+0xb8c>
 80087b6:	f01a 0f01 	tst.w	sl, #1
 80087ba:	d18d      	bne.n	80086d8 <_dtoa_r+0xaa8>
 80087bc:	462b      	mov	r3, r5
 80087be:	461d      	mov	r5, r3
 80087c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087c4:	2a30      	cmp	r2, #48	; 0x30
 80087c6:	d0fa      	beq.n	80087be <_dtoa_r+0xb8e>
 80087c8:	e6d7      	b.n	800857a <_dtoa_r+0x94a>
 80087ca:	9a01      	ldr	r2, [sp, #4]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d184      	bne.n	80086da <_dtoa_r+0xaaa>
 80087d0:	9b00      	ldr	r3, [sp, #0]
 80087d2:	3301      	adds	r3, #1
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	2331      	movs	r3, #49	; 0x31
 80087d8:	7013      	strb	r3, [r2, #0]
 80087da:	e6ce      	b.n	800857a <_dtoa_r+0x94a>
 80087dc:	4b09      	ldr	r3, [pc, #36]	; (8008804 <_dtoa_r+0xbd4>)
 80087de:	f7ff ba95 	b.w	8007d0c <_dtoa_r+0xdc>
 80087e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f47f aa6e 	bne.w	8007cc6 <_dtoa_r+0x96>
 80087ea:	4b07      	ldr	r3, [pc, #28]	; (8008808 <_dtoa_r+0xbd8>)
 80087ec:	f7ff ba8e 	b.w	8007d0c <_dtoa_r+0xdc>
 80087f0:	9b02      	ldr	r3, [sp, #8]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	dcae      	bgt.n	8008754 <_dtoa_r+0xb24>
 80087f6:	9b06      	ldr	r3, [sp, #24]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	f73f aea8 	bgt.w	800854e <_dtoa_r+0x91e>
 80087fe:	e7a9      	b.n	8008754 <_dtoa_r+0xb24>
 8008800:	0800b617 	.word	0x0800b617
 8008804:	0800b574 	.word	0x0800b574
 8008808:	0800b598 	.word	0x0800b598

0800880c <_localeconv_r>:
 800880c:	4800      	ldr	r0, [pc, #0]	; (8008810 <_localeconv_r+0x4>)
 800880e:	4770      	bx	lr
 8008810:	20000164 	.word	0x20000164

08008814 <malloc>:
 8008814:	4b02      	ldr	r3, [pc, #8]	; (8008820 <malloc+0xc>)
 8008816:	4601      	mov	r1, r0
 8008818:	6818      	ldr	r0, [r3, #0]
 800881a:	f000 bc09 	b.w	8009030 <_malloc_r>
 800881e:	bf00      	nop
 8008820:	20000010 	.word	0x20000010

08008824 <_Balloc>:
 8008824:	b570      	push	{r4, r5, r6, lr}
 8008826:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008828:	4604      	mov	r4, r0
 800882a:	460d      	mov	r5, r1
 800882c:	b976      	cbnz	r6, 800884c <_Balloc+0x28>
 800882e:	2010      	movs	r0, #16
 8008830:	f7ff fff0 	bl	8008814 <malloc>
 8008834:	4602      	mov	r2, r0
 8008836:	6260      	str	r0, [r4, #36]	; 0x24
 8008838:	b920      	cbnz	r0, 8008844 <_Balloc+0x20>
 800883a:	4b18      	ldr	r3, [pc, #96]	; (800889c <_Balloc+0x78>)
 800883c:	4818      	ldr	r0, [pc, #96]	; (80088a0 <_Balloc+0x7c>)
 800883e:	2166      	movs	r1, #102	; 0x66
 8008840:	f000 fdd6 	bl	80093f0 <__assert_func>
 8008844:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008848:	6006      	str	r6, [r0, #0]
 800884a:	60c6      	str	r6, [r0, #12]
 800884c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800884e:	68f3      	ldr	r3, [r6, #12]
 8008850:	b183      	cbz	r3, 8008874 <_Balloc+0x50>
 8008852:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800885a:	b9b8      	cbnz	r0, 800888c <_Balloc+0x68>
 800885c:	2101      	movs	r1, #1
 800885e:	fa01 f605 	lsl.w	r6, r1, r5
 8008862:	1d72      	adds	r2, r6, #5
 8008864:	0092      	lsls	r2, r2, #2
 8008866:	4620      	mov	r0, r4
 8008868:	f000 fb60 	bl	8008f2c <_calloc_r>
 800886c:	b160      	cbz	r0, 8008888 <_Balloc+0x64>
 800886e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008872:	e00e      	b.n	8008892 <_Balloc+0x6e>
 8008874:	2221      	movs	r2, #33	; 0x21
 8008876:	2104      	movs	r1, #4
 8008878:	4620      	mov	r0, r4
 800887a:	f000 fb57 	bl	8008f2c <_calloc_r>
 800887e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008880:	60f0      	str	r0, [r6, #12]
 8008882:	68db      	ldr	r3, [r3, #12]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e4      	bne.n	8008852 <_Balloc+0x2e>
 8008888:	2000      	movs	r0, #0
 800888a:	bd70      	pop	{r4, r5, r6, pc}
 800888c:	6802      	ldr	r2, [r0, #0]
 800888e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008892:	2300      	movs	r3, #0
 8008894:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008898:	e7f7      	b.n	800888a <_Balloc+0x66>
 800889a:	bf00      	nop
 800889c:	0800b5a5 	.word	0x0800b5a5
 80088a0:	0800b628 	.word	0x0800b628

080088a4 <_Bfree>:
 80088a4:	b570      	push	{r4, r5, r6, lr}
 80088a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80088a8:	4605      	mov	r5, r0
 80088aa:	460c      	mov	r4, r1
 80088ac:	b976      	cbnz	r6, 80088cc <_Bfree+0x28>
 80088ae:	2010      	movs	r0, #16
 80088b0:	f7ff ffb0 	bl	8008814 <malloc>
 80088b4:	4602      	mov	r2, r0
 80088b6:	6268      	str	r0, [r5, #36]	; 0x24
 80088b8:	b920      	cbnz	r0, 80088c4 <_Bfree+0x20>
 80088ba:	4b09      	ldr	r3, [pc, #36]	; (80088e0 <_Bfree+0x3c>)
 80088bc:	4809      	ldr	r0, [pc, #36]	; (80088e4 <_Bfree+0x40>)
 80088be:	218a      	movs	r1, #138	; 0x8a
 80088c0:	f000 fd96 	bl	80093f0 <__assert_func>
 80088c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80088c8:	6006      	str	r6, [r0, #0]
 80088ca:	60c6      	str	r6, [r0, #12]
 80088cc:	b13c      	cbz	r4, 80088de <_Bfree+0x3a>
 80088ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80088d0:	6862      	ldr	r2, [r4, #4]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088d8:	6021      	str	r1, [r4, #0]
 80088da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80088de:	bd70      	pop	{r4, r5, r6, pc}
 80088e0:	0800b5a5 	.word	0x0800b5a5
 80088e4:	0800b628 	.word	0x0800b628

080088e8 <__multadd>:
 80088e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ec:	690d      	ldr	r5, [r1, #16]
 80088ee:	4607      	mov	r7, r0
 80088f0:	460c      	mov	r4, r1
 80088f2:	461e      	mov	r6, r3
 80088f4:	f101 0c14 	add.w	ip, r1, #20
 80088f8:	2000      	movs	r0, #0
 80088fa:	f8dc 3000 	ldr.w	r3, [ip]
 80088fe:	b299      	uxth	r1, r3
 8008900:	fb02 6101 	mla	r1, r2, r1, r6
 8008904:	0c1e      	lsrs	r6, r3, #16
 8008906:	0c0b      	lsrs	r3, r1, #16
 8008908:	fb02 3306 	mla	r3, r2, r6, r3
 800890c:	b289      	uxth	r1, r1
 800890e:	3001      	adds	r0, #1
 8008910:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008914:	4285      	cmp	r5, r0
 8008916:	f84c 1b04 	str.w	r1, [ip], #4
 800891a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800891e:	dcec      	bgt.n	80088fa <__multadd+0x12>
 8008920:	b30e      	cbz	r6, 8008966 <__multadd+0x7e>
 8008922:	68a3      	ldr	r3, [r4, #8]
 8008924:	42ab      	cmp	r3, r5
 8008926:	dc19      	bgt.n	800895c <__multadd+0x74>
 8008928:	6861      	ldr	r1, [r4, #4]
 800892a:	4638      	mov	r0, r7
 800892c:	3101      	adds	r1, #1
 800892e:	f7ff ff79 	bl	8008824 <_Balloc>
 8008932:	4680      	mov	r8, r0
 8008934:	b928      	cbnz	r0, 8008942 <__multadd+0x5a>
 8008936:	4602      	mov	r2, r0
 8008938:	4b0c      	ldr	r3, [pc, #48]	; (800896c <__multadd+0x84>)
 800893a:	480d      	ldr	r0, [pc, #52]	; (8008970 <__multadd+0x88>)
 800893c:	21b5      	movs	r1, #181	; 0xb5
 800893e:	f000 fd57 	bl	80093f0 <__assert_func>
 8008942:	6922      	ldr	r2, [r4, #16]
 8008944:	3202      	adds	r2, #2
 8008946:	f104 010c 	add.w	r1, r4, #12
 800894a:	0092      	lsls	r2, r2, #2
 800894c:	300c      	adds	r0, #12
 800894e:	f7fe fc41 	bl	80071d4 <memcpy>
 8008952:	4621      	mov	r1, r4
 8008954:	4638      	mov	r0, r7
 8008956:	f7ff ffa5 	bl	80088a4 <_Bfree>
 800895a:	4644      	mov	r4, r8
 800895c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008960:	3501      	adds	r5, #1
 8008962:	615e      	str	r6, [r3, #20]
 8008964:	6125      	str	r5, [r4, #16]
 8008966:	4620      	mov	r0, r4
 8008968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800896c:	0800b617 	.word	0x0800b617
 8008970:	0800b628 	.word	0x0800b628

08008974 <__hi0bits>:
 8008974:	0c03      	lsrs	r3, r0, #16
 8008976:	041b      	lsls	r3, r3, #16
 8008978:	b9d3      	cbnz	r3, 80089b0 <__hi0bits+0x3c>
 800897a:	0400      	lsls	r0, r0, #16
 800897c:	2310      	movs	r3, #16
 800897e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008982:	bf04      	itt	eq
 8008984:	0200      	lsleq	r0, r0, #8
 8008986:	3308      	addeq	r3, #8
 8008988:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800898c:	bf04      	itt	eq
 800898e:	0100      	lsleq	r0, r0, #4
 8008990:	3304      	addeq	r3, #4
 8008992:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008996:	bf04      	itt	eq
 8008998:	0080      	lsleq	r0, r0, #2
 800899a:	3302      	addeq	r3, #2
 800899c:	2800      	cmp	r0, #0
 800899e:	db05      	blt.n	80089ac <__hi0bits+0x38>
 80089a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80089a4:	f103 0301 	add.w	r3, r3, #1
 80089a8:	bf08      	it	eq
 80089aa:	2320      	moveq	r3, #32
 80089ac:	4618      	mov	r0, r3
 80089ae:	4770      	bx	lr
 80089b0:	2300      	movs	r3, #0
 80089b2:	e7e4      	b.n	800897e <__hi0bits+0xa>

080089b4 <__lo0bits>:
 80089b4:	6803      	ldr	r3, [r0, #0]
 80089b6:	f013 0207 	ands.w	r2, r3, #7
 80089ba:	4601      	mov	r1, r0
 80089bc:	d00b      	beq.n	80089d6 <__lo0bits+0x22>
 80089be:	07da      	lsls	r2, r3, #31
 80089c0:	d423      	bmi.n	8008a0a <__lo0bits+0x56>
 80089c2:	0798      	lsls	r0, r3, #30
 80089c4:	bf49      	itett	mi
 80089c6:	085b      	lsrmi	r3, r3, #1
 80089c8:	089b      	lsrpl	r3, r3, #2
 80089ca:	2001      	movmi	r0, #1
 80089cc:	600b      	strmi	r3, [r1, #0]
 80089ce:	bf5c      	itt	pl
 80089d0:	600b      	strpl	r3, [r1, #0]
 80089d2:	2002      	movpl	r0, #2
 80089d4:	4770      	bx	lr
 80089d6:	b298      	uxth	r0, r3
 80089d8:	b9a8      	cbnz	r0, 8008a06 <__lo0bits+0x52>
 80089da:	0c1b      	lsrs	r3, r3, #16
 80089dc:	2010      	movs	r0, #16
 80089de:	b2da      	uxtb	r2, r3
 80089e0:	b90a      	cbnz	r2, 80089e6 <__lo0bits+0x32>
 80089e2:	3008      	adds	r0, #8
 80089e4:	0a1b      	lsrs	r3, r3, #8
 80089e6:	071a      	lsls	r2, r3, #28
 80089e8:	bf04      	itt	eq
 80089ea:	091b      	lsreq	r3, r3, #4
 80089ec:	3004      	addeq	r0, #4
 80089ee:	079a      	lsls	r2, r3, #30
 80089f0:	bf04      	itt	eq
 80089f2:	089b      	lsreq	r3, r3, #2
 80089f4:	3002      	addeq	r0, #2
 80089f6:	07da      	lsls	r2, r3, #31
 80089f8:	d403      	bmi.n	8008a02 <__lo0bits+0x4e>
 80089fa:	085b      	lsrs	r3, r3, #1
 80089fc:	f100 0001 	add.w	r0, r0, #1
 8008a00:	d005      	beq.n	8008a0e <__lo0bits+0x5a>
 8008a02:	600b      	str	r3, [r1, #0]
 8008a04:	4770      	bx	lr
 8008a06:	4610      	mov	r0, r2
 8008a08:	e7e9      	b.n	80089de <__lo0bits+0x2a>
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	4770      	bx	lr
 8008a0e:	2020      	movs	r0, #32
 8008a10:	4770      	bx	lr
	...

08008a14 <__i2b>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	460c      	mov	r4, r1
 8008a18:	2101      	movs	r1, #1
 8008a1a:	f7ff ff03 	bl	8008824 <_Balloc>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	b928      	cbnz	r0, 8008a2e <__i2b+0x1a>
 8008a22:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <__i2b+0x24>)
 8008a24:	4805      	ldr	r0, [pc, #20]	; (8008a3c <__i2b+0x28>)
 8008a26:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008a2a:	f000 fce1 	bl	80093f0 <__assert_func>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	6144      	str	r4, [r0, #20]
 8008a32:	6103      	str	r3, [r0, #16]
 8008a34:	bd10      	pop	{r4, pc}
 8008a36:	bf00      	nop
 8008a38:	0800b617 	.word	0x0800b617
 8008a3c:	0800b628 	.word	0x0800b628

08008a40 <__multiply>:
 8008a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a44:	4691      	mov	r9, r2
 8008a46:	690a      	ldr	r2, [r1, #16]
 8008a48:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	bfb8      	it	lt
 8008a50:	460b      	movlt	r3, r1
 8008a52:	460c      	mov	r4, r1
 8008a54:	bfbc      	itt	lt
 8008a56:	464c      	movlt	r4, r9
 8008a58:	4699      	movlt	r9, r3
 8008a5a:	6927      	ldr	r7, [r4, #16]
 8008a5c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008a60:	68a3      	ldr	r3, [r4, #8]
 8008a62:	6861      	ldr	r1, [r4, #4]
 8008a64:	eb07 060a 	add.w	r6, r7, sl
 8008a68:	42b3      	cmp	r3, r6
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	bfb8      	it	lt
 8008a6e:	3101      	addlt	r1, #1
 8008a70:	f7ff fed8 	bl	8008824 <_Balloc>
 8008a74:	b930      	cbnz	r0, 8008a84 <__multiply+0x44>
 8008a76:	4602      	mov	r2, r0
 8008a78:	4b44      	ldr	r3, [pc, #272]	; (8008b8c <__multiply+0x14c>)
 8008a7a:	4845      	ldr	r0, [pc, #276]	; (8008b90 <__multiply+0x150>)
 8008a7c:	f240 115d 	movw	r1, #349	; 0x15d
 8008a80:	f000 fcb6 	bl	80093f0 <__assert_func>
 8008a84:	f100 0514 	add.w	r5, r0, #20
 8008a88:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a8c:	462b      	mov	r3, r5
 8008a8e:	2200      	movs	r2, #0
 8008a90:	4543      	cmp	r3, r8
 8008a92:	d321      	bcc.n	8008ad8 <__multiply+0x98>
 8008a94:	f104 0314 	add.w	r3, r4, #20
 8008a98:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008a9c:	f109 0314 	add.w	r3, r9, #20
 8008aa0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008aa4:	9202      	str	r2, [sp, #8]
 8008aa6:	1b3a      	subs	r2, r7, r4
 8008aa8:	3a15      	subs	r2, #21
 8008aaa:	f022 0203 	bic.w	r2, r2, #3
 8008aae:	3204      	adds	r2, #4
 8008ab0:	f104 0115 	add.w	r1, r4, #21
 8008ab4:	428f      	cmp	r7, r1
 8008ab6:	bf38      	it	cc
 8008ab8:	2204      	movcc	r2, #4
 8008aba:	9201      	str	r2, [sp, #4]
 8008abc:	9a02      	ldr	r2, [sp, #8]
 8008abe:	9303      	str	r3, [sp, #12]
 8008ac0:	429a      	cmp	r2, r3
 8008ac2:	d80c      	bhi.n	8008ade <__multiply+0x9e>
 8008ac4:	2e00      	cmp	r6, #0
 8008ac6:	dd03      	ble.n	8008ad0 <__multiply+0x90>
 8008ac8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d05a      	beq.n	8008b86 <__multiply+0x146>
 8008ad0:	6106      	str	r6, [r0, #16]
 8008ad2:	b005      	add	sp, #20
 8008ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ad8:	f843 2b04 	str.w	r2, [r3], #4
 8008adc:	e7d8      	b.n	8008a90 <__multiply+0x50>
 8008ade:	f8b3 a000 	ldrh.w	sl, [r3]
 8008ae2:	f1ba 0f00 	cmp.w	sl, #0
 8008ae6:	d024      	beq.n	8008b32 <__multiply+0xf2>
 8008ae8:	f104 0e14 	add.w	lr, r4, #20
 8008aec:	46a9      	mov	r9, r5
 8008aee:	f04f 0c00 	mov.w	ip, #0
 8008af2:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008af6:	f8d9 1000 	ldr.w	r1, [r9]
 8008afa:	fa1f fb82 	uxth.w	fp, r2
 8008afe:	b289      	uxth	r1, r1
 8008b00:	fb0a 110b 	mla	r1, sl, fp, r1
 8008b04:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008b08:	f8d9 2000 	ldr.w	r2, [r9]
 8008b0c:	4461      	add	r1, ip
 8008b0e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b12:	fb0a c20b 	mla	r2, sl, fp, ip
 8008b16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b1a:	b289      	uxth	r1, r1
 8008b1c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b20:	4577      	cmp	r7, lr
 8008b22:	f849 1b04 	str.w	r1, [r9], #4
 8008b26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008b2a:	d8e2      	bhi.n	8008af2 <__multiply+0xb2>
 8008b2c:	9a01      	ldr	r2, [sp, #4]
 8008b2e:	f845 c002 	str.w	ip, [r5, r2]
 8008b32:	9a03      	ldr	r2, [sp, #12]
 8008b34:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008b38:	3304      	adds	r3, #4
 8008b3a:	f1b9 0f00 	cmp.w	r9, #0
 8008b3e:	d020      	beq.n	8008b82 <__multiply+0x142>
 8008b40:	6829      	ldr	r1, [r5, #0]
 8008b42:	f104 0c14 	add.w	ip, r4, #20
 8008b46:	46ae      	mov	lr, r5
 8008b48:	f04f 0a00 	mov.w	sl, #0
 8008b4c:	f8bc b000 	ldrh.w	fp, [ip]
 8008b50:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008b54:	fb09 220b 	mla	r2, r9, fp, r2
 8008b58:	4492      	add	sl, r2
 8008b5a:	b289      	uxth	r1, r1
 8008b5c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008b60:	f84e 1b04 	str.w	r1, [lr], #4
 8008b64:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008b68:	f8be 1000 	ldrh.w	r1, [lr]
 8008b6c:	0c12      	lsrs	r2, r2, #16
 8008b6e:	fb09 1102 	mla	r1, r9, r2, r1
 8008b72:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008b76:	4567      	cmp	r7, ip
 8008b78:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008b7c:	d8e6      	bhi.n	8008b4c <__multiply+0x10c>
 8008b7e:	9a01      	ldr	r2, [sp, #4]
 8008b80:	50a9      	str	r1, [r5, r2]
 8008b82:	3504      	adds	r5, #4
 8008b84:	e79a      	b.n	8008abc <__multiply+0x7c>
 8008b86:	3e01      	subs	r6, #1
 8008b88:	e79c      	b.n	8008ac4 <__multiply+0x84>
 8008b8a:	bf00      	nop
 8008b8c:	0800b617 	.word	0x0800b617
 8008b90:	0800b628 	.word	0x0800b628

08008b94 <__pow5mult>:
 8008b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b98:	4615      	mov	r5, r2
 8008b9a:	f012 0203 	ands.w	r2, r2, #3
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	460f      	mov	r7, r1
 8008ba2:	d007      	beq.n	8008bb4 <__pow5mult+0x20>
 8008ba4:	4c25      	ldr	r4, [pc, #148]	; (8008c3c <__pow5mult+0xa8>)
 8008ba6:	3a01      	subs	r2, #1
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bae:	f7ff fe9b 	bl	80088e8 <__multadd>
 8008bb2:	4607      	mov	r7, r0
 8008bb4:	10ad      	asrs	r5, r5, #2
 8008bb6:	d03d      	beq.n	8008c34 <__pow5mult+0xa0>
 8008bb8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008bba:	b97c      	cbnz	r4, 8008bdc <__pow5mult+0x48>
 8008bbc:	2010      	movs	r0, #16
 8008bbe:	f7ff fe29 	bl	8008814 <malloc>
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	6270      	str	r0, [r6, #36]	; 0x24
 8008bc6:	b928      	cbnz	r0, 8008bd4 <__pow5mult+0x40>
 8008bc8:	4b1d      	ldr	r3, [pc, #116]	; (8008c40 <__pow5mult+0xac>)
 8008bca:	481e      	ldr	r0, [pc, #120]	; (8008c44 <__pow5mult+0xb0>)
 8008bcc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008bd0:	f000 fc0e 	bl	80093f0 <__assert_func>
 8008bd4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bd8:	6004      	str	r4, [r0, #0]
 8008bda:	60c4      	str	r4, [r0, #12]
 8008bdc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008be0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008be4:	b94c      	cbnz	r4, 8008bfa <__pow5mult+0x66>
 8008be6:	f240 2171 	movw	r1, #625	; 0x271
 8008bea:	4630      	mov	r0, r6
 8008bec:	f7ff ff12 	bl	8008a14 <__i2b>
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bf6:	4604      	mov	r4, r0
 8008bf8:	6003      	str	r3, [r0, #0]
 8008bfa:	f04f 0900 	mov.w	r9, #0
 8008bfe:	07eb      	lsls	r3, r5, #31
 8008c00:	d50a      	bpl.n	8008c18 <__pow5mult+0x84>
 8008c02:	4639      	mov	r1, r7
 8008c04:	4622      	mov	r2, r4
 8008c06:	4630      	mov	r0, r6
 8008c08:	f7ff ff1a 	bl	8008a40 <__multiply>
 8008c0c:	4639      	mov	r1, r7
 8008c0e:	4680      	mov	r8, r0
 8008c10:	4630      	mov	r0, r6
 8008c12:	f7ff fe47 	bl	80088a4 <_Bfree>
 8008c16:	4647      	mov	r7, r8
 8008c18:	106d      	asrs	r5, r5, #1
 8008c1a:	d00b      	beq.n	8008c34 <__pow5mult+0xa0>
 8008c1c:	6820      	ldr	r0, [r4, #0]
 8008c1e:	b938      	cbnz	r0, 8008c30 <__pow5mult+0x9c>
 8008c20:	4622      	mov	r2, r4
 8008c22:	4621      	mov	r1, r4
 8008c24:	4630      	mov	r0, r6
 8008c26:	f7ff ff0b 	bl	8008a40 <__multiply>
 8008c2a:	6020      	str	r0, [r4, #0]
 8008c2c:	f8c0 9000 	str.w	r9, [r0]
 8008c30:	4604      	mov	r4, r0
 8008c32:	e7e4      	b.n	8008bfe <__pow5mult+0x6a>
 8008c34:	4638      	mov	r0, r7
 8008c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c3a:	bf00      	nop
 8008c3c:	0800b778 	.word	0x0800b778
 8008c40:	0800b5a5 	.word	0x0800b5a5
 8008c44:	0800b628 	.word	0x0800b628

08008c48 <__lshift>:
 8008c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c4c:	460c      	mov	r4, r1
 8008c4e:	6849      	ldr	r1, [r1, #4]
 8008c50:	6923      	ldr	r3, [r4, #16]
 8008c52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c56:	68a3      	ldr	r3, [r4, #8]
 8008c58:	4607      	mov	r7, r0
 8008c5a:	4691      	mov	r9, r2
 8008c5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c60:	f108 0601 	add.w	r6, r8, #1
 8008c64:	42b3      	cmp	r3, r6
 8008c66:	db0b      	blt.n	8008c80 <__lshift+0x38>
 8008c68:	4638      	mov	r0, r7
 8008c6a:	f7ff fddb 	bl	8008824 <_Balloc>
 8008c6e:	4605      	mov	r5, r0
 8008c70:	b948      	cbnz	r0, 8008c86 <__lshift+0x3e>
 8008c72:	4602      	mov	r2, r0
 8008c74:	4b2a      	ldr	r3, [pc, #168]	; (8008d20 <__lshift+0xd8>)
 8008c76:	482b      	ldr	r0, [pc, #172]	; (8008d24 <__lshift+0xdc>)
 8008c78:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008c7c:	f000 fbb8 	bl	80093f0 <__assert_func>
 8008c80:	3101      	adds	r1, #1
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	e7ee      	b.n	8008c64 <__lshift+0x1c>
 8008c86:	2300      	movs	r3, #0
 8008c88:	f100 0114 	add.w	r1, r0, #20
 8008c8c:	f100 0210 	add.w	r2, r0, #16
 8008c90:	4618      	mov	r0, r3
 8008c92:	4553      	cmp	r3, sl
 8008c94:	db37      	blt.n	8008d06 <__lshift+0xbe>
 8008c96:	6920      	ldr	r0, [r4, #16]
 8008c98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c9c:	f104 0314 	add.w	r3, r4, #20
 8008ca0:	f019 091f 	ands.w	r9, r9, #31
 8008ca4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ca8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008cac:	d02f      	beq.n	8008d0e <__lshift+0xc6>
 8008cae:	f1c9 0e20 	rsb	lr, r9, #32
 8008cb2:	468a      	mov	sl, r1
 8008cb4:	f04f 0c00 	mov.w	ip, #0
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	fa02 f209 	lsl.w	r2, r2, r9
 8008cbe:	ea42 020c 	orr.w	r2, r2, ip
 8008cc2:	f84a 2b04 	str.w	r2, [sl], #4
 8008cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cca:	4298      	cmp	r0, r3
 8008ccc:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008cd0:	d8f2      	bhi.n	8008cb8 <__lshift+0x70>
 8008cd2:	1b03      	subs	r3, r0, r4
 8008cd4:	3b15      	subs	r3, #21
 8008cd6:	f023 0303 	bic.w	r3, r3, #3
 8008cda:	3304      	adds	r3, #4
 8008cdc:	f104 0215 	add.w	r2, r4, #21
 8008ce0:	4290      	cmp	r0, r2
 8008ce2:	bf38      	it	cc
 8008ce4:	2304      	movcc	r3, #4
 8008ce6:	f841 c003 	str.w	ip, [r1, r3]
 8008cea:	f1bc 0f00 	cmp.w	ip, #0
 8008cee:	d001      	beq.n	8008cf4 <__lshift+0xac>
 8008cf0:	f108 0602 	add.w	r6, r8, #2
 8008cf4:	3e01      	subs	r6, #1
 8008cf6:	4638      	mov	r0, r7
 8008cf8:	612e      	str	r6, [r5, #16]
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	f7ff fdd2 	bl	80088a4 <_Bfree>
 8008d00:	4628      	mov	r0, r5
 8008d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d06:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d0a:	3301      	adds	r3, #1
 8008d0c:	e7c1      	b.n	8008c92 <__lshift+0x4a>
 8008d0e:	3904      	subs	r1, #4
 8008d10:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d14:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d18:	4298      	cmp	r0, r3
 8008d1a:	d8f9      	bhi.n	8008d10 <__lshift+0xc8>
 8008d1c:	e7ea      	b.n	8008cf4 <__lshift+0xac>
 8008d1e:	bf00      	nop
 8008d20:	0800b617 	.word	0x0800b617
 8008d24:	0800b628 	.word	0x0800b628

08008d28 <__mcmp>:
 8008d28:	b530      	push	{r4, r5, lr}
 8008d2a:	6902      	ldr	r2, [r0, #16]
 8008d2c:	690c      	ldr	r4, [r1, #16]
 8008d2e:	1b12      	subs	r2, r2, r4
 8008d30:	d10e      	bne.n	8008d50 <__mcmp+0x28>
 8008d32:	f100 0314 	add.w	r3, r0, #20
 8008d36:	3114      	adds	r1, #20
 8008d38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008d3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008d40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008d44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008d48:	42a5      	cmp	r5, r4
 8008d4a:	d003      	beq.n	8008d54 <__mcmp+0x2c>
 8008d4c:	d305      	bcc.n	8008d5a <__mcmp+0x32>
 8008d4e:	2201      	movs	r2, #1
 8008d50:	4610      	mov	r0, r2
 8008d52:	bd30      	pop	{r4, r5, pc}
 8008d54:	4283      	cmp	r3, r0
 8008d56:	d3f3      	bcc.n	8008d40 <__mcmp+0x18>
 8008d58:	e7fa      	b.n	8008d50 <__mcmp+0x28>
 8008d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d5e:	e7f7      	b.n	8008d50 <__mcmp+0x28>

08008d60 <__mdiff>:
 8008d60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d64:	460c      	mov	r4, r1
 8008d66:	4606      	mov	r6, r0
 8008d68:	4611      	mov	r1, r2
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	4690      	mov	r8, r2
 8008d6e:	f7ff ffdb 	bl	8008d28 <__mcmp>
 8008d72:	1e05      	subs	r5, r0, #0
 8008d74:	d110      	bne.n	8008d98 <__mdiff+0x38>
 8008d76:	4629      	mov	r1, r5
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f7ff fd53 	bl	8008824 <_Balloc>
 8008d7e:	b930      	cbnz	r0, 8008d8e <__mdiff+0x2e>
 8008d80:	4b3a      	ldr	r3, [pc, #232]	; (8008e6c <__mdiff+0x10c>)
 8008d82:	4602      	mov	r2, r0
 8008d84:	f240 2132 	movw	r1, #562	; 0x232
 8008d88:	4839      	ldr	r0, [pc, #228]	; (8008e70 <__mdiff+0x110>)
 8008d8a:	f000 fb31 	bl	80093f0 <__assert_func>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d98:	bfa4      	itt	ge
 8008d9a:	4643      	movge	r3, r8
 8008d9c:	46a0      	movge	r8, r4
 8008d9e:	4630      	mov	r0, r6
 8008da0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008da4:	bfa6      	itte	ge
 8008da6:	461c      	movge	r4, r3
 8008da8:	2500      	movge	r5, #0
 8008daa:	2501      	movlt	r5, #1
 8008dac:	f7ff fd3a 	bl	8008824 <_Balloc>
 8008db0:	b920      	cbnz	r0, 8008dbc <__mdiff+0x5c>
 8008db2:	4b2e      	ldr	r3, [pc, #184]	; (8008e6c <__mdiff+0x10c>)
 8008db4:	4602      	mov	r2, r0
 8008db6:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008dba:	e7e5      	b.n	8008d88 <__mdiff+0x28>
 8008dbc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008dc0:	6926      	ldr	r6, [r4, #16]
 8008dc2:	60c5      	str	r5, [r0, #12]
 8008dc4:	f104 0914 	add.w	r9, r4, #20
 8008dc8:	f108 0514 	add.w	r5, r8, #20
 8008dcc:	f100 0e14 	add.w	lr, r0, #20
 8008dd0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008dd4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008dd8:	f108 0210 	add.w	r2, r8, #16
 8008ddc:	46f2      	mov	sl, lr
 8008dde:	2100      	movs	r1, #0
 8008de0:	f859 3b04 	ldr.w	r3, [r9], #4
 8008de4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008de8:	fa1f f883 	uxth.w	r8, r3
 8008dec:	fa11 f18b 	uxtah	r1, r1, fp
 8008df0:	0c1b      	lsrs	r3, r3, #16
 8008df2:	eba1 0808 	sub.w	r8, r1, r8
 8008df6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008dfa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008dfe:	fa1f f888 	uxth.w	r8, r8
 8008e02:	1419      	asrs	r1, r3, #16
 8008e04:	454e      	cmp	r6, r9
 8008e06:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008e0a:	f84a 3b04 	str.w	r3, [sl], #4
 8008e0e:	d8e7      	bhi.n	8008de0 <__mdiff+0x80>
 8008e10:	1b33      	subs	r3, r6, r4
 8008e12:	3b15      	subs	r3, #21
 8008e14:	f023 0303 	bic.w	r3, r3, #3
 8008e18:	3304      	adds	r3, #4
 8008e1a:	3415      	adds	r4, #21
 8008e1c:	42a6      	cmp	r6, r4
 8008e1e:	bf38      	it	cc
 8008e20:	2304      	movcc	r3, #4
 8008e22:	441d      	add	r5, r3
 8008e24:	4473      	add	r3, lr
 8008e26:	469e      	mov	lr, r3
 8008e28:	462e      	mov	r6, r5
 8008e2a:	4566      	cmp	r6, ip
 8008e2c:	d30e      	bcc.n	8008e4c <__mdiff+0xec>
 8008e2e:	f10c 0203 	add.w	r2, ip, #3
 8008e32:	1b52      	subs	r2, r2, r5
 8008e34:	f022 0203 	bic.w	r2, r2, #3
 8008e38:	3d03      	subs	r5, #3
 8008e3a:	45ac      	cmp	ip, r5
 8008e3c:	bf38      	it	cc
 8008e3e:	2200      	movcc	r2, #0
 8008e40:	441a      	add	r2, r3
 8008e42:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008e46:	b17b      	cbz	r3, 8008e68 <__mdiff+0x108>
 8008e48:	6107      	str	r7, [r0, #16]
 8008e4a:	e7a3      	b.n	8008d94 <__mdiff+0x34>
 8008e4c:	f856 8b04 	ldr.w	r8, [r6], #4
 8008e50:	fa11 f288 	uxtah	r2, r1, r8
 8008e54:	1414      	asrs	r4, r2, #16
 8008e56:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008e5a:	b292      	uxth	r2, r2
 8008e5c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008e60:	f84e 2b04 	str.w	r2, [lr], #4
 8008e64:	1421      	asrs	r1, r4, #16
 8008e66:	e7e0      	b.n	8008e2a <__mdiff+0xca>
 8008e68:	3f01      	subs	r7, #1
 8008e6a:	e7ea      	b.n	8008e42 <__mdiff+0xe2>
 8008e6c:	0800b617 	.word	0x0800b617
 8008e70:	0800b628 	.word	0x0800b628

08008e74 <__d2b>:
 8008e74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008e78:	4689      	mov	r9, r1
 8008e7a:	2101      	movs	r1, #1
 8008e7c:	ec57 6b10 	vmov	r6, r7, d0
 8008e80:	4690      	mov	r8, r2
 8008e82:	f7ff fccf 	bl	8008824 <_Balloc>
 8008e86:	4604      	mov	r4, r0
 8008e88:	b930      	cbnz	r0, 8008e98 <__d2b+0x24>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	4b25      	ldr	r3, [pc, #148]	; (8008f24 <__d2b+0xb0>)
 8008e8e:	4826      	ldr	r0, [pc, #152]	; (8008f28 <__d2b+0xb4>)
 8008e90:	f240 310a 	movw	r1, #778	; 0x30a
 8008e94:	f000 faac 	bl	80093f0 <__assert_func>
 8008e98:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008e9c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008ea0:	bb35      	cbnz	r5, 8008ef0 <__d2b+0x7c>
 8008ea2:	2e00      	cmp	r6, #0
 8008ea4:	9301      	str	r3, [sp, #4]
 8008ea6:	d028      	beq.n	8008efa <__d2b+0x86>
 8008ea8:	4668      	mov	r0, sp
 8008eaa:	9600      	str	r6, [sp, #0]
 8008eac:	f7ff fd82 	bl	80089b4 <__lo0bits>
 8008eb0:	9900      	ldr	r1, [sp, #0]
 8008eb2:	b300      	cbz	r0, 8008ef6 <__d2b+0x82>
 8008eb4:	9a01      	ldr	r2, [sp, #4]
 8008eb6:	f1c0 0320 	rsb	r3, r0, #32
 8008eba:	fa02 f303 	lsl.w	r3, r2, r3
 8008ebe:	430b      	orrs	r3, r1
 8008ec0:	40c2      	lsrs	r2, r0
 8008ec2:	6163      	str	r3, [r4, #20]
 8008ec4:	9201      	str	r2, [sp, #4]
 8008ec6:	9b01      	ldr	r3, [sp, #4]
 8008ec8:	61a3      	str	r3, [r4, #24]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	bf14      	ite	ne
 8008ece:	2202      	movne	r2, #2
 8008ed0:	2201      	moveq	r2, #1
 8008ed2:	6122      	str	r2, [r4, #16]
 8008ed4:	b1d5      	cbz	r5, 8008f0c <__d2b+0x98>
 8008ed6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008eda:	4405      	add	r5, r0
 8008edc:	f8c9 5000 	str.w	r5, [r9]
 8008ee0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ee4:	f8c8 0000 	str.w	r0, [r8]
 8008ee8:	4620      	mov	r0, r4
 8008eea:	b003      	add	sp, #12
 8008eec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ef0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ef4:	e7d5      	b.n	8008ea2 <__d2b+0x2e>
 8008ef6:	6161      	str	r1, [r4, #20]
 8008ef8:	e7e5      	b.n	8008ec6 <__d2b+0x52>
 8008efa:	a801      	add	r0, sp, #4
 8008efc:	f7ff fd5a 	bl	80089b4 <__lo0bits>
 8008f00:	9b01      	ldr	r3, [sp, #4]
 8008f02:	6163      	str	r3, [r4, #20]
 8008f04:	2201      	movs	r2, #1
 8008f06:	6122      	str	r2, [r4, #16]
 8008f08:	3020      	adds	r0, #32
 8008f0a:	e7e3      	b.n	8008ed4 <__d2b+0x60>
 8008f0c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008f10:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f14:	f8c9 0000 	str.w	r0, [r9]
 8008f18:	6918      	ldr	r0, [r3, #16]
 8008f1a:	f7ff fd2b 	bl	8008974 <__hi0bits>
 8008f1e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008f22:	e7df      	b.n	8008ee4 <__d2b+0x70>
 8008f24:	0800b617 	.word	0x0800b617
 8008f28:	0800b628 	.word	0x0800b628

08008f2c <_calloc_r>:
 8008f2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f2e:	fba1 2402 	umull	r2, r4, r1, r2
 8008f32:	b94c      	cbnz	r4, 8008f48 <_calloc_r+0x1c>
 8008f34:	4611      	mov	r1, r2
 8008f36:	9201      	str	r2, [sp, #4]
 8008f38:	f000 f87a 	bl	8009030 <_malloc_r>
 8008f3c:	9a01      	ldr	r2, [sp, #4]
 8008f3e:	4605      	mov	r5, r0
 8008f40:	b930      	cbnz	r0, 8008f50 <_calloc_r+0x24>
 8008f42:	4628      	mov	r0, r5
 8008f44:	b003      	add	sp, #12
 8008f46:	bd30      	pop	{r4, r5, pc}
 8008f48:	220c      	movs	r2, #12
 8008f4a:	6002      	str	r2, [r0, #0]
 8008f4c:	2500      	movs	r5, #0
 8008f4e:	e7f8      	b.n	8008f42 <_calloc_r+0x16>
 8008f50:	4621      	mov	r1, r4
 8008f52:	f7fe f94d 	bl	80071f0 <memset>
 8008f56:	e7f4      	b.n	8008f42 <_calloc_r+0x16>

08008f58 <_free_r>:
 8008f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f5a:	2900      	cmp	r1, #0
 8008f5c:	d044      	beq.n	8008fe8 <_free_r+0x90>
 8008f5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f62:	9001      	str	r0, [sp, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f1a1 0404 	sub.w	r4, r1, #4
 8008f6a:	bfb8      	it	lt
 8008f6c:	18e4      	addlt	r4, r4, r3
 8008f6e:	f000 fa9b 	bl	80094a8 <__malloc_lock>
 8008f72:	4a1e      	ldr	r2, [pc, #120]	; (8008fec <_free_r+0x94>)
 8008f74:	9801      	ldr	r0, [sp, #4]
 8008f76:	6813      	ldr	r3, [r2, #0]
 8008f78:	b933      	cbnz	r3, 8008f88 <_free_r+0x30>
 8008f7a:	6063      	str	r3, [r4, #4]
 8008f7c:	6014      	str	r4, [r2, #0]
 8008f7e:	b003      	add	sp, #12
 8008f80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f84:	f000 ba96 	b.w	80094b4 <__malloc_unlock>
 8008f88:	42a3      	cmp	r3, r4
 8008f8a:	d908      	bls.n	8008f9e <_free_r+0x46>
 8008f8c:	6825      	ldr	r5, [r4, #0]
 8008f8e:	1961      	adds	r1, r4, r5
 8008f90:	428b      	cmp	r3, r1
 8008f92:	bf01      	itttt	eq
 8008f94:	6819      	ldreq	r1, [r3, #0]
 8008f96:	685b      	ldreq	r3, [r3, #4]
 8008f98:	1949      	addeq	r1, r1, r5
 8008f9a:	6021      	streq	r1, [r4, #0]
 8008f9c:	e7ed      	b.n	8008f7a <_free_r+0x22>
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	b10b      	cbz	r3, 8008fa8 <_free_r+0x50>
 8008fa4:	42a3      	cmp	r3, r4
 8008fa6:	d9fa      	bls.n	8008f9e <_free_r+0x46>
 8008fa8:	6811      	ldr	r1, [r2, #0]
 8008faa:	1855      	adds	r5, r2, r1
 8008fac:	42a5      	cmp	r5, r4
 8008fae:	d10b      	bne.n	8008fc8 <_free_r+0x70>
 8008fb0:	6824      	ldr	r4, [r4, #0]
 8008fb2:	4421      	add	r1, r4
 8008fb4:	1854      	adds	r4, r2, r1
 8008fb6:	42a3      	cmp	r3, r4
 8008fb8:	6011      	str	r1, [r2, #0]
 8008fba:	d1e0      	bne.n	8008f7e <_free_r+0x26>
 8008fbc:	681c      	ldr	r4, [r3, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	6053      	str	r3, [r2, #4]
 8008fc2:	4421      	add	r1, r4
 8008fc4:	6011      	str	r1, [r2, #0]
 8008fc6:	e7da      	b.n	8008f7e <_free_r+0x26>
 8008fc8:	d902      	bls.n	8008fd0 <_free_r+0x78>
 8008fca:	230c      	movs	r3, #12
 8008fcc:	6003      	str	r3, [r0, #0]
 8008fce:	e7d6      	b.n	8008f7e <_free_r+0x26>
 8008fd0:	6825      	ldr	r5, [r4, #0]
 8008fd2:	1961      	adds	r1, r4, r5
 8008fd4:	428b      	cmp	r3, r1
 8008fd6:	bf04      	itt	eq
 8008fd8:	6819      	ldreq	r1, [r3, #0]
 8008fda:	685b      	ldreq	r3, [r3, #4]
 8008fdc:	6063      	str	r3, [r4, #4]
 8008fde:	bf04      	itt	eq
 8008fe0:	1949      	addeq	r1, r1, r5
 8008fe2:	6021      	streq	r1, [r4, #0]
 8008fe4:	6054      	str	r4, [r2, #4]
 8008fe6:	e7ca      	b.n	8008f7e <_free_r+0x26>
 8008fe8:	b003      	add	sp, #12
 8008fea:	bd30      	pop	{r4, r5, pc}
 8008fec:	20000770 	.word	0x20000770

08008ff0 <sbrk_aligned>:
 8008ff0:	b570      	push	{r4, r5, r6, lr}
 8008ff2:	4e0e      	ldr	r6, [pc, #56]	; (800902c <sbrk_aligned+0x3c>)
 8008ff4:	460c      	mov	r4, r1
 8008ff6:	6831      	ldr	r1, [r6, #0]
 8008ff8:	4605      	mov	r5, r0
 8008ffa:	b911      	cbnz	r1, 8009002 <sbrk_aligned+0x12>
 8008ffc:	f000 f9e8 	bl	80093d0 <_sbrk_r>
 8009000:	6030      	str	r0, [r6, #0]
 8009002:	4621      	mov	r1, r4
 8009004:	4628      	mov	r0, r5
 8009006:	f000 f9e3 	bl	80093d0 <_sbrk_r>
 800900a:	1c43      	adds	r3, r0, #1
 800900c:	d00a      	beq.n	8009024 <sbrk_aligned+0x34>
 800900e:	1cc4      	adds	r4, r0, #3
 8009010:	f024 0403 	bic.w	r4, r4, #3
 8009014:	42a0      	cmp	r0, r4
 8009016:	d007      	beq.n	8009028 <sbrk_aligned+0x38>
 8009018:	1a21      	subs	r1, r4, r0
 800901a:	4628      	mov	r0, r5
 800901c:	f000 f9d8 	bl	80093d0 <_sbrk_r>
 8009020:	3001      	adds	r0, #1
 8009022:	d101      	bne.n	8009028 <sbrk_aligned+0x38>
 8009024:	f04f 34ff 	mov.w	r4, #4294967295
 8009028:	4620      	mov	r0, r4
 800902a:	bd70      	pop	{r4, r5, r6, pc}
 800902c:	20000774 	.word	0x20000774

08009030 <_malloc_r>:
 8009030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009034:	1ccd      	adds	r5, r1, #3
 8009036:	f025 0503 	bic.w	r5, r5, #3
 800903a:	3508      	adds	r5, #8
 800903c:	2d0c      	cmp	r5, #12
 800903e:	bf38      	it	cc
 8009040:	250c      	movcc	r5, #12
 8009042:	2d00      	cmp	r5, #0
 8009044:	4607      	mov	r7, r0
 8009046:	db01      	blt.n	800904c <_malloc_r+0x1c>
 8009048:	42a9      	cmp	r1, r5
 800904a:	d905      	bls.n	8009058 <_malloc_r+0x28>
 800904c:	230c      	movs	r3, #12
 800904e:	603b      	str	r3, [r7, #0]
 8009050:	2600      	movs	r6, #0
 8009052:	4630      	mov	r0, r6
 8009054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009058:	4e2e      	ldr	r6, [pc, #184]	; (8009114 <_malloc_r+0xe4>)
 800905a:	f000 fa25 	bl	80094a8 <__malloc_lock>
 800905e:	6833      	ldr	r3, [r6, #0]
 8009060:	461c      	mov	r4, r3
 8009062:	bb34      	cbnz	r4, 80090b2 <_malloc_r+0x82>
 8009064:	4629      	mov	r1, r5
 8009066:	4638      	mov	r0, r7
 8009068:	f7ff ffc2 	bl	8008ff0 <sbrk_aligned>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	4604      	mov	r4, r0
 8009070:	d14d      	bne.n	800910e <_malloc_r+0xde>
 8009072:	6834      	ldr	r4, [r6, #0]
 8009074:	4626      	mov	r6, r4
 8009076:	2e00      	cmp	r6, #0
 8009078:	d140      	bne.n	80090fc <_malloc_r+0xcc>
 800907a:	6823      	ldr	r3, [r4, #0]
 800907c:	4631      	mov	r1, r6
 800907e:	4638      	mov	r0, r7
 8009080:	eb04 0803 	add.w	r8, r4, r3
 8009084:	f000 f9a4 	bl	80093d0 <_sbrk_r>
 8009088:	4580      	cmp	r8, r0
 800908a:	d13a      	bne.n	8009102 <_malloc_r+0xd2>
 800908c:	6821      	ldr	r1, [r4, #0]
 800908e:	3503      	adds	r5, #3
 8009090:	1a6d      	subs	r5, r5, r1
 8009092:	f025 0503 	bic.w	r5, r5, #3
 8009096:	3508      	adds	r5, #8
 8009098:	2d0c      	cmp	r5, #12
 800909a:	bf38      	it	cc
 800909c:	250c      	movcc	r5, #12
 800909e:	4629      	mov	r1, r5
 80090a0:	4638      	mov	r0, r7
 80090a2:	f7ff ffa5 	bl	8008ff0 <sbrk_aligned>
 80090a6:	3001      	adds	r0, #1
 80090a8:	d02b      	beq.n	8009102 <_malloc_r+0xd2>
 80090aa:	6823      	ldr	r3, [r4, #0]
 80090ac:	442b      	add	r3, r5
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	e00e      	b.n	80090d0 <_malloc_r+0xa0>
 80090b2:	6822      	ldr	r2, [r4, #0]
 80090b4:	1b52      	subs	r2, r2, r5
 80090b6:	d41e      	bmi.n	80090f6 <_malloc_r+0xc6>
 80090b8:	2a0b      	cmp	r2, #11
 80090ba:	d916      	bls.n	80090ea <_malloc_r+0xba>
 80090bc:	1961      	adds	r1, r4, r5
 80090be:	42a3      	cmp	r3, r4
 80090c0:	6025      	str	r5, [r4, #0]
 80090c2:	bf18      	it	ne
 80090c4:	6059      	strne	r1, [r3, #4]
 80090c6:	6863      	ldr	r3, [r4, #4]
 80090c8:	bf08      	it	eq
 80090ca:	6031      	streq	r1, [r6, #0]
 80090cc:	5162      	str	r2, [r4, r5]
 80090ce:	604b      	str	r3, [r1, #4]
 80090d0:	4638      	mov	r0, r7
 80090d2:	f104 060b 	add.w	r6, r4, #11
 80090d6:	f000 f9ed 	bl	80094b4 <__malloc_unlock>
 80090da:	f026 0607 	bic.w	r6, r6, #7
 80090de:	1d23      	adds	r3, r4, #4
 80090e0:	1af2      	subs	r2, r6, r3
 80090e2:	d0b6      	beq.n	8009052 <_malloc_r+0x22>
 80090e4:	1b9b      	subs	r3, r3, r6
 80090e6:	50a3      	str	r3, [r4, r2]
 80090e8:	e7b3      	b.n	8009052 <_malloc_r+0x22>
 80090ea:	6862      	ldr	r2, [r4, #4]
 80090ec:	42a3      	cmp	r3, r4
 80090ee:	bf0c      	ite	eq
 80090f0:	6032      	streq	r2, [r6, #0]
 80090f2:	605a      	strne	r2, [r3, #4]
 80090f4:	e7ec      	b.n	80090d0 <_malloc_r+0xa0>
 80090f6:	4623      	mov	r3, r4
 80090f8:	6864      	ldr	r4, [r4, #4]
 80090fa:	e7b2      	b.n	8009062 <_malloc_r+0x32>
 80090fc:	4634      	mov	r4, r6
 80090fe:	6876      	ldr	r6, [r6, #4]
 8009100:	e7b9      	b.n	8009076 <_malloc_r+0x46>
 8009102:	230c      	movs	r3, #12
 8009104:	603b      	str	r3, [r7, #0]
 8009106:	4638      	mov	r0, r7
 8009108:	f000 f9d4 	bl	80094b4 <__malloc_unlock>
 800910c:	e7a1      	b.n	8009052 <_malloc_r+0x22>
 800910e:	6025      	str	r5, [r4, #0]
 8009110:	e7de      	b.n	80090d0 <_malloc_r+0xa0>
 8009112:	bf00      	nop
 8009114:	20000770 	.word	0x20000770

08009118 <__ssputs_r>:
 8009118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800911c:	688e      	ldr	r6, [r1, #8]
 800911e:	429e      	cmp	r6, r3
 8009120:	4682      	mov	sl, r0
 8009122:	460c      	mov	r4, r1
 8009124:	4690      	mov	r8, r2
 8009126:	461f      	mov	r7, r3
 8009128:	d838      	bhi.n	800919c <__ssputs_r+0x84>
 800912a:	898a      	ldrh	r2, [r1, #12]
 800912c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009130:	d032      	beq.n	8009198 <__ssputs_r+0x80>
 8009132:	6825      	ldr	r5, [r4, #0]
 8009134:	6909      	ldr	r1, [r1, #16]
 8009136:	eba5 0901 	sub.w	r9, r5, r1
 800913a:	6965      	ldr	r5, [r4, #20]
 800913c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009140:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009144:	3301      	adds	r3, #1
 8009146:	444b      	add	r3, r9
 8009148:	106d      	asrs	r5, r5, #1
 800914a:	429d      	cmp	r5, r3
 800914c:	bf38      	it	cc
 800914e:	461d      	movcc	r5, r3
 8009150:	0553      	lsls	r3, r2, #21
 8009152:	d531      	bpl.n	80091b8 <__ssputs_r+0xa0>
 8009154:	4629      	mov	r1, r5
 8009156:	f7ff ff6b 	bl	8009030 <_malloc_r>
 800915a:	4606      	mov	r6, r0
 800915c:	b950      	cbnz	r0, 8009174 <__ssputs_r+0x5c>
 800915e:	230c      	movs	r3, #12
 8009160:	f8ca 3000 	str.w	r3, [sl]
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800916a:	81a3      	strh	r3, [r4, #12]
 800916c:	f04f 30ff 	mov.w	r0, #4294967295
 8009170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009174:	6921      	ldr	r1, [r4, #16]
 8009176:	464a      	mov	r2, r9
 8009178:	f7fe f82c 	bl	80071d4 <memcpy>
 800917c:	89a3      	ldrh	r3, [r4, #12]
 800917e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009186:	81a3      	strh	r3, [r4, #12]
 8009188:	6126      	str	r6, [r4, #16]
 800918a:	6165      	str	r5, [r4, #20]
 800918c:	444e      	add	r6, r9
 800918e:	eba5 0509 	sub.w	r5, r5, r9
 8009192:	6026      	str	r6, [r4, #0]
 8009194:	60a5      	str	r5, [r4, #8]
 8009196:	463e      	mov	r6, r7
 8009198:	42be      	cmp	r6, r7
 800919a:	d900      	bls.n	800919e <__ssputs_r+0x86>
 800919c:	463e      	mov	r6, r7
 800919e:	6820      	ldr	r0, [r4, #0]
 80091a0:	4632      	mov	r2, r6
 80091a2:	4641      	mov	r1, r8
 80091a4:	f000 f966 	bl	8009474 <memmove>
 80091a8:	68a3      	ldr	r3, [r4, #8]
 80091aa:	1b9b      	subs	r3, r3, r6
 80091ac:	60a3      	str	r3, [r4, #8]
 80091ae:	6823      	ldr	r3, [r4, #0]
 80091b0:	4433      	add	r3, r6
 80091b2:	6023      	str	r3, [r4, #0]
 80091b4:	2000      	movs	r0, #0
 80091b6:	e7db      	b.n	8009170 <__ssputs_r+0x58>
 80091b8:	462a      	mov	r2, r5
 80091ba:	f000 f981 	bl	80094c0 <_realloc_r>
 80091be:	4606      	mov	r6, r0
 80091c0:	2800      	cmp	r0, #0
 80091c2:	d1e1      	bne.n	8009188 <__ssputs_r+0x70>
 80091c4:	6921      	ldr	r1, [r4, #16]
 80091c6:	4650      	mov	r0, sl
 80091c8:	f7ff fec6 	bl	8008f58 <_free_r>
 80091cc:	e7c7      	b.n	800915e <__ssputs_r+0x46>
	...

080091d0 <_svfiprintf_r>:
 80091d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091d4:	4698      	mov	r8, r3
 80091d6:	898b      	ldrh	r3, [r1, #12]
 80091d8:	061b      	lsls	r3, r3, #24
 80091da:	b09d      	sub	sp, #116	; 0x74
 80091dc:	4607      	mov	r7, r0
 80091de:	460d      	mov	r5, r1
 80091e0:	4614      	mov	r4, r2
 80091e2:	d50e      	bpl.n	8009202 <_svfiprintf_r+0x32>
 80091e4:	690b      	ldr	r3, [r1, #16]
 80091e6:	b963      	cbnz	r3, 8009202 <_svfiprintf_r+0x32>
 80091e8:	2140      	movs	r1, #64	; 0x40
 80091ea:	f7ff ff21 	bl	8009030 <_malloc_r>
 80091ee:	6028      	str	r0, [r5, #0]
 80091f0:	6128      	str	r0, [r5, #16]
 80091f2:	b920      	cbnz	r0, 80091fe <_svfiprintf_r+0x2e>
 80091f4:	230c      	movs	r3, #12
 80091f6:	603b      	str	r3, [r7, #0]
 80091f8:	f04f 30ff 	mov.w	r0, #4294967295
 80091fc:	e0d1      	b.n	80093a2 <_svfiprintf_r+0x1d2>
 80091fe:	2340      	movs	r3, #64	; 0x40
 8009200:	616b      	str	r3, [r5, #20]
 8009202:	2300      	movs	r3, #0
 8009204:	9309      	str	r3, [sp, #36]	; 0x24
 8009206:	2320      	movs	r3, #32
 8009208:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800920c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009210:	2330      	movs	r3, #48	; 0x30
 8009212:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80093bc <_svfiprintf_r+0x1ec>
 8009216:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800921a:	f04f 0901 	mov.w	r9, #1
 800921e:	4623      	mov	r3, r4
 8009220:	469a      	mov	sl, r3
 8009222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009226:	b10a      	cbz	r2, 800922c <_svfiprintf_r+0x5c>
 8009228:	2a25      	cmp	r2, #37	; 0x25
 800922a:	d1f9      	bne.n	8009220 <_svfiprintf_r+0x50>
 800922c:	ebba 0b04 	subs.w	fp, sl, r4
 8009230:	d00b      	beq.n	800924a <_svfiprintf_r+0x7a>
 8009232:	465b      	mov	r3, fp
 8009234:	4622      	mov	r2, r4
 8009236:	4629      	mov	r1, r5
 8009238:	4638      	mov	r0, r7
 800923a:	f7ff ff6d 	bl	8009118 <__ssputs_r>
 800923e:	3001      	adds	r0, #1
 8009240:	f000 80aa 	beq.w	8009398 <_svfiprintf_r+0x1c8>
 8009244:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009246:	445a      	add	r2, fp
 8009248:	9209      	str	r2, [sp, #36]	; 0x24
 800924a:	f89a 3000 	ldrb.w	r3, [sl]
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 80a2 	beq.w	8009398 <_svfiprintf_r+0x1c8>
 8009254:	2300      	movs	r3, #0
 8009256:	f04f 32ff 	mov.w	r2, #4294967295
 800925a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800925e:	f10a 0a01 	add.w	sl, sl, #1
 8009262:	9304      	str	r3, [sp, #16]
 8009264:	9307      	str	r3, [sp, #28]
 8009266:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800926a:	931a      	str	r3, [sp, #104]	; 0x68
 800926c:	4654      	mov	r4, sl
 800926e:	2205      	movs	r2, #5
 8009270:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009274:	4851      	ldr	r0, [pc, #324]	; (80093bc <_svfiprintf_r+0x1ec>)
 8009276:	f7f6 ffd3 	bl	8000220 <memchr>
 800927a:	9a04      	ldr	r2, [sp, #16]
 800927c:	b9d8      	cbnz	r0, 80092b6 <_svfiprintf_r+0xe6>
 800927e:	06d0      	lsls	r0, r2, #27
 8009280:	bf44      	itt	mi
 8009282:	2320      	movmi	r3, #32
 8009284:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009288:	0711      	lsls	r1, r2, #28
 800928a:	bf44      	itt	mi
 800928c:	232b      	movmi	r3, #43	; 0x2b
 800928e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009292:	f89a 3000 	ldrb.w	r3, [sl]
 8009296:	2b2a      	cmp	r3, #42	; 0x2a
 8009298:	d015      	beq.n	80092c6 <_svfiprintf_r+0xf6>
 800929a:	9a07      	ldr	r2, [sp, #28]
 800929c:	4654      	mov	r4, sl
 800929e:	2000      	movs	r0, #0
 80092a0:	f04f 0c0a 	mov.w	ip, #10
 80092a4:	4621      	mov	r1, r4
 80092a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092aa:	3b30      	subs	r3, #48	; 0x30
 80092ac:	2b09      	cmp	r3, #9
 80092ae:	d94e      	bls.n	800934e <_svfiprintf_r+0x17e>
 80092b0:	b1b0      	cbz	r0, 80092e0 <_svfiprintf_r+0x110>
 80092b2:	9207      	str	r2, [sp, #28]
 80092b4:	e014      	b.n	80092e0 <_svfiprintf_r+0x110>
 80092b6:	eba0 0308 	sub.w	r3, r0, r8
 80092ba:	fa09 f303 	lsl.w	r3, r9, r3
 80092be:	4313      	orrs	r3, r2
 80092c0:	9304      	str	r3, [sp, #16]
 80092c2:	46a2      	mov	sl, r4
 80092c4:	e7d2      	b.n	800926c <_svfiprintf_r+0x9c>
 80092c6:	9b03      	ldr	r3, [sp, #12]
 80092c8:	1d19      	adds	r1, r3, #4
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	9103      	str	r1, [sp, #12]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	bfbb      	ittet	lt
 80092d2:	425b      	neglt	r3, r3
 80092d4:	f042 0202 	orrlt.w	r2, r2, #2
 80092d8:	9307      	strge	r3, [sp, #28]
 80092da:	9307      	strlt	r3, [sp, #28]
 80092dc:	bfb8      	it	lt
 80092de:	9204      	strlt	r2, [sp, #16]
 80092e0:	7823      	ldrb	r3, [r4, #0]
 80092e2:	2b2e      	cmp	r3, #46	; 0x2e
 80092e4:	d10c      	bne.n	8009300 <_svfiprintf_r+0x130>
 80092e6:	7863      	ldrb	r3, [r4, #1]
 80092e8:	2b2a      	cmp	r3, #42	; 0x2a
 80092ea:	d135      	bne.n	8009358 <_svfiprintf_r+0x188>
 80092ec:	9b03      	ldr	r3, [sp, #12]
 80092ee:	1d1a      	adds	r2, r3, #4
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	9203      	str	r2, [sp, #12]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	bfb8      	it	lt
 80092f8:	f04f 33ff 	movlt.w	r3, #4294967295
 80092fc:	3402      	adds	r4, #2
 80092fe:	9305      	str	r3, [sp, #20]
 8009300:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80093cc <_svfiprintf_r+0x1fc>
 8009304:	7821      	ldrb	r1, [r4, #0]
 8009306:	2203      	movs	r2, #3
 8009308:	4650      	mov	r0, sl
 800930a:	f7f6 ff89 	bl	8000220 <memchr>
 800930e:	b140      	cbz	r0, 8009322 <_svfiprintf_r+0x152>
 8009310:	2340      	movs	r3, #64	; 0x40
 8009312:	eba0 000a 	sub.w	r0, r0, sl
 8009316:	fa03 f000 	lsl.w	r0, r3, r0
 800931a:	9b04      	ldr	r3, [sp, #16]
 800931c:	4303      	orrs	r3, r0
 800931e:	3401      	adds	r4, #1
 8009320:	9304      	str	r3, [sp, #16]
 8009322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009326:	4826      	ldr	r0, [pc, #152]	; (80093c0 <_svfiprintf_r+0x1f0>)
 8009328:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800932c:	2206      	movs	r2, #6
 800932e:	f7f6 ff77 	bl	8000220 <memchr>
 8009332:	2800      	cmp	r0, #0
 8009334:	d038      	beq.n	80093a8 <_svfiprintf_r+0x1d8>
 8009336:	4b23      	ldr	r3, [pc, #140]	; (80093c4 <_svfiprintf_r+0x1f4>)
 8009338:	bb1b      	cbnz	r3, 8009382 <_svfiprintf_r+0x1b2>
 800933a:	9b03      	ldr	r3, [sp, #12]
 800933c:	3307      	adds	r3, #7
 800933e:	f023 0307 	bic.w	r3, r3, #7
 8009342:	3308      	adds	r3, #8
 8009344:	9303      	str	r3, [sp, #12]
 8009346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009348:	4433      	add	r3, r6
 800934a:	9309      	str	r3, [sp, #36]	; 0x24
 800934c:	e767      	b.n	800921e <_svfiprintf_r+0x4e>
 800934e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009352:	460c      	mov	r4, r1
 8009354:	2001      	movs	r0, #1
 8009356:	e7a5      	b.n	80092a4 <_svfiprintf_r+0xd4>
 8009358:	2300      	movs	r3, #0
 800935a:	3401      	adds	r4, #1
 800935c:	9305      	str	r3, [sp, #20]
 800935e:	4619      	mov	r1, r3
 8009360:	f04f 0c0a 	mov.w	ip, #10
 8009364:	4620      	mov	r0, r4
 8009366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800936a:	3a30      	subs	r2, #48	; 0x30
 800936c:	2a09      	cmp	r2, #9
 800936e:	d903      	bls.n	8009378 <_svfiprintf_r+0x1a8>
 8009370:	2b00      	cmp	r3, #0
 8009372:	d0c5      	beq.n	8009300 <_svfiprintf_r+0x130>
 8009374:	9105      	str	r1, [sp, #20]
 8009376:	e7c3      	b.n	8009300 <_svfiprintf_r+0x130>
 8009378:	fb0c 2101 	mla	r1, ip, r1, r2
 800937c:	4604      	mov	r4, r0
 800937e:	2301      	movs	r3, #1
 8009380:	e7f0      	b.n	8009364 <_svfiprintf_r+0x194>
 8009382:	ab03      	add	r3, sp, #12
 8009384:	9300      	str	r3, [sp, #0]
 8009386:	462a      	mov	r2, r5
 8009388:	4b0f      	ldr	r3, [pc, #60]	; (80093c8 <_svfiprintf_r+0x1f8>)
 800938a:	a904      	add	r1, sp, #16
 800938c:	4638      	mov	r0, r7
 800938e:	f7fd ffd7 	bl	8007340 <_printf_float>
 8009392:	1c42      	adds	r2, r0, #1
 8009394:	4606      	mov	r6, r0
 8009396:	d1d6      	bne.n	8009346 <_svfiprintf_r+0x176>
 8009398:	89ab      	ldrh	r3, [r5, #12]
 800939a:	065b      	lsls	r3, r3, #25
 800939c:	f53f af2c 	bmi.w	80091f8 <_svfiprintf_r+0x28>
 80093a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80093a2:	b01d      	add	sp, #116	; 0x74
 80093a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a8:	ab03      	add	r3, sp, #12
 80093aa:	9300      	str	r3, [sp, #0]
 80093ac:	462a      	mov	r2, r5
 80093ae:	4b06      	ldr	r3, [pc, #24]	; (80093c8 <_svfiprintf_r+0x1f8>)
 80093b0:	a904      	add	r1, sp, #16
 80093b2:	4638      	mov	r0, r7
 80093b4:	f7fe fa68 	bl	8007888 <_printf_i>
 80093b8:	e7eb      	b.n	8009392 <_svfiprintf_r+0x1c2>
 80093ba:	bf00      	nop
 80093bc:	0800b784 	.word	0x0800b784
 80093c0:	0800b78e 	.word	0x0800b78e
 80093c4:	08007341 	.word	0x08007341
 80093c8:	08009119 	.word	0x08009119
 80093cc:	0800b78a 	.word	0x0800b78a

080093d0 <_sbrk_r>:
 80093d0:	b538      	push	{r3, r4, r5, lr}
 80093d2:	4d06      	ldr	r5, [pc, #24]	; (80093ec <_sbrk_r+0x1c>)
 80093d4:	2300      	movs	r3, #0
 80093d6:	4604      	mov	r4, r0
 80093d8:	4608      	mov	r0, r1
 80093da:	602b      	str	r3, [r5, #0]
 80093dc:	f002 f86e 	bl	800b4bc <_sbrk>
 80093e0:	1c43      	adds	r3, r0, #1
 80093e2:	d102      	bne.n	80093ea <_sbrk_r+0x1a>
 80093e4:	682b      	ldr	r3, [r5, #0]
 80093e6:	b103      	cbz	r3, 80093ea <_sbrk_r+0x1a>
 80093e8:	6023      	str	r3, [r4, #0]
 80093ea:	bd38      	pop	{r3, r4, r5, pc}
 80093ec:	20000778 	.word	0x20000778

080093f0 <__assert_func>:
 80093f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093f2:	4614      	mov	r4, r2
 80093f4:	461a      	mov	r2, r3
 80093f6:	4b09      	ldr	r3, [pc, #36]	; (800941c <__assert_func+0x2c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4605      	mov	r5, r0
 80093fc:	68d8      	ldr	r0, [r3, #12]
 80093fe:	b14c      	cbz	r4, 8009414 <__assert_func+0x24>
 8009400:	4b07      	ldr	r3, [pc, #28]	; (8009420 <__assert_func+0x30>)
 8009402:	9100      	str	r1, [sp, #0]
 8009404:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009408:	4906      	ldr	r1, [pc, #24]	; (8009424 <__assert_func+0x34>)
 800940a:	462b      	mov	r3, r5
 800940c:	f000 f80e 	bl	800942c <fiprintf>
 8009410:	f000 faac 	bl	800996c <abort>
 8009414:	4b04      	ldr	r3, [pc, #16]	; (8009428 <__assert_func+0x38>)
 8009416:	461c      	mov	r4, r3
 8009418:	e7f3      	b.n	8009402 <__assert_func+0x12>
 800941a:	bf00      	nop
 800941c:	20000010 	.word	0x20000010
 8009420:	0800b795 	.word	0x0800b795
 8009424:	0800b7a2 	.word	0x0800b7a2
 8009428:	0800b7d0 	.word	0x0800b7d0

0800942c <fiprintf>:
 800942c:	b40e      	push	{r1, r2, r3}
 800942e:	b503      	push	{r0, r1, lr}
 8009430:	4601      	mov	r1, r0
 8009432:	ab03      	add	r3, sp, #12
 8009434:	4805      	ldr	r0, [pc, #20]	; (800944c <fiprintf+0x20>)
 8009436:	f853 2b04 	ldr.w	r2, [r3], #4
 800943a:	6800      	ldr	r0, [r0, #0]
 800943c:	9301      	str	r3, [sp, #4]
 800943e:	f000 f897 	bl	8009570 <_vfiprintf_r>
 8009442:	b002      	add	sp, #8
 8009444:	f85d eb04 	ldr.w	lr, [sp], #4
 8009448:	b003      	add	sp, #12
 800944a:	4770      	bx	lr
 800944c:	20000010 	.word	0x20000010

08009450 <__ascii_mbtowc>:
 8009450:	b082      	sub	sp, #8
 8009452:	b901      	cbnz	r1, 8009456 <__ascii_mbtowc+0x6>
 8009454:	a901      	add	r1, sp, #4
 8009456:	b142      	cbz	r2, 800946a <__ascii_mbtowc+0x1a>
 8009458:	b14b      	cbz	r3, 800946e <__ascii_mbtowc+0x1e>
 800945a:	7813      	ldrb	r3, [r2, #0]
 800945c:	600b      	str	r3, [r1, #0]
 800945e:	7812      	ldrb	r2, [r2, #0]
 8009460:	1e10      	subs	r0, r2, #0
 8009462:	bf18      	it	ne
 8009464:	2001      	movne	r0, #1
 8009466:	b002      	add	sp, #8
 8009468:	4770      	bx	lr
 800946a:	4610      	mov	r0, r2
 800946c:	e7fb      	b.n	8009466 <__ascii_mbtowc+0x16>
 800946e:	f06f 0001 	mvn.w	r0, #1
 8009472:	e7f8      	b.n	8009466 <__ascii_mbtowc+0x16>

08009474 <memmove>:
 8009474:	4288      	cmp	r0, r1
 8009476:	b510      	push	{r4, lr}
 8009478:	eb01 0402 	add.w	r4, r1, r2
 800947c:	d902      	bls.n	8009484 <memmove+0x10>
 800947e:	4284      	cmp	r4, r0
 8009480:	4623      	mov	r3, r4
 8009482:	d807      	bhi.n	8009494 <memmove+0x20>
 8009484:	1e43      	subs	r3, r0, #1
 8009486:	42a1      	cmp	r1, r4
 8009488:	d008      	beq.n	800949c <memmove+0x28>
 800948a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800948e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009492:	e7f8      	b.n	8009486 <memmove+0x12>
 8009494:	4402      	add	r2, r0
 8009496:	4601      	mov	r1, r0
 8009498:	428a      	cmp	r2, r1
 800949a:	d100      	bne.n	800949e <memmove+0x2a>
 800949c:	bd10      	pop	{r4, pc}
 800949e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094a6:	e7f7      	b.n	8009498 <memmove+0x24>

080094a8 <__malloc_lock>:
 80094a8:	4801      	ldr	r0, [pc, #4]	; (80094b0 <__malloc_lock+0x8>)
 80094aa:	f000 bc1f 	b.w	8009cec <__retarget_lock_acquire_recursive>
 80094ae:	bf00      	nop
 80094b0:	2000077c 	.word	0x2000077c

080094b4 <__malloc_unlock>:
 80094b4:	4801      	ldr	r0, [pc, #4]	; (80094bc <__malloc_unlock+0x8>)
 80094b6:	f000 bc1a 	b.w	8009cee <__retarget_lock_release_recursive>
 80094ba:	bf00      	nop
 80094bc:	2000077c 	.word	0x2000077c

080094c0 <_realloc_r>:
 80094c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c4:	4680      	mov	r8, r0
 80094c6:	4614      	mov	r4, r2
 80094c8:	460e      	mov	r6, r1
 80094ca:	b921      	cbnz	r1, 80094d6 <_realloc_r+0x16>
 80094cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80094d0:	4611      	mov	r1, r2
 80094d2:	f7ff bdad 	b.w	8009030 <_malloc_r>
 80094d6:	b92a      	cbnz	r2, 80094e4 <_realloc_r+0x24>
 80094d8:	f7ff fd3e 	bl	8008f58 <_free_r>
 80094dc:	4625      	mov	r5, r4
 80094de:	4628      	mov	r0, r5
 80094e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e4:	f000 fc6a 	bl	8009dbc <_malloc_usable_size_r>
 80094e8:	4284      	cmp	r4, r0
 80094ea:	4607      	mov	r7, r0
 80094ec:	d802      	bhi.n	80094f4 <_realloc_r+0x34>
 80094ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80094f2:	d812      	bhi.n	800951a <_realloc_r+0x5a>
 80094f4:	4621      	mov	r1, r4
 80094f6:	4640      	mov	r0, r8
 80094f8:	f7ff fd9a 	bl	8009030 <_malloc_r>
 80094fc:	4605      	mov	r5, r0
 80094fe:	2800      	cmp	r0, #0
 8009500:	d0ed      	beq.n	80094de <_realloc_r+0x1e>
 8009502:	42bc      	cmp	r4, r7
 8009504:	4622      	mov	r2, r4
 8009506:	4631      	mov	r1, r6
 8009508:	bf28      	it	cs
 800950a:	463a      	movcs	r2, r7
 800950c:	f7fd fe62 	bl	80071d4 <memcpy>
 8009510:	4631      	mov	r1, r6
 8009512:	4640      	mov	r0, r8
 8009514:	f7ff fd20 	bl	8008f58 <_free_r>
 8009518:	e7e1      	b.n	80094de <_realloc_r+0x1e>
 800951a:	4635      	mov	r5, r6
 800951c:	e7df      	b.n	80094de <_realloc_r+0x1e>

0800951e <__sfputc_r>:
 800951e:	6893      	ldr	r3, [r2, #8]
 8009520:	3b01      	subs	r3, #1
 8009522:	2b00      	cmp	r3, #0
 8009524:	b410      	push	{r4}
 8009526:	6093      	str	r3, [r2, #8]
 8009528:	da08      	bge.n	800953c <__sfputc_r+0x1e>
 800952a:	6994      	ldr	r4, [r2, #24]
 800952c:	42a3      	cmp	r3, r4
 800952e:	db01      	blt.n	8009534 <__sfputc_r+0x16>
 8009530:	290a      	cmp	r1, #10
 8009532:	d103      	bne.n	800953c <__sfputc_r+0x1e>
 8009534:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009538:	f000 b94a 	b.w	80097d0 <__swbuf_r>
 800953c:	6813      	ldr	r3, [r2, #0]
 800953e:	1c58      	adds	r0, r3, #1
 8009540:	6010      	str	r0, [r2, #0]
 8009542:	7019      	strb	r1, [r3, #0]
 8009544:	4608      	mov	r0, r1
 8009546:	f85d 4b04 	ldr.w	r4, [sp], #4
 800954a:	4770      	bx	lr

0800954c <__sfputs_r>:
 800954c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800954e:	4606      	mov	r6, r0
 8009550:	460f      	mov	r7, r1
 8009552:	4614      	mov	r4, r2
 8009554:	18d5      	adds	r5, r2, r3
 8009556:	42ac      	cmp	r4, r5
 8009558:	d101      	bne.n	800955e <__sfputs_r+0x12>
 800955a:	2000      	movs	r0, #0
 800955c:	e007      	b.n	800956e <__sfputs_r+0x22>
 800955e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009562:	463a      	mov	r2, r7
 8009564:	4630      	mov	r0, r6
 8009566:	f7ff ffda 	bl	800951e <__sfputc_r>
 800956a:	1c43      	adds	r3, r0, #1
 800956c:	d1f3      	bne.n	8009556 <__sfputs_r+0xa>
 800956e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009570 <_vfiprintf_r>:
 8009570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009574:	460d      	mov	r5, r1
 8009576:	b09d      	sub	sp, #116	; 0x74
 8009578:	4614      	mov	r4, r2
 800957a:	4698      	mov	r8, r3
 800957c:	4606      	mov	r6, r0
 800957e:	b118      	cbz	r0, 8009588 <_vfiprintf_r+0x18>
 8009580:	6983      	ldr	r3, [r0, #24]
 8009582:	b90b      	cbnz	r3, 8009588 <_vfiprintf_r+0x18>
 8009584:	f000 fb14 	bl	8009bb0 <__sinit>
 8009588:	4b89      	ldr	r3, [pc, #548]	; (80097b0 <_vfiprintf_r+0x240>)
 800958a:	429d      	cmp	r5, r3
 800958c:	d11b      	bne.n	80095c6 <_vfiprintf_r+0x56>
 800958e:	6875      	ldr	r5, [r6, #4]
 8009590:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009592:	07d9      	lsls	r1, r3, #31
 8009594:	d405      	bmi.n	80095a2 <_vfiprintf_r+0x32>
 8009596:	89ab      	ldrh	r3, [r5, #12]
 8009598:	059a      	lsls	r2, r3, #22
 800959a:	d402      	bmi.n	80095a2 <_vfiprintf_r+0x32>
 800959c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800959e:	f000 fba5 	bl	8009cec <__retarget_lock_acquire_recursive>
 80095a2:	89ab      	ldrh	r3, [r5, #12]
 80095a4:	071b      	lsls	r3, r3, #28
 80095a6:	d501      	bpl.n	80095ac <_vfiprintf_r+0x3c>
 80095a8:	692b      	ldr	r3, [r5, #16]
 80095aa:	b9eb      	cbnz	r3, 80095e8 <_vfiprintf_r+0x78>
 80095ac:	4629      	mov	r1, r5
 80095ae:	4630      	mov	r0, r6
 80095b0:	f000 f96e 	bl	8009890 <__swsetup_r>
 80095b4:	b1c0      	cbz	r0, 80095e8 <_vfiprintf_r+0x78>
 80095b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095b8:	07dc      	lsls	r4, r3, #31
 80095ba:	d50e      	bpl.n	80095da <_vfiprintf_r+0x6a>
 80095bc:	f04f 30ff 	mov.w	r0, #4294967295
 80095c0:	b01d      	add	sp, #116	; 0x74
 80095c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c6:	4b7b      	ldr	r3, [pc, #492]	; (80097b4 <_vfiprintf_r+0x244>)
 80095c8:	429d      	cmp	r5, r3
 80095ca:	d101      	bne.n	80095d0 <_vfiprintf_r+0x60>
 80095cc:	68b5      	ldr	r5, [r6, #8]
 80095ce:	e7df      	b.n	8009590 <_vfiprintf_r+0x20>
 80095d0:	4b79      	ldr	r3, [pc, #484]	; (80097b8 <_vfiprintf_r+0x248>)
 80095d2:	429d      	cmp	r5, r3
 80095d4:	bf08      	it	eq
 80095d6:	68f5      	ldreq	r5, [r6, #12]
 80095d8:	e7da      	b.n	8009590 <_vfiprintf_r+0x20>
 80095da:	89ab      	ldrh	r3, [r5, #12]
 80095dc:	0598      	lsls	r0, r3, #22
 80095de:	d4ed      	bmi.n	80095bc <_vfiprintf_r+0x4c>
 80095e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095e2:	f000 fb84 	bl	8009cee <__retarget_lock_release_recursive>
 80095e6:	e7e9      	b.n	80095bc <_vfiprintf_r+0x4c>
 80095e8:	2300      	movs	r3, #0
 80095ea:	9309      	str	r3, [sp, #36]	; 0x24
 80095ec:	2320      	movs	r3, #32
 80095ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80095f6:	2330      	movs	r3, #48	; 0x30
 80095f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80097bc <_vfiprintf_r+0x24c>
 80095fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009600:	f04f 0901 	mov.w	r9, #1
 8009604:	4623      	mov	r3, r4
 8009606:	469a      	mov	sl, r3
 8009608:	f813 2b01 	ldrb.w	r2, [r3], #1
 800960c:	b10a      	cbz	r2, 8009612 <_vfiprintf_r+0xa2>
 800960e:	2a25      	cmp	r2, #37	; 0x25
 8009610:	d1f9      	bne.n	8009606 <_vfiprintf_r+0x96>
 8009612:	ebba 0b04 	subs.w	fp, sl, r4
 8009616:	d00b      	beq.n	8009630 <_vfiprintf_r+0xc0>
 8009618:	465b      	mov	r3, fp
 800961a:	4622      	mov	r2, r4
 800961c:	4629      	mov	r1, r5
 800961e:	4630      	mov	r0, r6
 8009620:	f7ff ff94 	bl	800954c <__sfputs_r>
 8009624:	3001      	adds	r0, #1
 8009626:	f000 80aa 	beq.w	800977e <_vfiprintf_r+0x20e>
 800962a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800962c:	445a      	add	r2, fp
 800962e:	9209      	str	r2, [sp, #36]	; 0x24
 8009630:	f89a 3000 	ldrb.w	r3, [sl]
 8009634:	2b00      	cmp	r3, #0
 8009636:	f000 80a2 	beq.w	800977e <_vfiprintf_r+0x20e>
 800963a:	2300      	movs	r3, #0
 800963c:	f04f 32ff 	mov.w	r2, #4294967295
 8009640:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009644:	f10a 0a01 	add.w	sl, sl, #1
 8009648:	9304      	str	r3, [sp, #16]
 800964a:	9307      	str	r3, [sp, #28]
 800964c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009650:	931a      	str	r3, [sp, #104]	; 0x68
 8009652:	4654      	mov	r4, sl
 8009654:	2205      	movs	r2, #5
 8009656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800965a:	4858      	ldr	r0, [pc, #352]	; (80097bc <_vfiprintf_r+0x24c>)
 800965c:	f7f6 fde0 	bl	8000220 <memchr>
 8009660:	9a04      	ldr	r2, [sp, #16]
 8009662:	b9d8      	cbnz	r0, 800969c <_vfiprintf_r+0x12c>
 8009664:	06d1      	lsls	r1, r2, #27
 8009666:	bf44      	itt	mi
 8009668:	2320      	movmi	r3, #32
 800966a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800966e:	0713      	lsls	r3, r2, #28
 8009670:	bf44      	itt	mi
 8009672:	232b      	movmi	r3, #43	; 0x2b
 8009674:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009678:	f89a 3000 	ldrb.w	r3, [sl]
 800967c:	2b2a      	cmp	r3, #42	; 0x2a
 800967e:	d015      	beq.n	80096ac <_vfiprintf_r+0x13c>
 8009680:	9a07      	ldr	r2, [sp, #28]
 8009682:	4654      	mov	r4, sl
 8009684:	2000      	movs	r0, #0
 8009686:	f04f 0c0a 	mov.w	ip, #10
 800968a:	4621      	mov	r1, r4
 800968c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009690:	3b30      	subs	r3, #48	; 0x30
 8009692:	2b09      	cmp	r3, #9
 8009694:	d94e      	bls.n	8009734 <_vfiprintf_r+0x1c4>
 8009696:	b1b0      	cbz	r0, 80096c6 <_vfiprintf_r+0x156>
 8009698:	9207      	str	r2, [sp, #28]
 800969a:	e014      	b.n	80096c6 <_vfiprintf_r+0x156>
 800969c:	eba0 0308 	sub.w	r3, r0, r8
 80096a0:	fa09 f303 	lsl.w	r3, r9, r3
 80096a4:	4313      	orrs	r3, r2
 80096a6:	9304      	str	r3, [sp, #16]
 80096a8:	46a2      	mov	sl, r4
 80096aa:	e7d2      	b.n	8009652 <_vfiprintf_r+0xe2>
 80096ac:	9b03      	ldr	r3, [sp, #12]
 80096ae:	1d19      	adds	r1, r3, #4
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	9103      	str	r1, [sp, #12]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	bfbb      	ittet	lt
 80096b8:	425b      	neglt	r3, r3
 80096ba:	f042 0202 	orrlt.w	r2, r2, #2
 80096be:	9307      	strge	r3, [sp, #28]
 80096c0:	9307      	strlt	r3, [sp, #28]
 80096c2:	bfb8      	it	lt
 80096c4:	9204      	strlt	r2, [sp, #16]
 80096c6:	7823      	ldrb	r3, [r4, #0]
 80096c8:	2b2e      	cmp	r3, #46	; 0x2e
 80096ca:	d10c      	bne.n	80096e6 <_vfiprintf_r+0x176>
 80096cc:	7863      	ldrb	r3, [r4, #1]
 80096ce:	2b2a      	cmp	r3, #42	; 0x2a
 80096d0:	d135      	bne.n	800973e <_vfiprintf_r+0x1ce>
 80096d2:	9b03      	ldr	r3, [sp, #12]
 80096d4:	1d1a      	adds	r2, r3, #4
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	9203      	str	r2, [sp, #12]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	bfb8      	it	lt
 80096de:	f04f 33ff 	movlt.w	r3, #4294967295
 80096e2:	3402      	adds	r4, #2
 80096e4:	9305      	str	r3, [sp, #20]
 80096e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80097cc <_vfiprintf_r+0x25c>
 80096ea:	7821      	ldrb	r1, [r4, #0]
 80096ec:	2203      	movs	r2, #3
 80096ee:	4650      	mov	r0, sl
 80096f0:	f7f6 fd96 	bl	8000220 <memchr>
 80096f4:	b140      	cbz	r0, 8009708 <_vfiprintf_r+0x198>
 80096f6:	2340      	movs	r3, #64	; 0x40
 80096f8:	eba0 000a 	sub.w	r0, r0, sl
 80096fc:	fa03 f000 	lsl.w	r0, r3, r0
 8009700:	9b04      	ldr	r3, [sp, #16]
 8009702:	4303      	orrs	r3, r0
 8009704:	3401      	adds	r4, #1
 8009706:	9304      	str	r3, [sp, #16]
 8009708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800970c:	482c      	ldr	r0, [pc, #176]	; (80097c0 <_vfiprintf_r+0x250>)
 800970e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009712:	2206      	movs	r2, #6
 8009714:	f7f6 fd84 	bl	8000220 <memchr>
 8009718:	2800      	cmp	r0, #0
 800971a:	d03f      	beq.n	800979c <_vfiprintf_r+0x22c>
 800971c:	4b29      	ldr	r3, [pc, #164]	; (80097c4 <_vfiprintf_r+0x254>)
 800971e:	bb1b      	cbnz	r3, 8009768 <_vfiprintf_r+0x1f8>
 8009720:	9b03      	ldr	r3, [sp, #12]
 8009722:	3307      	adds	r3, #7
 8009724:	f023 0307 	bic.w	r3, r3, #7
 8009728:	3308      	adds	r3, #8
 800972a:	9303      	str	r3, [sp, #12]
 800972c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800972e:	443b      	add	r3, r7
 8009730:	9309      	str	r3, [sp, #36]	; 0x24
 8009732:	e767      	b.n	8009604 <_vfiprintf_r+0x94>
 8009734:	fb0c 3202 	mla	r2, ip, r2, r3
 8009738:	460c      	mov	r4, r1
 800973a:	2001      	movs	r0, #1
 800973c:	e7a5      	b.n	800968a <_vfiprintf_r+0x11a>
 800973e:	2300      	movs	r3, #0
 8009740:	3401      	adds	r4, #1
 8009742:	9305      	str	r3, [sp, #20]
 8009744:	4619      	mov	r1, r3
 8009746:	f04f 0c0a 	mov.w	ip, #10
 800974a:	4620      	mov	r0, r4
 800974c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009750:	3a30      	subs	r2, #48	; 0x30
 8009752:	2a09      	cmp	r2, #9
 8009754:	d903      	bls.n	800975e <_vfiprintf_r+0x1ee>
 8009756:	2b00      	cmp	r3, #0
 8009758:	d0c5      	beq.n	80096e6 <_vfiprintf_r+0x176>
 800975a:	9105      	str	r1, [sp, #20]
 800975c:	e7c3      	b.n	80096e6 <_vfiprintf_r+0x176>
 800975e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009762:	4604      	mov	r4, r0
 8009764:	2301      	movs	r3, #1
 8009766:	e7f0      	b.n	800974a <_vfiprintf_r+0x1da>
 8009768:	ab03      	add	r3, sp, #12
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	462a      	mov	r2, r5
 800976e:	4b16      	ldr	r3, [pc, #88]	; (80097c8 <_vfiprintf_r+0x258>)
 8009770:	a904      	add	r1, sp, #16
 8009772:	4630      	mov	r0, r6
 8009774:	f7fd fde4 	bl	8007340 <_printf_float>
 8009778:	4607      	mov	r7, r0
 800977a:	1c78      	adds	r0, r7, #1
 800977c:	d1d6      	bne.n	800972c <_vfiprintf_r+0x1bc>
 800977e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009780:	07d9      	lsls	r1, r3, #31
 8009782:	d405      	bmi.n	8009790 <_vfiprintf_r+0x220>
 8009784:	89ab      	ldrh	r3, [r5, #12]
 8009786:	059a      	lsls	r2, r3, #22
 8009788:	d402      	bmi.n	8009790 <_vfiprintf_r+0x220>
 800978a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800978c:	f000 faaf 	bl	8009cee <__retarget_lock_release_recursive>
 8009790:	89ab      	ldrh	r3, [r5, #12]
 8009792:	065b      	lsls	r3, r3, #25
 8009794:	f53f af12 	bmi.w	80095bc <_vfiprintf_r+0x4c>
 8009798:	9809      	ldr	r0, [sp, #36]	; 0x24
 800979a:	e711      	b.n	80095c0 <_vfiprintf_r+0x50>
 800979c:	ab03      	add	r3, sp, #12
 800979e:	9300      	str	r3, [sp, #0]
 80097a0:	462a      	mov	r2, r5
 80097a2:	4b09      	ldr	r3, [pc, #36]	; (80097c8 <_vfiprintf_r+0x258>)
 80097a4:	a904      	add	r1, sp, #16
 80097a6:	4630      	mov	r0, r6
 80097a8:	f7fe f86e 	bl	8007888 <_printf_i>
 80097ac:	e7e4      	b.n	8009778 <_vfiprintf_r+0x208>
 80097ae:	bf00      	nop
 80097b0:	0800b8fc 	.word	0x0800b8fc
 80097b4:	0800b91c 	.word	0x0800b91c
 80097b8:	0800b8dc 	.word	0x0800b8dc
 80097bc:	0800b784 	.word	0x0800b784
 80097c0:	0800b78e 	.word	0x0800b78e
 80097c4:	08007341 	.word	0x08007341
 80097c8:	0800954d 	.word	0x0800954d
 80097cc:	0800b78a 	.word	0x0800b78a

080097d0 <__swbuf_r>:
 80097d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097d2:	460e      	mov	r6, r1
 80097d4:	4614      	mov	r4, r2
 80097d6:	4605      	mov	r5, r0
 80097d8:	b118      	cbz	r0, 80097e2 <__swbuf_r+0x12>
 80097da:	6983      	ldr	r3, [r0, #24]
 80097dc:	b90b      	cbnz	r3, 80097e2 <__swbuf_r+0x12>
 80097de:	f000 f9e7 	bl	8009bb0 <__sinit>
 80097e2:	4b21      	ldr	r3, [pc, #132]	; (8009868 <__swbuf_r+0x98>)
 80097e4:	429c      	cmp	r4, r3
 80097e6:	d12b      	bne.n	8009840 <__swbuf_r+0x70>
 80097e8:	686c      	ldr	r4, [r5, #4]
 80097ea:	69a3      	ldr	r3, [r4, #24]
 80097ec:	60a3      	str	r3, [r4, #8]
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	071a      	lsls	r2, r3, #28
 80097f2:	d52f      	bpl.n	8009854 <__swbuf_r+0x84>
 80097f4:	6923      	ldr	r3, [r4, #16]
 80097f6:	b36b      	cbz	r3, 8009854 <__swbuf_r+0x84>
 80097f8:	6923      	ldr	r3, [r4, #16]
 80097fa:	6820      	ldr	r0, [r4, #0]
 80097fc:	1ac0      	subs	r0, r0, r3
 80097fe:	6963      	ldr	r3, [r4, #20]
 8009800:	b2f6      	uxtb	r6, r6
 8009802:	4283      	cmp	r3, r0
 8009804:	4637      	mov	r7, r6
 8009806:	dc04      	bgt.n	8009812 <__swbuf_r+0x42>
 8009808:	4621      	mov	r1, r4
 800980a:	4628      	mov	r0, r5
 800980c:	f000 f93c 	bl	8009a88 <_fflush_r>
 8009810:	bb30      	cbnz	r0, 8009860 <__swbuf_r+0x90>
 8009812:	68a3      	ldr	r3, [r4, #8]
 8009814:	3b01      	subs	r3, #1
 8009816:	60a3      	str	r3, [r4, #8]
 8009818:	6823      	ldr	r3, [r4, #0]
 800981a:	1c5a      	adds	r2, r3, #1
 800981c:	6022      	str	r2, [r4, #0]
 800981e:	701e      	strb	r6, [r3, #0]
 8009820:	6963      	ldr	r3, [r4, #20]
 8009822:	3001      	adds	r0, #1
 8009824:	4283      	cmp	r3, r0
 8009826:	d004      	beq.n	8009832 <__swbuf_r+0x62>
 8009828:	89a3      	ldrh	r3, [r4, #12]
 800982a:	07db      	lsls	r3, r3, #31
 800982c:	d506      	bpl.n	800983c <__swbuf_r+0x6c>
 800982e:	2e0a      	cmp	r6, #10
 8009830:	d104      	bne.n	800983c <__swbuf_r+0x6c>
 8009832:	4621      	mov	r1, r4
 8009834:	4628      	mov	r0, r5
 8009836:	f000 f927 	bl	8009a88 <_fflush_r>
 800983a:	b988      	cbnz	r0, 8009860 <__swbuf_r+0x90>
 800983c:	4638      	mov	r0, r7
 800983e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009840:	4b0a      	ldr	r3, [pc, #40]	; (800986c <__swbuf_r+0x9c>)
 8009842:	429c      	cmp	r4, r3
 8009844:	d101      	bne.n	800984a <__swbuf_r+0x7a>
 8009846:	68ac      	ldr	r4, [r5, #8]
 8009848:	e7cf      	b.n	80097ea <__swbuf_r+0x1a>
 800984a:	4b09      	ldr	r3, [pc, #36]	; (8009870 <__swbuf_r+0xa0>)
 800984c:	429c      	cmp	r4, r3
 800984e:	bf08      	it	eq
 8009850:	68ec      	ldreq	r4, [r5, #12]
 8009852:	e7ca      	b.n	80097ea <__swbuf_r+0x1a>
 8009854:	4621      	mov	r1, r4
 8009856:	4628      	mov	r0, r5
 8009858:	f000 f81a 	bl	8009890 <__swsetup_r>
 800985c:	2800      	cmp	r0, #0
 800985e:	d0cb      	beq.n	80097f8 <__swbuf_r+0x28>
 8009860:	f04f 37ff 	mov.w	r7, #4294967295
 8009864:	e7ea      	b.n	800983c <__swbuf_r+0x6c>
 8009866:	bf00      	nop
 8009868:	0800b8fc 	.word	0x0800b8fc
 800986c:	0800b91c 	.word	0x0800b91c
 8009870:	0800b8dc 	.word	0x0800b8dc

08009874 <__ascii_wctomb>:
 8009874:	b149      	cbz	r1, 800988a <__ascii_wctomb+0x16>
 8009876:	2aff      	cmp	r2, #255	; 0xff
 8009878:	bf85      	ittet	hi
 800987a:	238a      	movhi	r3, #138	; 0x8a
 800987c:	6003      	strhi	r3, [r0, #0]
 800987e:	700a      	strbls	r2, [r1, #0]
 8009880:	f04f 30ff 	movhi.w	r0, #4294967295
 8009884:	bf98      	it	ls
 8009886:	2001      	movls	r0, #1
 8009888:	4770      	bx	lr
 800988a:	4608      	mov	r0, r1
 800988c:	4770      	bx	lr
	...

08009890 <__swsetup_r>:
 8009890:	4b32      	ldr	r3, [pc, #200]	; (800995c <__swsetup_r+0xcc>)
 8009892:	b570      	push	{r4, r5, r6, lr}
 8009894:	681d      	ldr	r5, [r3, #0]
 8009896:	4606      	mov	r6, r0
 8009898:	460c      	mov	r4, r1
 800989a:	b125      	cbz	r5, 80098a6 <__swsetup_r+0x16>
 800989c:	69ab      	ldr	r3, [r5, #24]
 800989e:	b913      	cbnz	r3, 80098a6 <__swsetup_r+0x16>
 80098a0:	4628      	mov	r0, r5
 80098a2:	f000 f985 	bl	8009bb0 <__sinit>
 80098a6:	4b2e      	ldr	r3, [pc, #184]	; (8009960 <__swsetup_r+0xd0>)
 80098a8:	429c      	cmp	r4, r3
 80098aa:	d10f      	bne.n	80098cc <__swsetup_r+0x3c>
 80098ac:	686c      	ldr	r4, [r5, #4]
 80098ae:	89a3      	ldrh	r3, [r4, #12]
 80098b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098b4:	0719      	lsls	r1, r3, #28
 80098b6:	d42c      	bmi.n	8009912 <__swsetup_r+0x82>
 80098b8:	06dd      	lsls	r5, r3, #27
 80098ba:	d411      	bmi.n	80098e0 <__swsetup_r+0x50>
 80098bc:	2309      	movs	r3, #9
 80098be:	6033      	str	r3, [r6, #0]
 80098c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80098c4:	81a3      	strh	r3, [r4, #12]
 80098c6:	f04f 30ff 	mov.w	r0, #4294967295
 80098ca:	e03e      	b.n	800994a <__swsetup_r+0xba>
 80098cc:	4b25      	ldr	r3, [pc, #148]	; (8009964 <__swsetup_r+0xd4>)
 80098ce:	429c      	cmp	r4, r3
 80098d0:	d101      	bne.n	80098d6 <__swsetup_r+0x46>
 80098d2:	68ac      	ldr	r4, [r5, #8]
 80098d4:	e7eb      	b.n	80098ae <__swsetup_r+0x1e>
 80098d6:	4b24      	ldr	r3, [pc, #144]	; (8009968 <__swsetup_r+0xd8>)
 80098d8:	429c      	cmp	r4, r3
 80098da:	bf08      	it	eq
 80098dc:	68ec      	ldreq	r4, [r5, #12]
 80098de:	e7e6      	b.n	80098ae <__swsetup_r+0x1e>
 80098e0:	0758      	lsls	r0, r3, #29
 80098e2:	d512      	bpl.n	800990a <__swsetup_r+0x7a>
 80098e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80098e6:	b141      	cbz	r1, 80098fa <__swsetup_r+0x6a>
 80098e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80098ec:	4299      	cmp	r1, r3
 80098ee:	d002      	beq.n	80098f6 <__swsetup_r+0x66>
 80098f0:	4630      	mov	r0, r6
 80098f2:	f7ff fb31 	bl	8008f58 <_free_r>
 80098f6:	2300      	movs	r3, #0
 80098f8:	6363      	str	r3, [r4, #52]	; 0x34
 80098fa:	89a3      	ldrh	r3, [r4, #12]
 80098fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	2300      	movs	r3, #0
 8009904:	6063      	str	r3, [r4, #4]
 8009906:	6923      	ldr	r3, [r4, #16]
 8009908:	6023      	str	r3, [r4, #0]
 800990a:	89a3      	ldrh	r3, [r4, #12]
 800990c:	f043 0308 	orr.w	r3, r3, #8
 8009910:	81a3      	strh	r3, [r4, #12]
 8009912:	6923      	ldr	r3, [r4, #16]
 8009914:	b94b      	cbnz	r3, 800992a <__swsetup_r+0x9a>
 8009916:	89a3      	ldrh	r3, [r4, #12]
 8009918:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800991c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009920:	d003      	beq.n	800992a <__swsetup_r+0x9a>
 8009922:	4621      	mov	r1, r4
 8009924:	4630      	mov	r0, r6
 8009926:	f000 fa09 	bl	8009d3c <__smakebuf_r>
 800992a:	89a0      	ldrh	r0, [r4, #12]
 800992c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009930:	f010 0301 	ands.w	r3, r0, #1
 8009934:	d00a      	beq.n	800994c <__swsetup_r+0xbc>
 8009936:	2300      	movs	r3, #0
 8009938:	60a3      	str	r3, [r4, #8]
 800993a:	6963      	ldr	r3, [r4, #20]
 800993c:	425b      	negs	r3, r3
 800993e:	61a3      	str	r3, [r4, #24]
 8009940:	6923      	ldr	r3, [r4, #16]
 8009942:	b943      	cbnz	r3, 8009956 <__swsetup_r+0xc6>
 8009944:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009948:	d1ba      	bne.n	80098c0 <__swsetup_r+0x30>
 800994a:	bd70      	pop	{r4, r5, r6, pc}
 800994c:	0781      	lsls	r1, r0, #30
 800994e:	bf58      	it	pl
 8009950:	6963      	ldrpl	r3, [r4, #20]
 8009952:	60a3      	str	r3, [r4, #8]
 8009954:	e7f4      	b.n	8009940 <__swsetup_r+0xb0>
 8009956:	2000      	movs	r0, #0
 8009958:	e7f7      	b.n	800994a <__swsetup_r+0xba>
 800995a:	bf00      	nop
 800995c:	20000010 	.word	0x20000010
 8009960:	0800b8fc 	.word	0x0800b8fc
 8009964:	0800b91c 	.word	0x0800b91c
 8009968:	0800b8dc 	.word	0x0800b8dc

0800996c <abort>:
 800996c:	b508      	push	{r3, lr}
 800996e:	2006      	movs	r0, #6
 8009970:	f000 fa54 	bl	8009e1c <raise>
 8009974:	2001      	movs	r0, #1
 8009976:	f001 fdb7 	bl	800b4e8 <_exit>
	...

0800997c <__sflush_r>:
 800997c:	898a      	ldrh	r2, [r1, #12]
 800997e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009982:	4605      	mov	r5, r0
 8009984:	0710      	lsls	r0, r2, #28
 8009986:	460c      	mov	r4, r1
 8009988:	d458      	bmi.n	8009a3c <__sflush_r+0xc0>
 800998a:	684b      	ldr	r3, [r1, #4]
 800998c:	2b00      	cmp	r3, #0
 800998e:	dc05      	bgt.n	800999c <__sflush_r+0x20>
 8009990:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009992:	2b00      	cmp	r3, #0
 8009994:	dc02      	bgt.n	800999c <__sflush_r+0x20>
 8009996:	2000      	movs	r0, #0
 8009998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800999c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800999e:	2e00      	cmp	r6, #0
 80099a0:	d0f9      	beq.n	8009996 <__sflush_r+0x1a>
 80099a2:	2300      	movs	r3, #0
 80099a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099a8:	682f      	ldr	r7, [r5, #0]
 80099aa:	602b      	str	r3, [r5, #0]
 80099ac:	d032      	beq.n	8009a14 <__sflush_r+0x98>
 80099ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099b0:	89a3      	ldrh	r3, [r4, #12]
 80099b2:	075a      	lsls	r2, r3, #29
 80099b4:	d505      	bpl.n	80099c2 <__sflush_r+0x46>
 80099b6:	6863      	ldr	r3, [r4, #4]
 80099b8:	1ac0      	subs	r0, r0, r3
 80099ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099bc:	b10b      	cbz	r3, 80099c2 <__sflush_r+0x46>
 80099be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099c0:	1ac0      	subs	r0, r0, r3
 80099c2:	2300      	movs	r3, #0
 80099c4:	4602      	mov	r2, r0
 80099c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099c8:	6a21      	ldr	r1, [r4, #32]
 80099ca:	4628      	mov	r0, r5
 80099cc:	47b0      	blx	r6
 80099ce:	1c43      	adds	r3, r0, #1
 80099d0:	89a3      	ldrh	r3, [r4, #12]
 80099d2:	d106      	bne.n	80099e2 <__sflush_r+0x66>
 80099d4:	6829      	ldr	r1, [r5, #0]
 80099d6:	291d      	cmp	r1, #29
 80099d8:	d82c      	bhi.n	8009a34 <__sflush_r+0xb8>
 80099da:	4a2a      	ldr	r2, [pc, #168]	; (8009a84 <__sflush_r+0x108>)
 80099dc:	40ca      	lsrs	r2, r1
 80099de:	07d6      	lsls	r6, r2, #31
 80099e0:	d528      	bpl.n	8009a34 <__sflush_r+0xb8>
 80099e2:	2200      	movs	r2, #0
 80099e4:	6062      	str	r2, [r4, #4]
 80099e6:	04d9      	lsls	r1, r3, #19
 80099e8:	6922      	ldr	r2, [r4, #16]
 80099ea:	6022      	str	r2, [r4, #0]
 80099ec:	d504      	bpl.n	80099f8 <__sflush_r+0x7c>
 80099ee:	1c42      	adds	r2, r0, #1
 80099f0:	d101      	bne.n	80099f6 <__sflush_r+0x7a>
 80099f2:	682b      	ldr	r3, [r5, #0]
 80099f4:	b903      	cbnz	r3, 80099f8 <__sflush_r+0x7c>
 80099f6:	6560      	str	r0, [r4, #84]	; 0x54
 80099f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099fa:	602f      	str	r7, [r5, #0]
 80099fc:	2900      	cmp	r1, #0
 80099fe:	d0ca      	beq.n	8009996 <__sflush_r+0x1a>
 8009a00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a04:	4299      	cmp	r1, r3
 8009a06:	d002      	beq.n	8009a0e <__sflush_r+0x92>
 8009a08:	4628      	mov	r0, r5
 8009a0a:	f7ff faa5 	bl	8008f58 <_free_r>
 8009a0e:	2000      	movs	r0, #0
 8009a10:	6360      	str	r0, [r4, #52]	; 0x34
 8009a12:	e7c1      	b.n	8009998 <__sflush_r+0x1c>
 8009a14:	6a21      	ldr	r1, [r4, #32]
 8009a16:	2301      	movs	r3, #1
 8009a18:	4628      	mov	r0, r5
 8009a1a:	47b0      	blx	r6
 8009a1c:	1c41      	adds	r1, r0, #1
 8009a1e:	d1c7      	bne.n	80099b0 <__sflush_r+0x34>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d0c4      	beq.n	80099b0 <__sflush_r+0x34>
 8009a26:	2b1d      	cmp	r3, #29
 8009a28:	d001      	beq.n	8009a2e <__sflush_r+0xb2>
 8009a2a:	2b16      	cmp	r3, #22
 8009a2c:	d101      	bne.n	8009a32 <__sflush_r+0xb6>
 8009a2e:	602f      	str	r7, [r5, #0]
 8009a30:	e7b1      	b.n	8009996 <__sflush_r+0x1a>
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a38:	81a3      	strh	r3, [r4, #12]
 8009a3a:	e7ad      	b.n	8009998 <__sflush_r+0x1c>
 8009a3c:	690f      	ldr	r7, [r1, #16]
 8009a3e:	2f00      	cmp	r7, #0
 8009a40:	d0a9      	beq.n	8009996 <__sflush_r+0x1a>
 8009a42:	0793      	lsls	r3, r2, #30
 8009a44:	680e      	ldr	r6, [r1, #0]
 8009a46:	bf08      	it	eq
 8009a48:	694b      	ldreq	r3, [r1, #20]
 8009a4a:	600f      	str	r7, [r1, #0]
 8009a4c:	bf18      	it	ne
 8009a4e:	2300      	movne	r3, #0
 8009a50:	eba6 0807 	sub.w	r8, r6, r7
 8009a54:	608b      	str	r3, [r1, #8]
 8009a56:	f1b8 0f00 	cmp.w	r8, #0
 8009a5a:	dd9c      	ble.n	8009996 <__sflush_r+0x1a>
 8009a5c:	6a21      	ldr	r1, [r4, #32]
 8009a5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009a60:	4643      	mov	r3, r8
 8009a62:	463a      	mov	r2, r7
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b0      	blx	r6
 8009a68:	2800      	cmp	r0, #0
 8009a6a:	dc06      	bgt.n	8009a7a <__sflush_r+0xfe>
 8009a6c:	89a3      	ldrh	r3, [r4, #12]
 8009a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a72:	81a3      	strh	r3, [r4, #12]
 8009a74:	f04f 30ff 	mov.w	r0, #4294967295
 8009a78:	e78e      	b.n	8009998 <__sflush_r+0x1c>
 8009a7a:	4407      	add	r7, r0
 8009a7c:	eba8 0800 	sub.w	r8, r8, r0
 8009a80:	e7e9      	b.n	8009a56 <__sflush_r+0xda>
 8009a82:	bf00      	nop
 8009a84:	20400001 	.word	0x20400001

08009a88 <_fflush_r>:
 8009a88:	b538      	push	{r3, r4, r5, lr}
 8009a8a:	690b      	ldr	r3, [r1, #16]
 8009a8c:	4605      	mov	r5, r0
 8009a8e:	460c      	mov	r4, r1
 8009a90:	b913      	cbnz	r3, 8009a98 <_fflush_r+0x10>
 8009a92:	2500      	movs	r5, #0
 8009a94:	4628      	mov	r0, r5
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	b118      	cbz	r0, 8009aa2 <_fflush_r+0x1a>
 8009a9a:	6983      	ldr	r3, [r0, #24]
 8009a9c:	b90b      	cbnz	r3, 8009aa2 <_fflush_r+0x1a>
 8009a9e:	f000 f887 	bl	8009bb0 <__sinit>
 8009aa2:	4b14      	ldr	r3, [pc, #80]	; (8009af4 <_fflush_r+0x6c>)
 8009aa4:	429c      	cmp	r4, r3
 8009aa6:	d11b      	bne.n	8009ae0 <_fflush_r+0x58>
 8009aa8:	686c      	ldr	r4, [r5, #4]
 8009aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d0ef      	beq.n	8009a92 <_fflush_r+0xa>
 8009ab2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009ab4:	07d0      	lsls	r0, r2, #31
 8009ab6:	d404      	bmi.n	8009ac2 <_fflush_r+0x3a>
 8009ab8:	0599      	lsls	r1, r3, #22
 8009aba:	d402      	bmi.n	8009ac2 <_fflush_r+0x3a>
 8009abc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009abe:	f000 f915 	bl	8009cec <__retarget_lock_acquire_recursive>
 8009ac2:	4628      	mov	r0, r5
 8009ac4:	4621      	mov	r1, r4
 8009ac6:	f7ff ff59 	bl	800997c <__sflush_r>
 8009aca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009acc:	07da      	lsls	r2, r3, #31
 8009ace:	4605      	mov	r5, r0
 8009ad0:	d4e0      	bmi.n	8009a94 <_fflush_r+0xc>
 8009ad2:	89a3      	ldrh	r3, [r4, #12]
 8009ad4:	059b      	lsls	r3, r3, #22
 8009ad6:	d4dd      	bmi.n	8009a94 <_fflush_r+0xc>
 8009ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ada:	f000 f908 	bl	8009cee <__retarget_lock_release_recursive>
 8009ade:	e7d9      	b.n	8009a94 <_fflush_r+0xc>
 8009ae0:	4b05      	ldr	r3, [pc, #20]	; (8009af8 <_fflush_r+0x70>)
 8009ae2:	429c      	cmp	r4, r3
 8009ae4:	d101      	bne.n	8009aea <_fflush_r+0x62>
 8009ae6:	68ac      	ldr	r4, [r5, #8]
 8009ae8:	e7df      	b.n	8009aaa <_fflush_r+0x22>
 8009aea:	4b04      	ldr	r3, [pc, #16]	; (8009afc <_fflush_r+0x74>)
 8009aec:	429c      	cmp	r4, r3
 8009aee:	bf08      	it	eq
 8009af0:	68ec      	ldreq	r4, [r5, #12]
 8009af2:	e7da      	b.n	8009aaa <_fflush_r+0x22>
 8009af4:	0800b8fc 	.word	0x0800b8fc
 8009af8:	0800b91c 	.word	0x0800b91c
 8009afc:	0800b8dc 	.word	0x0800b8dc

08009b00 <std>:
 8009b00:	2300      	movs	r3, #0
 8009b02:	b510      	push	{r4, lr}
 8009b04:	4604      	mov	r4, r0
 8009b06:	e9c0 3300 	strd	r3, r3, [r0]
 8009b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b0e:	6083      	str	r3, [r0, #8]
 8009b10:	8181      	strh	r1, [r0, #12]
 8009b12:	6643      	str	r3, [r0, #100]	; 0x64
 8009b14:	81c2      	strh	r2, [r0, #14]
 8009b16:	6183      	str	r3, [r0, #24]
 8009b18:	4619      	mov	r1, r3
 8009b1a:	2208      	movs	r2, #8
 8009b1c:	305c      	adds	r0, #92	; 0x5c
 8009b1e:	f7fd fb67 	bl	80071f0 <memset>
 8009b22:	4b05      	ldr	r3, [pc, #20]	; (8009b38 <std+0x38>)
 8009b24:	6263      	str	r3, [r4, #36]	; 0x24
 8009b26:	4b05      	ldr	r3, [pc, #20]	; (8009b3c <std+0x3c>)
 8009b28:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b2a:	4b05      	ldr	r3, [pc, #20]	; (8009b40 <std+0x40>)
 8009b2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b2e:	4b05      	ldr	r3, [pc, #20]	; (8009b44 <std+0x44>)
 8009b30:	6224      	str	r4, [r4, #32]
 8009b32:	6323      	str	r3, [r4, #48]	; 0x30
 8009b34:	bd10      	pop	{r4, pc}
 8009b36:	bf00      	nop
 8009b38:	08009e55 	.word	0x08009e55
 8009b3c:	08009e77 	.word	0x08009e77
 8009b40:	08009eaf 	.word	0x08009eaf
 8009b44:	08009ed3 	.word	0x08009ed3

08009b48 <_cleanup_r>:
 8009b48:	4901      	ldr	r1, [pc, #4]	; (8009b50 <_cleanup_r+0x8>)
 8009b4a:	f000 b8af 	b.w	8009cac <_fwalk_reent>
 8009b4e:	bf00      	nop
 8009b50:	08009a89 	.word	0x08009a89

08009b54 <__sfmoreglue>:
 8009b54:	b570      	push	{r4, r5, r6, lr}
 8009b56:	2268      	movs	r2, #104	; 0x68
 8009b58:	1e4d      	subs	r5, r1, #1
 8009b5a:	4355      	muls	r5, r2
 8009b5c:	460e      	mov	r6, r1
 8009b5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009b62:	f7ff fa65 	bl	8009030 <_malloc_r>
 8009b66:	4604      	mov	r4, r0
 8009b68:	b140      	cbz	r0, 8009b7c <__sfmoreglue+0x28>
 8009b6a:	2100      	movs	r1, #0
 8009b6c:	e9c0 1600 	strd	r1, r6, [r0]
 8009b70:	300c      	adds	r0, #12
 8009b72:	60a0      	str	r0, [r4, #8]
 8009b74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009b78:	f7fd fb3a 	bl	80071f0 <memset>
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	bd70      	pop	{r4, r5, r6, pc}

08009b80 <__sfp_lock_acquire>:
 8009b80:	4801      	ldr	r0, [pc, #4]	; (8009b88 <__sfp_lock_acquire+0x8>)
 8009b82:	f000 b8b3 	b.w	8009cec <__retarget_lock_acquire_recursive>
 8009b86:	bf00      	nop
 8009b88:	2000077d 	.word	0x2000077d

08009b8c <__sfp_lock_release>:
 8009b8c:	4801      	ldr	r0, [pc, #4]	; (8009b94 <__sfp_lock_release+0x8>)
 8009b8e:	f000 b8ae 	b.w	8009cee <__retarget_lock_release_recursive>
 8009b92:	bf00      	nop
 8009b94:	2000077d 	.word	0x2000077d

08009b98 <__sinit_lock_acquire>:
 8009b98:	4801      	ldr	r0, [pc, #4]	; (8009ba0 <__sinit_lock_acquire+0x8>)
 8009b9a:	f000 b8a7 	b.w	8009cec <__retarget_lock_acquire_recursive>
 8009b9e:	bf00      	nop
 8009ba0:	2000077e 	.word	0x2000077e

08009ba4 <__sinit_lock_release>:
 8009ba4:	4801      	ldr	r0, [pc, #4]	; (8009bac <__sinit_lock_release+0x8>)
 8009ba6:	f000 b8a2 	b.w	8009cee <__retarget_lock_release_recursive>
 8009baa:	bf00      	nop
 8009bac:	2000077e 	.word	0x2000077e

08009bb0 <__sinit>:
 8009bb0:	b510      	push	{r4, lr}
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	f7ff fff0 	bl	8009b98 <__sinit_lock_acquire>
 8009bb8:	69a3      	ldr	r3, [r4, #24]
 8009bba:	b11b      	cbz	r3, 8009bc4 <__sinit+0x14>
 8009bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bc0:	f7ff bff0 	b.w	8009ba4 <__sinit_lock_release>
 8009bc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009bc8:	6523      	str	r3, [r4, #80]	; 0x50
 8009bca:	4b13      	ldr	r3, [pc, #76]	; (8009c18 <__sinit+0x68>)
 8009bcc:	4a13      	ldr	r2, [pc, #76]	; (8009c1c <__sinit+0x6c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8009bd2:	42a3      	cmp	r3, r4
 8009bd4:	bf04      	itt	eq
 8009bd6:	2301      	moveq	r3, #1
 8009bd8:	61a3      	streq	r3, [r4, #24]
 8009bda:	4620      	mov	r0, r4
 8009bdc:	f000 f820 	bl	8009c20 <__sfp>
 8009be0:	6060      	str	r0, [r4, #4]
 8009be2:	4620      	mov	r0, r4
 8009be4:	f000 f81c 	bl	8009c20 <__sfp>
 8009be8:	60a0      	str	r0, [r4, #8]
 8009bea:	4620      	mov	r0, r4
 8009bec:	f000 f818 	bl	8009c20 <__sfp>
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	60e0      	str	r0, [r4, #12]
 8009bf4:	2104      	movs	r1, #4
 8009bf6:	6860      	ldr	r0, [r4, #4]
 8009bf8:	f7ff ff82 	bl	8009b00 <std>
 8009bfc:	68a0      	ldr	r0, [r4, #8]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	2109      	movs	r1, #9
 8009c02:	f7ff ff7d 	bl	8009b00 <std>
 8009c06:	68e0      	ldr	r0, [r4, #12]
 8009c08:	2202      	movs	r2, #2
 8009c0a:	2112      	movs	r1, #18
 8009c0c:	f7ff ff78 	bl	8009b00 <std>
 8009c10:	2301      	movs	r3, #1
 8009c12:	61a3      	str	r3, [r4, #24]
 8009c14:	e7d2      	b.n	8009bbc <__sinit+0xc>
 8009c16:	bf00      	nop
 8009c18:	0800b560 	.word	0x0800b560
 8009c1c:	08009b49 	.word	0x08009b49

08009c20 <__sfp>:
 8009c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c22:	4607      	mov	r7, r0
 8009c24:	f7ff ffac 	bl	8009b80 <__sfp_lock_acquire>
 8009c28:	4b1e      	ldr	r3, [pc, #120]	; (8009ca4 <__sfp+0x84>)
 8009c2a:	681e      	ldr	r6, [r3, #0]
 8009c2c:	69b3      	ldr	r3, [r6, #24]
 8009c2e:	b913      	cbnz	r3, 8009c36 <__sfp+0x16>
 8009c30:	4630      	mov	r0, r6
 8009c32:	f7ff ffbd 	bl	8009bb0 <__sinit>
 8009c36:	3648      	adds	r6, #72	; 0x48
 8009c38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009c3c:	3b01      	subs	r3, #1
 8009c3e:	d503      	bpl.n	8009c48 <__sfp+0x28>
 8009c40:	6833      	ldr	r3, [r6, #0]
 8009c42:	b30b      	cbz	r3, 8009c88 <__sfp+0x68>
 8009c44:	6836      	ldr	r6, [r6, #0]
 8009c46:	e7f7      	b.n	8009c38 <__sfp+0x18>
 8009c48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009c4c:	b9d5      	cbnz	r5, 8009c84 <__sfp+0x64>
 8009c4e:	4b16      	ldr	r3, [pc, #88]	; (8009ca8 <__sfp+0x88>)
 8009c50:	60e3      	str	r3, [r4, #12]
 8009c52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c56:	6665      	str	r5, [r4, #100]	; 0x64
 8009c58:	f000 f847 	bl	8009cea <__retarget_lock_init_recursive>
 8009c5c:	f7ff ff96 	bl	8009b8c <__sfp_lock_release>
 8009c60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009c64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009c68:	6025      	str	r5, [r4, #0]
 8009c6a:	61a5      	str	r5, [r4, #24]
 8009c6c:	2208      	movs	r2, #8
 8009c6e:	4629      	mov	r1, r5
 8009c70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009c74:	f7fd fabc 	bl	80071f0 <memset>
 8009c78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009c7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009c80:	4620      	mov	r0, r4
 8009c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009c84:	3468      	adds	r4, #104	; 0x68
 8009c86:	e7d9      	b.n	8009c3c <__sfp+0x1c>
 8009c88:	2104      	movs	r1, #4
 8009c8a:	4638      	mov	r0, r7
 8009c8c:	f7ff ff62 	bl	8009b54 <__sfmoreglue>
 8009c90:	4604      	mov	r4, r0
 8009c92:	6030      	str	r0, [r6, #0]
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d1d5      	bne.n	8009c44 <__sfp+0x24>
 8009c98:	f7ff ff78 	bl	8009b8c <__sfp_lock_release>
 8009c9c:	230c      	movs	r3, #12
 8009c9e:	603b      	str	r3, [r7, #0]
 8009ca0:	e7ee      	b.n	8009c80 <__sfp+0x60>
 8009ca2:	bf00      	nop
 8009ca4:	0800b560 	.word	0x0800b560
 8009ca8:	ffff0001 	.word	0xffff0001

08009cac <_fwalk_reent>:
 8009cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cb0:	4606      	mov	r6, r0
 8009cb2:	4688      	mov	r8, r1
 8009cb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009cb8:	2700      	movs	r7, #0
 8009cba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cbe:	f1b9 0901 	subs.w	r9, r9, #1
 8009cc2:	d505      	bpl.n	8009cd0 <_fwalk_reent+0x24>
 8009cc4:	6824      	ldr	r4, [r4, #0]
 8009cc6:	2c00      	cmp	r4, #0
 8009cc8:	d1f7      	bne.n	8009cba <_fwalk_reent+0xe>
 8009cca:	4638      	mov	r0, r7
 8009ccc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cd0:	89ab      	ldrh	r3, [r5, #12]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d907      	bls.n	8009ce6 <_fwalk_reent+0x3a>
 8009cd6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	d003      	beq.n	8009ce6 <_fwalk_reent+0x3a>
 8009cde:	4629      	mov	r1, r5
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	47c0      	blx	r8
 8009ce4:	4307      	orrs	r7, r0
 8009ce6:	3568      	adds	r5, #104	; 0x68
 8009ce8:	e7e9      	b.n	8009cbe <_fwalk_reent+0x12>

08009cea <__retarget_lock_init_recursive>:
 8009cea:	4770      	bx	lr

08009cec <__retarget_lock_acquire_recursive>:
 8009cec:	4770      	bx	lr

08009cee <__retarget_lock_release_recursive>:
 8009cee:	4770      	bx	lr

08009cf0 <__swhatbuf_r>:
 8009cf0:	b570      	push	{r4, r5, r6, lr}
 8009cf2:	460e      	mov	r6, r1
 8009cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf8:	2900      	cmp	r1, #0
 8009cfa:	b096      	sub	sp, #88	; 0x58
 8009cfc:	4614      	mov	r4, r2
 8009cfe:	461d      	mov	r5, r3
 8009d00:	da08      	bge.n	8009d14 <__swhatbuf_r+0x24>
 8009d02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	602a      	str	r2, [r5, #0]
 8009d0a:	061a      	lsls	r2, r3, #24
 8009d0c:	d410      	bmi.n	8009d30 <__swhatbuf_r+0x40>
 8009d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d12:	e00e      	b.n	8009d32 <__swhatbuf_r+0x42>
 8009d14:	466a      	mov	r2, sp
 8009d16:	f000 f903 	bl	8009f20 <_fstat_r>
 8009d1a:	2800      	cmp	r0, #0
 8009d1c:	dbf1      	blt.n	8009d02 <__swhatbuf_r+0x12>
 8009d1e:	9a01      	ldr	r2, [sp, #4]
 8009d20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009d24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009d28:	425a      	negs	r2, r3
 8009d2a:	415a      	adcs	r2, r3
 8009d2c:	602a      	str	r2, [r5, #0]
 8009d2e:	e7ee      	b.n	8009d0e <__swhatbuf_r+0x1e>
 8009d30:	2340      	movs	r3, #64	; 0x40
 8009d32:	2000      	movs	r0, #0
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	b016      	add	sp, #88	; 0x58
 8009d38:	bd70      	pop	{r4, r5, r6, pc}
	...

08009d3c <__smakebuf_r>:
 8009d3c:	898b      	ldrh	r3, [r1, #12]
 8009d3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009d40:	079d      	lsls	r5, r3, #30
 8009d42:	4606      	mov	r6, r0
 8009d44:	460c      	mov	r4, r1
 8009d46:	d507      	bpl.n	8009d58 <__smakebuf_r+0x1c>
 8009d48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	6123      	str	r3, [r4, #16]
 8009d50:	2301      	movs	r3, #1
 8009d52:	6163      	str	r3, [r4, #20]
 8009d54:	b002      	add	sp, #8
 8009d56:	bd70      	pop	{r4, r5, r6, pc}
 8009d58:	ab01      	add	r3, sp, #4
 8009d5a:	466a      	mov	r2, sp
 8009d5c:	f7ff ffc8 	bl	8009cf0 <__swhatbuf_r>
 8009d60:	9900      	ldr	r1, [sp, #0]
 8009d62:	4605      	mov	r5, r0
 8009d64:	4630      	mov	r0, r6
 8009d66:	f7ff f963 	bl	8009030 <_malloc_r>
 8009d6a:	b948      	cbnz	r0, 8009d80 <__smakebuf_r+0x44>
 8009d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d70:	059a      	lsls	r2, r3, #22
 8009d72:	d4ef      	bmi.n	8009d54 <__smakebuf_r+0x18>
 8009d74:	f023 0303 	bic.w	r3, r3, #3
 8009d78:	f043 0302 	orr.w	r3, r3, #2
 8009d7c:	81a3      	strh	r3, [r4, #12]
 8009d7e:	e7e3      	b.n	8009d48 <__smakebuf_r+0xc>
 8009d80:	4b0d      	ldr	r3, [pc, #52]	; (8009db8 <__smakebuf_r+0x7c>)
 8009d82:	62b3      	str	r3, [r6, #40]	; 0x28
 8009d84:	89a3      	ldrh	r3, [r4, #12]
 8009d86:	6020      	str	r0, [r4, #0]
 8009d88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d8c:	81a3      	strh	r3, [r4, #12]
 8009d8e:	9b00      	ldr	r3, [sp, #0]
 8009d90:	6163      	str	r3, [r4, #20]
 8009d92:	9b01      	ldr	r3, [sp, #4]
 8009d94:	6120      	str	r0, [r4, #16]
 8009d96:	b15b      	cbz	r3, 8009db0 <__smakebuf_r+0x74>
 8009d98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d9c:	4630      	mov	r0, r6
 8009d9e:	f000 f8d1 	bl	8009f44 <_isatty_r>
 8009da2:	b128      	cbz	r0, 8009db0 <__smakebuf_r+0x74>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	f023 0303 	bic.w	r3, r3, #3
 8009daa:	f043 0301 	orr.w	r3, r3, #1
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	89a0      	ldrh	r0, [r4, #12]
 8009db2:	4305      	orrs	r5, r0
 8009db4:	81a5      	strh	r5, [r4, #12]
 8009db6:	e7cd      	b.n	8009d54 <__smakebuf_r+0x18>
 8009db8:	08009b49 	.word	0x08009b49

08009dbc <_malloc_usable_size_r>:
 8009dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dc0:	1f18      	subs	r0, r3, #4
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	bfbc      	itt	lt
 8009dc6:	580b      	ldrlt	r3, [r1, r0]
 8009dc8:	18c0      	addlt	r0, r0, r3
 8009dca:	4770      	bx	lr

08009dcc <_raise_r>:
 8009dcc:	291f      	cmp	r1, #31
 8009dce:	b538      	push	{r3, r4, r5, lr}
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	460d      	mov	r5, r1
 8009dd4:	d904      	bls.n	8009de0 <_raise_r+0x14>
 8009dd6:	2316      	movs	r3, #22
 8009dd8:	6003      	str	r3, [r0, #0]
 8009dda:	f04f 30ff 	mov.w	r0, #4294967295
 8009dde:	bd38      	pop	{r3, r4, r5, pc}
 8009de0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009de2:	b112      	cbz	r2, 8009dea <_raise_r+0x1e>
 8009de4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009de8:	b94b      	cbnz	r3, 8009dfe <_raise_r+0x32>
 8009dea:	4620      	mov	r0, r4
 8009dec:	f000 f830 	bl	8009e50 <_getpid_r>
 8009df0:	462a      	mov	r2, r5
 8009df2:	4601      	mov	r1, r0
 8009df4:	4620      	mov	r0, r4
 8009df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009dfa:	f000 b817 	b.w	8009e2c <_kill_r>
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d00a      	beq.n	8009e18 <_raise_r+0x4c>
 8009e02:	1c59      	adds	r1, r3, #1
 8009e04:	d103      	bne.n	8009e0e <_raise_r+0x42>
 8009e06:	2316      	movs	r3, #22
 8009e08:	6003      	str	r3, [r0, #0]
 8009e0a:	2001      	movs	r0, #1
 8009e0c:	e7e7      	b.n	8009dde <_raise_r+0x12>
 8009e0e:	2400      	movs	r4, #0
 8009e10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e14:	4628      	mov	r0, r5
 8009e16:	4798      	blx	r3
 8009e18:	2000      	movs	r0, #0
 8009e1a:	e7e0      	b.n	8009dde <_raise_r+0x12>

08009e1c <raise>:
 8009e1c:	4b02      	ldr	r3, [pc, #8]	; (8009e28 <raise+0xc>)
 8009e1e:	4601      	mov	r1, r0
 8009e20:	6818      	ldr	r0, [r3, #0]
 8009e22:	f7ff bfd3 	b.w	8009dcc <_raise_r>
 8009e26:	bf00      	nop
 8009e28:	20000010 	.word	0x20000010

08009e2c <_kill_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4d07      	ldr	r5, [pc, #28]	; (8009e4c <_kill_r+0x20>)
 8009e30:	2300      	movs	r3, #0
 8009e32:	4604      	mov	r4, r0
 8009e34:	4608      	mov	r0, r1
 8009e36:	4611      	mov	r1, r2
 8009e38:	602b      	str	r3, [r5, #0]
 8009e3a:	f001 fb27 	bl	800b48c <_kill>
 8009e3e:	1c43      	adds	r3, r0, #1
 8009e40:	d102      	bne.n	8009e48 <_kill_r+0x1c>
 8009e42:	682b      	ldr	r3, [r5, #0]
 8009e44:	b103      	cbz	r3, 8009e48 <_kill_r+0x1c>
 8009e46:	6023      	str	r3, [r4, #0]
 8009e48:	bd38      	pop	{r3, r4, r5, pc}
 8009e4a:	bf00      	nop
 8009e4c:	20000778 	.word	0x20000778

08009e50 <_getpid_r>:
 8009e50:	f001 bb0c 	b.w	800b46c <_getpid>

08009e54 <__sread>:
 8009e54:	b510      	push	{r4, lr}
 8009e56:	460c      	mov	r4, r1
 8009e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e5c:	f000 f894 	bl	8009f88 <_read_r>
 8009e60:	2800      	cmp	r0, #0
 8009e62:	bfab      	itete	ge
 8009e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e66:	89a3      	ldrhlt	r3, [r4, #12]
 8009e68:	181b      	addge	r3, r3, r0
 8009e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e6e:	bfac      	ite	ge
 8009e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e72:	81a3      	strhlt	r3, [r4, #12]
 8009e74:	bd10      	pop	{r4, pc}

08009e76 <__swrite>:
 8009e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7a:	461f      	mov	r7, r3
 8009e7c:	898b      	ldrh	r3, [r1, #12]
 8009e7e:	05db      	lsls	r3, r3, #23
 8009e80:	4605      	mov	r5, r0
 8009e82:	460c      	mov	r4, r1
 8009e84:	4616      	mov	r6, r2
 8009e86:	d505      	bpl.n	8009e94 <__swrite+0x1e>
 8009e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e8c:	2302      	movs	r3, #2
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f000 f868 	bl	8009f64 <_lseek_r>
 8009e94:	89a3      	ldrh	r3, [r4, #12]
 8009e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e9e:	81a3      	strh	r3, [r4, #12]
 8009ea0:	4632      	mov	r2, r6
 8009ea2:	463b      	mov	r3, r7
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009eaa:	f000 b817 	b.w	8009edc <_write_r>

08009eae <__sseek>:
 8009eae:	b510      	push	{r4, lr}
 8009eb0:	460c      	mov	r4, r1
 8009eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009eb6:	f000 f855 	bl	8009f64 <_lseek_r>
 8009eba:	1c43      	adds	r3, r0, #1
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	bf15      	itete	ne
 8009ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8009ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009eca:	81a3      	strheq	r3, [r4, #12]
 8009ecc:	bf18      	it	ne
 8009ece:	81a3      	strhne	r3, [r4, #12]
 8009ed0:	bd10      	pop	{r4, pc}

08009ed2 <__sclose>:
 8009ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ed6:	f000 b813 	b.w	8009f00 <_close_r>
	...

08009edc <_write_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4d07      	ldr	r5, [pc, #28]	; (8009efc <_write_r+0x20>)
 8009ee0:	4604      	mov	r4, r0
 8009ee2:	4608      	mov	r0, r1
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	602a      	str	r2, [r5, #0]
 8009eea:	461a      	mov	r2, r3
 8009eec:	f001 faf4 	bl	800b4d8 <_write>
 8009ef0:	1c43      	adds	r3, r0, #1
 8009ef2:	d102      	bne.n	8009efa <_write_r+0x1e>
 8009ef4:	682b      	ldr	r3, [r5, #0]
 8009ef6:	b103      	cbz	r3, 8009efa <_write_r+0x1e>
 8009ef8:	6023      	str	r3, [r4, #0]
 8009efa:	bd38      	pop	{r3, r4, r5, pc}
 8009efc:	20000778 	.word	0x20000778

08009f00 <_close_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d06      	ldr	r5, [pc, #24]	; (8009f1c <_close_r+0x1c>)
 8009f04:	2300      	movs	r3, #0
 8009f06:	4604      	mov	r4, r0
 8009f08:	4608      	mov	r0, r1
 8009f0a:	602b      	str	r3, [r5, #0]
 8009f0c:	f001 fa9e 	bl	800b44c <_close>
 8009f10:	1c43      	adds	r3, r0, #1
 8009f12:	d102      	bne.n	8009f1a <_close_r+0x1a>
 8009f14:	682b      	ldr	r3, [r5, #0]
 8009f16:	b103      	cbz	r3, 8009f1a <_close_r+0x1a>
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	bd38      	pop	{r3, r4, r5, pc}
 8009f1c:	20000778 	.word	0x20000778

08009f20 <_fstat_r>:
 8009f20:	b538      	push	{r3, r4, r5, lr}
 8009f22:	4d07      	ldr	r5, [pc, #28]	; (8009f40 <_fstat_r+0x20>)
 8009f24:	2300      	movs	r3, #0
 8009f26:	4604      	mov	r4, r0
 8009f28:	4608      	mov	r0, r1
 8009f2a:	4611      	mov	r1, r2
 8009f2c:	602b      	str	r3, [r5, #0]
 8009f2e:	f001 fa95 	bl	800b45c <_fstat>
 8009f32:	1c43      	adds	r3, r0, #1
 8009f34:	d102      	bne.n	8009f3c <_fstat_r+0x1c>
 8009f36:	682b      	ldr	r3, [r5, #0]
 8009f38:	b103      	cbz	r3, 8009f3c <_fstat_r+0x1c>
 8009f3a:	6023      	str	r3, [r4, #0]
 8009f3c:	bd38      	pop	{r3, r4, r5, pc}
 8009f3e:	bf00      	nop
 8009f40:	20000778 	.word	0x20000778

08009f44 <_isatty_r>:
 8009f44:	b538      	push	{r3, r4, r5, lr}
 8009f46:	4d06      	ldr	r5, [pc, #24]	; (8009f60 <_isatty_r+0x1c>)
 8009f48:	2300      	movs	r3, #0
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	4608      	mov	r0, r1
 8009f4e:	602b      	str	r3, [r5, #0]
 8009f50:	f001 fa94 	bl	800b47c <_isatty>
 8009f54:	1c43      	adds	r3, r0, #1
 8009f56:	d102      	bne.n	8009f5e <_isatty_r+0x1a>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	b103      	cbz	r3, 8009f5e <_isatty_r+0x1a>
 8009f5c:	6023      	str	r3, [r4, #0]
 8009f5e:	bd38      	pop	{r3, r4, r5, pc}
 8009f60:	20000778 	.word	0x20000778

08009f64 <_lseek_r>:
 8009f64:	b538      	push	{r3, r4, r5, lr}
 8009f66:	4d07      	ldr	r5, [pc, #28]	; (8009f84 <_lseek_r+0x20>)
 8009f68:	4604      	mov	r4, r0
 8009f6a:	4608      	mov	r0, r1
 8009f6c:	4611      	mov	r1, r2
 8009f6e:	2200      	movs	r2, #0
 8009f70:	602a      	str	r2, [r5, #0]
 8009f72:	461a      	mov	r2, r3
 8009f74:	f001 fa92 	bl	800b49c <_lseek>
 8009f78:	1c43      	adds	r3, r0, #1
 8009f7a:	d102      	bne.n	8009f82 <_lseek_r+0x1e>
 8009f7c:	682b      	ldr	r3, [r5, #0]
 8009f7e:	b103      	cbz	r3, 8009f82 <_lseek_r+0x1e>
 8009f80:	6023      	str	r3, [r4, #0]
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	20000778 	.word	0x20000778

08009f88 <_read_r>:
 8009f88:	b538      	push	{r3, r4, r5, lr}
 8009f8a:	4d07      	ldr	r5, [pc, #28]	; (8009fa8 <_read_r+0x20>)
 8009f8c:	4604      	mov	r4, r0
 8009f8e:	4608      	mov	r0, r1
 8009f90:	4611      	mov	r1, r2
 8009f92:	2200      	movs	r2, #0
 8009f94:	602a      	str	r2, [r5, #0]
 8009f96:	461a      	mov	r2, r3
 8009f98:	f001 fa88 	bl	800b4ac <_read>
 8009f9c:	1c43      	adds	r3, r0, #1
 8009f9e:	d102      	bne.n	8009fa6 <_read_r+0x1e>
 8009fa0:	682b      	ldr	r3, [r5, #0]
 8009fa2:	b103      	cbz	r3, 8009fa6 <_read_r+0x1e>
 8009fa4:	6023      	str	r3, [r4, #0]
 8009fa6:	bd38      	pop	{r3, r4, r5, pc}
 8009fa8:	20000778 	.word	0x20000778
 8009fac:	00000000 	.word	0x00000000

08009fb0 <atan>:
 8009fb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	ec55 4b10 	vmov	r4, r5, d0
 8009fb8:	4bc3      	ldr	r3, [pc, #780]	; (800a2c8 <atan+0x318>)
 8009fba:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009fbe:	429e      	cmp	r6, r3
 8009fc0:	46ab      	mov	fp, r5
 8009fc2:	dd18      	ble.n	8009ff6 <atan+0x46>
 8009fc4:	4bc1      	ldr	r3, [pc, #772]	; (800a2cc <atan+0x31c>)
 8009fc6:	429e      	cmp	r6, r3
 8009fc8:	dc01      	bgt.n	8009fce <atan+0x1e>
 8009fca:	d109      	bne.n	8009fe0 <atan+0x30>
 8009fcc:	b144      	cbz	r4, 8009fe0 <atan+0x30>
 8009fce:	4622      	mov	r2, r4
 8009fd0:	462b      	mov	r3, r5
 8009fd2:	4620      	mov	r0, r4
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	f7f6 f979 	bl	80002cc <__adddf3>
 8009fda:	4604      	mov	r4, r0
 8009fdc:	460d      	mov	r5, r1
 8009fde:	e006      	b.n	8009fee <atan+0x3e>
 8009fe0:	f1bb 0f00 	cmp.w	fp, #0
 8009fe4:	f300 8131 	bgt.w	800a24a <atan+0x29a>
 8009fe8:	a59b      	add	r5, pc, #620	; (adr r5, 800a258 <atan+0x2a8>)
 8009fea:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009fee:	ec45 4b10 	vmov	d0, r4, r5
 8009ff2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ff6:	4bb6      	ldr	r3, [pc, #728]	; (800a2d0 <atan+0x320>)
 8009ff8:	429e      	cmp	r6, r3
 8009ffa:	dc14      	bgt.n	800a026 <atan+0x76>
 8009ffc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800a000:	429e      	cmp	r6, r3
 800a002:	dc0d      	bgt.n	800a020 <atan+0x70>
 800a004:	a396      	add	r3, pc, #600	; (adr r3, 800a260 <atan+0x2b0>)
 800a006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00a:	ee10 0a10 	vmov	r0, s0
 800a00e:	4629      	mov	r1, r5
 800a010:	f7f6 f95c 	bl	80002cc <__adddf3>
 800a014:	4baf      	ldr	r3, [pc, #700]	; (800a2d4 <atan+0x324>)
 800a016:	2200      	movs	r2, #0
 800a018:	f7f6 fd9e 	bl	8000b58 <__aeabi_dcmpgt>
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d1e6      	bne.n	8009fee <atan+0x3e>
 800a020:	f04f 3aff 	mov.w	sl, #4294967295
 800a024:	e02b      	b.n	800a07e <atan+0xce>
 800a026:	f000 f963 	bl	800a2f0 <fabs>
 800a02a:	4bab      	ldr	r3, [pc, #684]	; (800a2d8 <atan+0x328>)
 800a02c:	429e      	cmp	r6, r3
 800a02e:	ec55 4b10 	vmov	r4, r5, d0
 800a032:	f300 80bf 	bgt.w	800a1b4 <atan+0x204>
 800a036:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800a03a:	429e      	cmp	r6, r3
 800a03c:	f300 80a0 	bgt.w	800a180 <atan+0x1d0>
 800a040:	ee10 2a10 	vmov	r2, s0
 800a044:	ee10 0a10 	vmov	r0, s0
 800a048:	462b      	mov	r3, r5
 800a04a:	4629      	mov	r1, r5
 800a04c:	f7f6 f93e 	bl	80002cc <__adddf3>
 800a050:	4ba0      	ldr	r3, [pc, #640]	; (800a2d4 <atan+0x324>)
 800a052:	2200      	movs	r2, #0
 800a054:	f7f6 f938 	bl	80002c8 <__aeabi_dsub>
 800a058:	2200      	movs	r2, #0
 800a05a:	4606      	mov	r6, r0
 800a05c:	460f      	mov	r7, r1
 800a05e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a062:	4620      	mov	r0, r4
 800a064:	4629      	mov	r1, r5
 800a066:	f7f6 f931 	bl	80002cc <__adddf3>
 800a06a:	4602      	mov	r2, r0
 800a06c:	460b      	mov	r3, r1
 800a06e:	4630      	mov	r0, r6
 800a070:	4639      	mov	r1, r7
 800a072:	f7f6 fc0b 	bl	800088c <__aeabi_ddiv>
 800a076:	f04f 0a00 	mov.w	sl, #0
 800a07a:	4604      	mov	r4, r0
 800a07c:	460d      	mov	r5, r1
 800a07e:	4622      	mov	r2, r4
 800a080:	462b      	mov	r3, r5
 800a082:	4620      	mov	r0, r4
 800a084:	4629      	mov	r1, r5
 800a086:	f7f6 fad7 	bl	8000638 <__aeabi_dmul>
 800a08a:	4602      	mov	r2, r0
 800a08c:	460b      	mov	r3, r1
 800a08e:	4680      	mov	r8, r0
 800a090:	4689      	mov	r9, r1
 800a092:	f7f6 fad1 	bl	8000638 <__aeabi_dmul>
 800a096:	a374      	add	r3, pc, #464	; (adr r3, 800a268 <atan+0x2b8>)
 800a098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a09c:	4606      	mov	r6, r0
 800a09e:	460f      	mov	r7, r1
 800a0a0:	f7f6 faca 	bl	8000638 <__aeabi_dmul>
 800a0a4:	a372      	add	r3, pc, #456	; (adr r3, 800a270 <atan+0x2c0>)
 800a0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0aa:	f7f6 f90f 	bl	80002cc <__adddf3>
 800a0ae:	4632      	mov	r2, r6
 800a0b0:	463b      	mov	r3, r7
 800a0b2:	f7f6 fac1 	bl	8000638 <__aeabi_dmul>
 800a0b6:	a370      	add	r3, pc, #448	; (adr r3, 800a278 <atan+0x2c8>)
 800a0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0bc:	f7f6 f906 	bl	80002cc <__adddf3>
 800a0c0:	4632      	mov	r2, r6
 800a0c2:	463b      	mov	r3, r7
 800a0c4:	f7f6 fab8 	bl	8000638 <__aeabi_dmul>
 800a0c8:	a36d      	add	r3, pc, #436	; (adr r3, 800a280 <atan+0x2d0>)
 800a0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ce:	f7f6 f8fd 	bl	80002cc <__adddf3>
 800a0d2:	4632      	mov	r2, r6
 800a0d4:	463b      	mov	r3, r7
 800a0d6:	f7f6 faaf 	bl	8000638 <__aeabi_dmul>
 800a0da:	a36b      	add	r3, pc, #428	; (adr r3, 800a288 <atan+0x2d8>)
 800a0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e0:	f7f6 f8f4 	bl	80002cc <__adddf3>
 800a0e4:	4632      	mov	r2, r6
 800a0e6:	463b      	mov	r3, r7
 800a0e8:	f7f6 faa6 	bl	8000638 <__aeabi_dmul>
 800a0ec:	a368      	add	r3, pc, #416	; (adr r3, 800a290 <atan+0x2e0>)
 800a0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0f2:	f7f6 f8eb 	bl	80002cc <__adddf3>
 800a0f6:	4642      	mov	r2, r8
 800a0f8:	464b      	mov	r3, r9
 800a0fa:	f7f6 fa9d 	bl	8000638 <__aeabi_dmul>
 800a0fe:	a366      	add	r3, pc, #408	; (adr r3, 800a298 <atan+0x2e8>)
 800a100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a104:	4680      	mov	r8, r0
 800a106:	4689      	mov	r9, r1
 800a108:	4630      	mov	r0, r6
 800a10a:	4639      	mov	r1, r7
 800a10c:	f7f6 fa94 	bl	8000638 <__aeabi_dmul>
 800a110:	a363      	add	r3, pc, #396	; (adr r3, 800a2a0 <atan+0x2f0>)
 800a112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a116:	f7f6 f8d7 	bl	80002c8 <__aeabi_dsub>
 800a11a:	4632      	mov	r2, r6
 800a11c:	463b      	mov	r3, r7
 800a11e:	f7f6 fa8b 	bl	8000638 <__aeabi_dmul>
 800a122:	a361      	add	r3, pc, #388	; (adr r3, 800a2a8 <atan+0x2f8>)
 800a124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a128:	f7f6 f8ce 	bl	80002c8 <__aeabi_dsub>
 800a12c:	4632      	mov	r2, r6
 800a12e:	463b      	mov	r3, r7
 800a130:	f7f6 fa82 	bl	8000638 <__aeabi_dmul>
 800a134:	a35e      	add	r3, pc, #376	; (adr r3, 800a2b0 <atan+0x300>)
 800a136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13a:	f7f6 f8c5 	bl	80002c8 <__aeabi_dsub>
 800a13e:	4632      	mov	r2, r6
 800a140:	463b      	mov	r3, r7
 800a142:	f7f6 fa79 	bl	8000638 <__aeabi_dmul>
 800a146:	a35c      	add	r3, pc, #368	; (adr r3, 800a2b8 <atan+0x308>)
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	f7f6 f8bc 	bl	80002c8 <__aeabi_dsub>
 800a150:	4632      	mov	r2, r6
 800a152:	463b      	mov	r3, r7
 800a154:	f7f6 fa70 	bl	8000638 <__aeabi_dmul>
 800a158:	4602      	mov	r2, r0
 800a15a:	460b      	mov	r3, r1
 800a15c:	4640      	mov	r0, r8
 800a15e:	4649      	mov	r1, r9
 800a160:	f7f6 f8b4 	bl	80002cc <__adddf3>
 800a164:	4622      	mov	r2, r4
 800a166:	462b      	mov	r3, r5
 800a168:	f7f6 fa66 	bl	8000638 <__aeabi_dmul>
 800a16c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800a170:	4602      	mov	r2, r0
 800a172:	460b      	mov	r3, r1
 800a174:	d14b      	bne.n	800a20e <atan+0x25e>
 800a176:	4620      	mov	r0, r4
 800a178:	4629      	mov	r1, r5
 800a17a:	f7f6 f8a5 	bl	80002c8 <__aeabi_dsub>
 800a17e:	e72c      	b.n	8009fda <atan+0x2a>
 800a180:	ee10 0a10 	vmov	r0, s0
 800a184:	4b53      	ldr	r3, [pc, #332]	; (800a2d4 <atan+0x324>)
 800a186:	2200      	movs	r2, #0
 800a188:	4629      	mov	r1, r5
 800a18a:	f7f6 f89d 	bl	80002c8 <__aeabi_dsub>
 800a18e:	4b51      	ldr	r3, [pc, #324]	; (800a2d4 <atan+0x324>)
 800a190:	4606      	mov	r6, r0
 800a192:	460f      	mov	r7, r1
 800a194:	2200      	movs	r2, #0
 800a196:	4620      	mov	r0, r4
 800a198:	4629      	mov	r1, r5
 800a19a:	f7f6 f897 	bl	80002cc <__adddf3>
 800a19e:	4602      	mov	r2, r0
 800a1a0:	460b      	mov	r3, r1
 800a1a2:	4630      	mov	r0, r6
 800a1a4:	4639      	mov	r1, r7
 800a1a6:	f7f6 fb71 	bl	800088c <__aeabi_ddiv>
 800a1aa:	f04f 0a01 	mov.w	sl, #1
 800a1ae:	4604      	mov	r4, r0
 800a1b0:	460d      	mov	r5, r1
 800a1b2:	e764      	b.n	800a07e <atan+0xce>
 800a1b4:	4b49      	ldr	r3, [pc, #292]	; (800a2dc <atan+0x32c>)
 800a1b6:	429e      	cmp	r6, r3
 800a1b8:	da1d      	bge.n	800a1f6 <atan+0x246>
 800a1ba:	ee10 0a10 	vmov	r0, s0
 800a1be:	4b48      	ldr	r3, [pc, #288]	; (800a2e0 <atan+0x330>)
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	4629      	mov	r1, r5
 800a1c4:	f7f6 f880 	bl	80002c8 <__aeabi_dsub>
 800a1c8:	4b45      	ldr	r3, [pc, #276]	; (800a2e0 <atan+0x330>)
 800a1ca:	4606      	mov	r6, r0
 800a1cc:	460f      	mov	r7, r1
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	4620      	mov	r0, r4
 800a1d2:	4629      	mov	r1, r5
 800a1d4:	f7f6 fa30 	bl	8000638 <__aeabi_dmul>
 800a1d8:	4b3e      	ldr	r3, [pc, #248]	; (800a2d4 <atan+0x324>)
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f7f6 f876 	bl	80002cc <__adddf3>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	460b      	mov	r3, r1
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	4639      	mov	r1, r7
 800a1e8:	f7f6 fb50 	bl	800088c <__aeabi_ddiv>
 800a1ec:	f04f 0a02 	mov.w	sl, #2
 800a1f0:	4604      	mov	r4, r0
 800a1f2:	460d      	mov	r5, r1
 800a1f4:	e743      	b.n	800a07e <atan+0xce>
 800a1f6:	462b      	mov	r3, r5
 800a1f8:	ee10 2a10 	vmov	r2, s0
 800a1fc:	4939      	ldr	r1, [pc, #228]	; (800a2e4 <atan+0x334>)
 800a1fe:	2000      	movs	r0, #0
 800a200:	f7f6 fb44 	bl	800088c <__aeabi_ddiv>
 800a204:	f04f 0a03 	mov.w	sl, #3
 800a208:	4604      	mov	r4, r0
 800a20a:	460d      	mov	r5, r1
 800a20c:	e737      	b.n	800a07e <atan+0xce>
 800a20e:	4b36      	ldr	r3, [pc, #216]	; (800a2e8 <atan+0x338>)
 800a210:	4e36      	ldr	r6, [pc, #216]	; (800a2ec <atan+0x33c>)
 800a212:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a216:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800a21a:	e9da 2300 	ldrd	r2, r3, [sl]
 800a21e:	f7f6 f853 	bl	80002c8 <__aeabi_dsub>
 800a222:	4622      	mov	r2, r4
 800a224:	462b      	mov	r3, r5
 800a226:	f7f6 f84f 	bl	80002c8 <__aeabi_dsub>
 800a22a:	4602      	mov	r2, r0
 800a22c:	460b      	mov	r3, r1
 800a22e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a232:	f7f6 f849 	bl	80002c8 <__aeabi_dsub>
 800a236:	f1bb 0f00 	cmp.w	fp, #0
 800a23a:	4604      	mov	r4, r0
 800a23c:	460d      	mov	r5, r1
 800a23e:	f6bf aed6 	bge.w	8009fee <atan+0x3e>
 800a242:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a246:	461d      	mov	r5, r3
 800a248:	e6d1      	b.n	8009fee <atan+0x3e>
 800a24a:	a51d      	add	r5, pc, #116	; (adr r5, 800a2c0 <atan+0x310>)
 800a24c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a250:	e6cd      	b.n	8009fee <atan+0x3e>
 800a252:	bf00      	nop
 800a254:	f3af 8000 	nop.w
 800a258:	54442d18 	.word	0x54442d18
 800a25c:	bff921fb 	.word	0xbff921fb
 800a260:	8800759c 	.word	0x8800759c
 800a264:	7e37e43c 	.word	0x7e37e43c
 800a268:	e322da11 	.word	0xe322da11
 800a26c:	3f90ad3a 	.word	0x3f90ad3a
 800a270:	24760deb 	.word	0x24760deb
 800a274:	3fa97b4b 	.word	0x3fa97b4b
 800a278:	a0d03d51 	.word	0xa0d03d51
 800a27c:	3fb10d66 	.word	0x3fb10d66
 800a280:	c54c206e 	.word	0xc54c206e
 800a284:	3fb745cd 	.word	0x3fb745cd
 800a288:	920083ff 	.word	0x920083ff
 800a28c:	3fc24924 	.word	0x3fc24924
 800a290:	5555550d 	.word	0x5555550d
 800a294:	3fd55555 	.word	0x3fd55555
 800a298:	2c6a6c2f 	.word	0x2c6a6c2f
 800a29c:	bfa2b444 	.word	0xbfa2b444
 800a2a0:	52defd9a 	.word	0x52defd9a
 800a2a4:	3fadde2d 	.word	0x3fadde2d
 800a2a8:	af749a6d 	.word	0xaf749a6d
 800a2ac:	3fb3b0f2 	.word	0x3fb3b0f2
 800a2b0:	fe231671 	.word	0xfe231671
 800a2b4:	3fbc71c6 	.word	0x3fbc71c6
 800a2b8:	9998ebc4 	.word	0x9998ebc4
 800a2bc:	3fc99999 	.word	0x3fc99999
 800a2c0:	54442d18 	.word	0x54442d18
 800a2c4:	3ff921fb 	.word	0x3ff921fb
 800a2c8:	440fffff 	.word	0x440fffff
 800a2cc:	7ff00000 	.word	0x7ff00000
 800a2d0:	3fdbffff 	.word	0x3fdbffff
 800a2d4:	3ff00000 	.word	0x3ff00000
 800a2d8:	3ff2ffff 	.word	0x3ff2ffff
 800a2dc:	40038000 	.word	0x40038000
 800a2e0:	3ff80000 	.word	0x3ff80000
 800a2e4:	bff00000 	.word	0xbff00000
 800a2e8:	0800b960 	.word	0x0800b960
 800a2ec:	0800b940 	.word	0x0800b940

0800a2f0 <fabs>:
 800a2f0:	ec51 0b10 	vmov	r0, r1, d0
 800a2f4:	ee10 2a10 	vmov	r2, s0
 800a2f8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a2fc:	ec43 2b10 	vmov	d0, r2, r3
 800a300:	4770      	bx	lr
 800a302:	0000      	movs	r0, r0
 800a304:	0000      	movs	r0, r0
	...

0800a308 <tan>:
 800a308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a30a:	ec53 2b10 	vmov	r2, r3, d0
 800a30e:	4816      	ldr	r0, [pc, #88]	; (800a368 <tan+0x60>)
 800a310:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a314:	4281      	cmp	r1, r0
 800a316:	dc07      	bgt.n	800a328 <tan+0x20>
 800a318:	ed9f 1b11 	vldr	d1, [pc, #68]	; 800a360 <tan+0x58>
 800a31c:	2001      	movs	r0, #1
 800a31e:	b005      	add	sp, #20
 800a320:	f85d eb04 	ldr.w	lr, [sp], #4
 800a324:	f000 bd80 	b.w	800ae28 <__kernel_tan>
 800a328:	4810      	ldr	r0, [pc, #64]	; (800a36c <tan+0x64>)
 800a32a:	4281      	cmp	r1, r0
 800a32c:	dd09      	ble.n	800a342 <tan+0x3a>
 800a32e:	ee10 0a10 	vmov	r0, s0
 800a332:	4619      	mov	r1, r3
 800a334:	f7f5 ffc8 	bl	80002c8 <__aeabi_dsub>
 800a338:	ec41 0b10 	vmov	d0, r0, r1
 800a33c:	b005      	add	sp, #20
 800a33e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a342:	4668      	mov	r0, sp
 800a344:	f000 f814 	bl	800a370 <__ieee754_rem_pio2>
 800a348:	0040      	lsls	r0, r0, #1
 800a34a:	f000 0002 	and.w	r0, r0, #2
 800a34e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a352:	ed9d 0b00 	vldr	d0, [sp]
 800a356:	f1c0 0001 	rsb	r0, r0, #1
 800a35a:	f000 fd65 	bl	800ae28 <__kernel_tan>
 800a35e:	e7ed      	b.n	800a33c <tan+0x34>
	...
 800a368:	3fe921fb 	.word	0x3fe921fb
 800a36c:	7fefffff 	.word	0x7fefffff

0800a370 <__ieee754_rem_pio2>:
 800a370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a374:	ed2d 8b02 	vpush	{d8}
 800a378:	ec55 4b10 	vmov	r4, r5, d0
 800a37c:	4bca      	ldr	r3, [pc, #808]	; (800a6a8 <__ieee754_rem_pio2+0x338>)
 800a37e:	b08b      	sub	sp, #44	; 0x2c
 800a380:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800a384:	4598      	cmp	r8, r3
 800a386:	4682      	mov	sl, r0
 800a388:	9502      	str	r5, [sp, #8]
 800a38a:	dc08      	bgt.n	800a39e <__ieee754_rem_pio2+0x2e>
 800a38c:	2200      	movs	r2, #0
 800a38e:	2300      	movs	r3, #0
 800a390:	ed80 0b00 	vstr	d0, [r0]
 800a394:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a398:	f04f 0b00 	mov.w	fp, #0
 800a39c:	e028      	b.n	800a3f0 <__ieee754_rem_pio2+0x80>
 800a39e:	4bc3      	ldr	r3, [pc, #780]	; (800a6ac <__ieee754_rem_pio2+0x33c>)
 800a3a0:	4598      	cmp	r8, r3
 800a3a2:	dc78      	bgt.n	800a496 <__ieee754_rem_pio2+0x126>
 800a3a4:	9b02      	ldr	r3, [sp, #8]
 800a3a6:	4ec2      	ldr	r6, [pc, #776]	; (800a6b0 <__ieee754_rem_pio2+0x340>)
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	ee10 0a10 	vmov	r0, s0
 800a3ae:	a3b0      	add	r3, pc, #704	; (adr r3, 800a670 <__ieee754_rem_pio2+0x300>)
 800a3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	dd39      	ble.n	800a42c <__ieee754_rem_pio2+0xbc>
 800a3b8:	f7f5 ff86 	bl	80002c8 <__aeabi_dsub>
 800a3bc:	45b0      	cmp	r8, r6
 800a3be:	4604      	mov	r4, r0
 800a3c0:	460d      	mov	r5, r1
 800a3c2:	d01b      	beq.n	800a3fc <__ieee754_rem_pio2+0x8c>
 800a3c4:	a3ac      	add	r3, pc, #688	; (adr r3, 800a678 <__ieee754_rem_pio2+0x308>)
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	f7f5 ff7d 	bl	80002c8 <__aeabi_dsub>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	e9ca 2300 	strd	r2, r3, [sl]
 800a3d6:	4620      	mov	r0, r4
 800a3d8:	4629      	mov	r1, r5
 800a3da:	f7f5 ff75 	bl	80002c8 <__aeabi_dsub>
 800a3de:	a3a6      	add	r3, pc, #664	; (adr r3, 800a678 <__ieee754_rem_pio2+0x308>)
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f7f5 ff70 	bl	80002c8 <__aeabi_dsub>
 800a3e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a3ec:	f04f 0b01 	mov.w	fp, #1
 800a3f0:	4658      	mov	r0, fp
 800a3f2:	b00b      	add	sp, #44	; 0x2c
 800a3f4:	ecbd 8b02 	vpop	{d8}
 800a3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fc:	a3a0      	add	r3, pc, #640	; (adr r3, 800a680 <__ieee754_rem_pio2+0x310>)
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	f7f5 ff61 	bl	80002c8 <__aeabi_dsub>
 800a406:	a3a0      	add	r3, pc, #640	; (adr r3, 800a688 <__ieee754_rem_pio2+0x318>)
 800a408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a40c:	4604      	mov	r4, r0
 800a40e:	460d      	mov	r5, r1
 800a410:	f7f5 ff5a 	bl	80002c8 <__aeabi_dsub>
 800a414:	4602      	mov	r2, r0
 800a416:	460b      	mov	r3, r1
 800a418:	e9ca 2300 	strd	r2, r3, [sl]
 800a41c:	4620      	mov	r0, r4
 800a41e:	4629      	mov	r1, r5
 800a420:	f7f5 ff52 	bl	80002c8 <__aeabi_dsub>
 800a424:	a398      	add	r3, pc, #608	; (adr r3, 800a688 <__ieee754_rem_pio2+0x318>)
 800a426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a42a:	e7db      	b.n	800a3e4 <__ieee754_rem_pio2+0x74>
 800a42c:	f7f5 ff4e 	bl	80002cc <__adddf3>
 800a430:	45b0      	cmp	r8, r6
 800a432:	4604      	mov	r4, r0
 800a434:	460d      	mov	r5, r1
 800a436:	d016      	beq.n	800a466 <__ieee754_rem_pio2+0xf6>
 800a438:	a38f      	add	r3, pc, #572	; (adr r3, 800a678 <__ieee754_rem_pio2+0x308>)
 800a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43e:	f7f5 ff45 	bl	80002cc <__adddf3>
 800a442:	4602      	mov	r2, r0
 800a444:	460b      	mov	r3, r1
 800a446:	e9ca 2300 	strd	r2, r3, [sl]
 800a44a:	4620      	mov	r0, r4
 800a44c:	4629      	mov	r1, r5
 800a44e:	f7f5 ff3b 	bl	80002c8 <__aeabi_dsub>
 800a452:	a389      	add	r3, pc, #548	; (adr r3, 800a678 <__ieee754_rem_pio2+0x308>)
 800a454:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a458:	f7f5 ff38 	bl	80002cc <__adddf3>
 800a45c:	f04f 3bff 	mov.w	fp, #4294967295
 800a460:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a464:	e7c4      	b.n	800a3f0 <__ieee754_rem_pio2+0x80>
 800a466:	a386      	add	r3, pc, #536	; (adr r3, 800a680 <__ieee754_rem_pio2+0x310>)
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	f7f5 ff2e 	bl	80002cc <__adddf3>
 800a470:	a385      	add	r3, pc, #532	; (adr r3, 800a688 <__ieee754_rem_pio2+0x318>)
 800a472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a476:	4604      	mov	r4, r0
 800a478:	460d      	mov	r5, r1
 800a47a:	f7f5 ff27 	bl	80002cc <__adddf3>
 800a47e:	4602      	mov	r2, r0
 800a480:	460b      	mov	r3, r1
 800a482:	e9ca 2300 	strd	r2, r3, [sl]
 800a486:	4620      	mov	r0, r4
 800a488:	4629      	mov	r1, r5
 800a48a:	f7f5 ff1d 	bl	80002c8 <__aeabi_dsub>
 800a48e:	a37e      	add	r3, pc, #504	; (adr r3, 800a688 <__ieee754_rem_pio2+0x318>)
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	e7e0      	b.n	800a458 <__ieee754_rem_pio2+0xe8>
 800a496:	4b87      	ldr	r3, [pc, #540]	; (800a6b4 <__ieee754_rem_pio2+0x344>)
 800a498:	4598      	cmp	r8, r3
 800a49a:	f300 80d9 	bgt.w	800a650 <__ieee754_rem_pio2+0x2e0>
 800a49e:	f7ff ff27 	bl	800a2f0 <fabs>
 800a4a2:	ec55 4b10 	vmov	r4, r5, d0
 800a4a6:	ee10 0a10 	vmov	r0, s0
 800a4aa:	a379      	add	r3, pc, #484	; (adr r3, 800a690 <__ieee754_rem_pio2+0x320>)
 800a4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4b0:	4629      	mov	r1, r5
 800a4b2:	f7f6 f8c1 	bl	8000638 <__aeabi_dmul>
 800a4b6:	4b80      	ldr	r3, [pc, #512]	; (800a6b8 <__ieee754_rem_pio2+0x348>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f7f5 ff07 	bl	80002cc <__adddf3>
 800a4be:	f7f6 fb6b 	bl	8000b98 <__aeabi_d2iz>
 800a4c2:	4683      	mov	fp, r0
 800a4c4:	f7f6 f84e 	bl	8000564 <__aeabi_i2d>
 800a4c8:	4602      	mov	r2, r0
 800a4ca:	460b      	mov	r3, r1
 800a4cc:	ec43 2b18 	vmov	d8, r2, r3
 800a4d0:	a367      	add	r3, pc, #412	; (adr r3, 800a670 <__ieee754_rem_pio2+0x300>)
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	f7f6 f8af 	bl	8000638 <__aeabi_dmul>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	460b      	mov	r3, r1
 800a4de:	4620      	mov	r0, r4
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	f7f5 fef1 	bl	80002c8 <__aeabi_dsub>
 800a4e6:	a364      	add	r3, pc, #400	; (adr r3, 800a678 <__ieee754_rem_pio2+0x308>)
 800a4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	460f      	mov	r7, r1
 800a4f0:	ec51 0b18 	vmov	r0, r1, d8
 800a4f4:	f7f6 f8a0 	bl	8000638 <__aeabi_dmul>
 800a4f8:	f1bb 0f1f 	cmp.w	fp, #31
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	460d      	mov	r5, r1
 800a500:	dc0d      	bgt.n	800a51e <__ieee754_rem_pio2+0x1ae>
 800a502:	4b6e      	ldr	r3, [pc, #440]	; (800a6bc <__ieee754_rem_pio2+0x34c>)
 800a504:	f10b 32ff 	add.w	r2, fp, #4294967295
 800a508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50c:	4543      	cmp	r3, r8
 800a50e:	d006      	beq.n	800a51e <__ieee754_rem_pio2+0x1ae>
 800a510:	4622      	mov	r2, r4
 800a512:	462b      	mov	r3, r5
 800a514:	4630      	mov	r0, r6
 800a516:	4639      	mov	r1, r7
 800a518:	f7f5 fed6 	bl	80002c8 <__aeabi_dsub>
 800a51c:	e00f      	b.n	800a53e <__ieee754_rem_pio2+0x1ce>
 800a51e:	462b      	mov	r3, r5
 800a520:	4622      	mov	r2, r4
 800a522:	4630      	mov	r0, r6
 800a524:	4639      	mov	r1, r7
 800a526:	f7f5 fecf 	bl	80002c8 <__aeabi_dsub>
 800a52a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a52e:	9303      	str	r3, [sp, #12]
 800a530:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a534:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a538:	f1b8 0f10 	cmp.w	r8, #16
 800a53c:	dc02      	bgt.n	800a544 <__ieee754_rem_pio2+0x1d4>
 800a53e:	e9ca 0100 	strd	r0, r1, [sl]
 800a542:	e039      	b.n	800a5b8 <__ieee754_rem_pio2+0x248>
 800a544:	a34e      	add	r3, pc, #312	; (adr r3, 800a680 <__ieee754_rem_pio2+0x310>)
 800a546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a54a:	ec51 0b18 	vmov	r0, r1, d8
 800a54e:	f7f6 f873 	bl	8000638 <__aeabi_dmul>
 800a552:	4604      	mov	r4, r0
 800a554:	460d      	mov	r5, r1
 800a556:	4602      	mov	r2, r0
 800a558:	460b      	mov	r3, r1
 800a55a:	4630      	mov	r0, r6
 800a55c:	4639      	mov	r1, r7
 800a55e:	f7f5 feb3 	bl	80002c8 <__aeabi_dsub>
 800a562:	4602      	mov	r2, r0
 800a564:	460b      	mov	r3, r1
 800a566:	4680      	mov	r8, r0
 800a568:	4689      	mov	r9, r1
 800a56a:	4630      	mov	r0, r6
 800a56c:	4639      	mov	r1, r7
 800a56e:	f7f5 feab 	bl	80002c8 <__aeabi_dsub>
 800a572:	4622      	mov	r2, r4
 800a574:	462b      	mov	r3, r5
 800a576:	f7f5 fea7 	bl	80002c8 <__aeabi_dsub>
 800a57a:	a343      	add	r3, pc, #268	; (adr r3, 800a688 <__ieee754_rem_pio2+0x318>)
 800a57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a580:	4604      	mov	r4, r0
 800a582:	460d      	mov	r5, r1
 800a584:	ec51 0b18 	vmov	r0, r1, d8
 800a588:	f7f6 f856 	bl	8000638 <__aeabi_dmul>
 800a58c:	4622      	mov	r2, r4
 800a58e:	462b      	mov	r3, r5
 800a590:	f7f5 fe9a 	bl	80002c8 <__aeabi_dsub>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	4604      	mov	r4, r0
 800a59a:	460d      	mov	r5, r1
 800a59c:	4640      	mov	r0, r8
 800a59e:	4649      	mov	r1, r9
 800a5a0:	f7f5 fe92 	bl	80002c8 <__aeabi_dsub>
 800a5a4:	9a03      	ldr	r2, [sp, #12]
 800a5a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a5aa:	1ad3      	subs	r3, r2, r3
 800a5ac:	2b31      	cmp	r3, #49	; 0x31
 800a5ae:	dc24      	bgt.n	800a5fa <__ieee754_rem_pio2+0x28a>
 800a5b0:	e9ca 0100 	strd	r0, r1, [sl]
 800a5b4:	4646      	mov	r6, r8
 800a5b6:	464f      	mov	r7, r9
 800a5b8:	e9da 8900 	ldrd	r8, r9, [sl]
 800a5bc:	4630      	mov	r0, r6
 800a5be:	4642      	mov	r2, r8
 800a5c0:	464b      	mov	r3, r9
 800a5c2:	4639      	mov	r1, r7
 800a5c4:	f7f5 fe80 	bl	80002c8 <__aeabi_dsub>
 800a5c8:	462b      	mov	r3, r5
 800a5ca:	4622      	mov	r2, r4
 800a5cc:	f7f5 fe7c 	bl	80002c8 <__aeabi_dsub>
 800a5d0:	9b02      	ldr	r3, [sp, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a5d8:	f6bf af0a 	bge.w	800a3f0 <__ieee754_rem_pio2+0x80>
 800a5dc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a5e0:	f8ca 3004 	str.w	r3, [sl, #4]
 800a5e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a5e8:	f8ca 8000 	str.w	r8, [sl]
 800a5ec:	f8ca 0008 	str.w	r0, [sl, #8]
 800a5f0:	f8ca 300c 	str.w	r3, [sl, #12]
 800a5f4:	f1cb 0b00 	rsb	fp, fp, #0
 800a5f8:	e6fa      	b.n	800a3f0 <__ieee754_rem_pio2+0x80>
 800a5fa:	a327      	add	r3, pc, #156	; (adr r3, 800a698 <__ieee754_rem_pio2+0x328>)
 800a5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a600:	ec51 0b18 	vmov	r0, r1, d8
 800a604:	f7f6 f818 	bl	8000638 <__aeabi_dmul>
 800a608:	4604      	mov	r4, r0
 800a60a:	460d      	mov	r5, r1
 800a60c:	4602      	mov	r2, r0
 800a60e:	460b      	mov	r3, r1
 800a610:	4640      	mov	r0, r8
 800a612:	4649      	mov	r1, r9
 800a614:	f7f5 fe58 	bl	80002c8 <__aeabi_dsub>
 800a618:	4602      	mov	r2, r0
 800a61a:	460b      	mov	r3, r1
 800a61c:	4606      	mov	r6, r0
 800a61e:	460f      	mov	r7, r1
 800a620:	4640      	mov	r0, r8
 800a622:	4649      	mov	r1, r9
 800a624:	f7f5 fe50 	bl	80002c8 <__aeabi_dsub>
 800a628:	4622      	mov	r2, r4
 800a62a:	462b      	mov	r3, r5
 800a62c:	f7f5 fe4c 	bl	80002c8 <__aeabi_dsub>
 800a630:	a31b      	add	r3, pc, #108	; (adr r3, 800a6a0 <__ieee754_rem_pio2+0x330>)
 800a632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a636:	4604      	mov	r4, r0
 800a638:	460d      	mov	r5, r1
 800a63a:	ec51 0b18 	vmov	r0, r1, d8
 800a63e:	f7f5 fffb 	bl	8000638 <__aeabi_dmul>
 800a642:	4622      	mov	r2, r4
 800a644:	462b      	mov	r3, r5
 800a646:	f7f5 fe3f 	bl	80002c8 <__aeabi_dsub>
 800a64a:	4604      	mov	r4, r0
 800a64c:	460d      	mov	r5, r1
 800a64e:	e75f      	b.n	800a510 <__ieee754_rem_pio2+0x1a0>
 800a650:	4b1b      	ldr	r3, [pc, #108]	; (800a6c0 <__ieee754_rem_pio2+0x350>)
 800a652:	4598      	cmp	r8, r3
 800a654:	dd36      	ble.n	800a6c4 <__ieee754_rem_pio2+0x354>
 800a656:	ee10 2a10 	vmov	r2, s0
 800a65a:	462b      	mov	r3, r5
 800a65c:	4620      	mov	r0, r4
 800a65e:	4629      	mov	r1, r5
 800a660:	f7f5 fe32 	bl	80002c8 <__aeabi_dsub>
 800a664:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a668:	e9ca 0100 	strd	r0, r1, [sl]
 800a66c:	e694      	b.n	800a398 <__ieee754_rem_pio2+0x28>
 800a66e:	bf00      	nop
 800a670:	54400000 	.word	0x54400000
 800a674:	3ff921fb 	.word	0x3ff921fb
 800a678:	1a626331 	.word	0x1a626331
 800a67c:	3dd0b461 	.word	0x3dd0b461
 800a680:	1a600000 	.word	0x1a600000
 800a684:	3dd0b461 	.word	0x3dd0b461
 800a688:	2e037073 	.word	0x2e037073
 800a68c:	3ba3198a 	.word	0x3ba3198a
 800a690:	6dc9c883 	.word	0x6dc9c883
 800a694:	3fe45f30 	.word	0x3fe45f30
 800a698:	2e000000 	.word	0x2e000000
 800a69c:	3ba3198a 	.word	0x3ba3198a
 800a6a0:	252049c1 	.word	0x252049c1
 800a6a4:	397b839a 	.word	0x397b839a
 800a6a8:	3fe921fb 	.word	0x3fe921fb
 800a6ac:	4002d97b 	.word	0x4002d97b
 800a6b0:	3ff921fb 	.word	0x3ff921fb
 800a6b4:	413921fb 	.word	0x413921fb
 800a6b8:	3fe00000 	.word	0x3fe00000
 800a6bc:	0800b980 	.word	0x0800b980
 800a6c0:	7fefffff 	.word	0x7fefffff
 800a6c4:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a6c8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a6cc:	ee10 0a10 	vmov	r0, s0
 800a6d0:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a6d4:	ee10 6a10 	vmov	r6, s0
 800a6d8:	460f      	mov	r7, r1
 800a6da:	f7f6 fa5d 	bl	8000b98 <__aeabi_d2iz>
 800a6de:	f7f5 ff41 	bl	8000564 <__aeabi_i2d>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	460b      	mov	r3, r1
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a6ee:	f7f5 fdeb 	bl	80002c8 <__aeabi_dsub>
 800a6f2:	4b23      	ldr	r3, [pc, #140]	; (800a780 <__ieee754_rem_pio2+0x410>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f7f5 ff9f 	bl	8000638 <__aeabi_dmul>
 800a6fa:	460f      	mov	r7, r1
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	f7f6 fa4b 	bl	8000b98 <__aeabi_d2iz>
 800a702:	f7f5 ff2f 	bl	8000564 <__aeabi_i2d>
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	4630      	mov	r0, r6
 800a70c:	4639      	mov	r1, r7
 800a70e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a712:	f7f5 fdd9 	bl	80002c8 <__aeabi_dsub>
 800a716:	4b1a      	ldr	r3, [pc, #104]	; (800a780 <__ieee754_rem_pio2+0x410>)
 800a718:	2200      	movs	r2, #0
 800a71a:	f7f5 ff8d 	bl	8000638 <__aeabi_dmul>
 800a71e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a722:	ad04      	add	r5, sp, #16
 800a724:	f04f 0803 	mov.w	r8, #3
 800a728:	46a9      	mov	r9, r5
 800a72a:	2600      	movs	r6, #0
 800a72c:	2700      	movs	r7, #0
 800a72e:	4632      	mov	r2, r6
 800a730:	463b      	mov	r3, r7
 800a732:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a736:	46c3      	mov	fp, r8
 800a738:	3d08      	subs	r5, #8
 800a73a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a73e:	f7f6 f9e3 	bl	8000b08 <__aeabi_dcmpeq>
 800a742:	2800      	cmp	r0, #0
 800a744:	d1f3      	bne.n	800a72e <__ieee754_rem_pio2+0x3be>
 800a746:	4b0f      	ldr	r3, [pc, #60]	; (800a784 <__ieee754_rem_pio2+0x414>)
 800a748:	9301      	str	r3, [sp, #4]
 800a74a:	2302      	movs	r3, #2
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	4622      	mov	r2, r4
 800a750:	465b      	mov	r3, fp
 800a752:	4651      	mov	r1, sl
 800a754:	4648      	mov	r0, r9
 800a756:	f000 f817 	bl	800a788 <__kernel_rem_pio2>
 800a75a:	9b02      	ldr	r3, [sp, #8]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	4683      	mov	fp, r0
 800a760:	f6bf ae46 	bge.w	800a3f0 <__ieee754_rem_pio2+0x80>
 800a764:	e9da 2100 	ldrd	r2, r1, [sl]
 800a768:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a76c:	e9ca 2300 	strd	r2, r3, [sl]
 800a770:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a774:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a778:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a77c:	e73a      	b.n	800a5f4 <__ieee754_rem_pio2+0x284>
 800a77e:	bf00      	nop
 800a780:	41700000 	.word	0x41700000
 800a784:	0800ba00 	.word	0x0800ba00

0800a788 <__kernel_rem_pio2>:
 800a788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a78c:	ed2d 8b02 	vpush	{d8}
 800a790:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a794:	f112 0f14 	cmn.w	r2, #20
 800a798:	9308      	str	r3, [sp, #32]
 800a79a:	9101      	str	r1, [sp, #4]
 800a79c:	4bc4      	ldr	r3, [pc, #784]	; (800aab0 <__kernel_rem_pio2+0x328>)
 800a79e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a7a0:	900b      	str	r0, [sp, #44]	; 0x2c
 800a7a2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a7a6:	9302      	str	r3, [sp, #8]
 800a7a8:	9b08      	ldr	r3, [sp, #32]
 800a7aa:	f103 33ff 	add.w	r3, r3, #4294967295
 800a7ae:	bfa8      	it	ge
 800a7b0:	1ed4      	subge	r4, r2, #3
 800a7b2:	9306      	str	r3, [sp, #24]
 800a7b4:	bfb2      	itee	lt
 800a7b6:	2400      	movlt	r4, #0
 800a7b8:	2318      	movge	r3, #24
 800a7ba:	fb94 f4f3 	sdivge	r4, r4, r3
 800a7be:	f06f 0317 	mvn.w	r3, #23
 800a7c2:	fb04 3303 	mla	r3, r4, r3, r3
 800a7c6:	eb03 0a02 	add.w	sl, r3, r2
 800a7ca:	9b02      	ldr	r3, [sp, #8]
 800a7cc:	9a06      	ldr	r2, [sp, #24]
 800a7ce:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800aaa0 <__kernel_rem_pio2+0x318>
 800a7d2:	eb03 0802 	add.w	r8, r3, r2
 800a7d6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a7d8:	1aa7      	subs	r7, r4, r2
 800a7da:	ae22      	add	r6, sp, #136	; 0x88
 800a7dc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a7e0:	2500      	movs	r5, #0
 800a7e2:	4545      	cmp	r5, r8
 800a7e4:	dd13      	ble.n	800a80e <__kernel_rem_pio2+0x86>
 800a7e6:	9b08      	ldr	r3, [sp, #32]
 800a7e8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800aaa0 <__kernel_rem_pio2+0x318>
 800a7ec:	aa22      	add	r2, sp, #136	; 0x88
 800a7ee:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a7f2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a7f6:	f04f 0800 	mov.w	r8, #0
 800a7fa:	9b02      	ldr	r3, [sp, #8]
 800a7fc:	4598      	cmp	r8, r3
 800a7fe:	dc2f      	bgt.n	800a860 <__kernel_rem_pio2+0xd8>
 800a800:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a804:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a808:	462f      	mov	r7, r5
 800a80a:	2600      	movs	r6, #0
 800a80c:	e01b      	b.n	800a846 <__kernel_rem_pio2+0xbe>
 800a80e:	42ef      	cmn	r7, r5
 800a810:	d407      	bmi.n	800a822 <__kernel_rem_pio2+0x9a>
 800a812:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a816:	f7f5 fea5 	bl	8000564 <__aeabi_i2d>
 800a81a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a81e:	3501      	adds	r5, #1
 800a820:	e7df      	b.n	800a7e2 <__kernel_rem_pio2+0x5a>
 800a822:	ec51 0b18 	vmov	r0, r1, d8
 800a826:	e7f8      	b.n	800a81a <__kernel_rem_pio2+0x92>
 800a828:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a82c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a830:	f7f5 ff02 	bl	8000638 <__aeabi_dmul>
 800a834:	4602      	mov	r2, r0
 800a836:	460b      	mov	r3, r1
 800a838:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a83c:	f7f5 fd46 	bl	80002cc <__adddf3>
 800a840:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a844:	3601      	adds	r6, #1
 800a846:	9b06      	ldr	r3, [sp, #24]
 800a848:	429e      	cmp	r6, r3
 800a84a:	f1a7 0708 	sub.w	r7, r7, #8
 800a84e:	ddeb      	ble.n	800a828 <__kernel_rem_pio2+0xa0>
 800a850:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a854:	f108 0801 	add.w	r8, r8, #1
 800a858:	ecab 7b02 	vstmia	fp!, {d7}
 800a85c:	3508      	adds	r5, #8
 800a85e:	e7cc      	b.n	800a7fa <__kernel_rem_pio2+0x72>
 800a860:	9b02      	ldr	r3, [sp, #8]
 800a862:	aa0e      	add	r2, sp, #56	; 0x38
 800a864:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a868:	930d      	str	r3, [sp, #52]	; 0x34
 800a86a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a86c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a870:	9c02      	ldr	r4, [sp, #8]
 800a872:	930c      	str	r3, [sp, #48]	; 0x30
 800a874:	00e3      	lsls	r3, r4, #3
 800a876:	930a      	str	r3, [sp, #40]	; 0x28
 800a878:	ab9a      	add	r3, sp, #616	; 0x268
 800a87a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a87e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a882:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a886:	ab72      	add	r3, sp, #456	; 0x1c8
 800a888:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a88c:	46c3      	mov	fp, r8
 800a88e:	46a1      	mov	r9, r4
 800a890:	f1b9 0f00 	cmp.w	r9, #0
 800a894:	f1a5 0508 	sub.w	r5, r5, #8
 800a898:	dc77      	bgt.n	800a98a <__kernel_rem_pio2+0x202>
 800a89a:	ec47 6b10 	vmov	d0, r6, r7
 800a89e:	4650      	mov	r0, sl
 800a8a0:	f000 fd4e 	bl	800b340 <scalbn>
 800a8a4:	ec57 6b10 	vmov	r6, r7, d0
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a8ae:	ee10 0a10 	vmov	r0, s0
 800a8b2:	4639      	mov	r1, r7
 800a8b4:	f7f5 fec0 	bl	8000638 <__aeabi_dmul>
 800a8b8:	ec41 0b10 	vmov	d0, r0, r1
 800a8bc:	f000 fcc0 	bl	800b240 <floor>
 800a8c0:	4b7c      	ldr	r3, [pc, #496]	; (800aab4 <__kernel_rem_pio2+0x32c>)
 800a8c2:	ec51 0b10 	vmov	r0, r1, d0
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f7f5 feb6 	bl	8000638 <__aeabi_dmul>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	460b      	mov	r3, r1
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	f7f5 fcf8 	bl	80002c8 <__aeabi_dsub>
 800a8d8:	460f      	mov	r7, r1
 800a8da:	4606      	mov	r6, r0
 800a8dc:	f7f6 f95c 	bl	8000b98 <__aeabi_d2iz>
 800a8e0:	9004      	str	r0, [sp, #16]
 800a8e2:	f7f5 fe3f 	bl	8000564 <__aeabi_i2d>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	460b      	mov	r3, r1
 800a8ea:	4630      	mov	r0, r6
 800a8ec:	4639      	mov	r1, r7
 800a8ee:	f7f5 fceb 	bl	80002c8 <__aeabi_dsub>
 800a8f2:	f1ba 0f00 	cmp.w	sl, #0
 800a8f6:	4606      	mov	r6, r0
 800a8f8:	460f      	mov	r7, r1
 800a8fa:	dd6d      	ble.n	800a9d8 <__kernel_rem_pio2+0x250>
 800a8fc:	1e62      	subs	r2, r4, #1
 800a8fe:	ab0e      	add	r3, sp, #56	; 0x38
 800a900:	9d04      	ldr	r5, [sp, #16]
 800a902:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a906:	f1ca 0118 	rsb	r1, sl, #24
 800a90a:	fa40 f301 	asr.w	r3, r0, r1
 800a90e:	441d      	add	r5, r3
 800a910:	408b      	lsls	r3, r1
 800a912:	1ac0      	subs	r0, r0, r3
 800a914:	ab0e      	add	r3, sp, #56	; 0x38
 800a916:	9504      	str	r5, [sp, #16]
 800a918:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a91c:	f1ca 0317 	rsb	r3, sl, #23
 800a920:	fa40 fb03 	asr.w	fp, r0, r3
 800a924:	f1bb 0f00 	cmp.w	fp, #0
 800a928:	dd65      	ble.n	800a9f6 <__kernel_rem_pio2+0x26e>
 800a92a:	9b04      	ldr	r3, [sp, #16]
 800a92c:	2200      	movs	r2, #0
 800a92e:	3301      	adds	r3, #1
 800a930:	9304      	str	r3, [sp, #16]
 800a932:	4615      	mov	r5, r2
 800a934:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a938:	4294      	cmp	r4, r2
 800a93a:	f300 809c 	bgt.w	800aa76 <__kernel_rem_pio2+0x2ee>
 800a93e:	f1ba 0f00 	cmp.w	sl, #0
 800a942:	dd07      	ble.n	800a954 <__kernel_rem_pio2+0x1cc>
 800a944:	f1ba 0f01 	cmp.w	sl, #1
 800a948:	f000 80c0 	beq.w	800aacc <__kernel_rem_pio2+0x344>
 800a94c:	f1ba 0f02 	cmp.w	sl, #2
 800a950:	f000 80c6 	beq.w	800aae0 <__kernel_rem_pio2+0x358>
 800a954:	f1bb 0f02 	cmp.w	fp, #2
 800a958:	d14d      	bne.n	800a9f6 <__kernel_rem_pio2+0x26e>
 800a95a:	4632      	mov	r2, r6
 800a95c:	463b      	mov	r3, r7
 800a95e:	4956      	ldr	r1, [pc, #344]	; (800aab8 <__kernel_rem_pio2+0x330>)
 800a960:	2000      	movs	r0, #0
 800a962:	f7f5 fcb1 	bl	80002c8 <__aeabi_dsub>
 800a966:	4606      	mov	r6, r0
 800a968:	460f      	mov	r7, r1
 800a96a:	2d00      	cmp	r5, #0
 800a96c:	d043      	beq.n	800a9f6 <__kernel_rem_pio2+0x26e>
 800a96e:	4650      	mov	r0, sl
 800a970:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800aaa8 <__kernel_rem_pio2+0x320>
 800a974:	f000 fce4 	bl	800b340 <scalbn>
 800a978:	4630      	mov	r0, r6
 800a97a:	4639      	mov	r1, r7
 800a97c:	ec53 2b10 	vmov	r2, r3, d0
 800a980:	f7f5 fca2 	bl	80002c8 <__aeabi_dsub>
 800a984:	4606      	mov	r6, r0
 800a986:	460f      	mov	r7, r1
 800a988:	e035      	b.n	800a9f6 <__kernel_rem_pio2+0x26e>
 800a98a:	4b4c      	ldr	r3, [pc, #304]	; (800aabc <__kernel_rem_pio2+0x334>)
 800a98c:	2200      	movs	r2, #0
 800a98e:	4630      	mov	r0, r6
 800a990:	4639      	mov	r1, r7
 800a992:	f7f5 fe51 	bl	8000638 <__aeabi_dmul>
 800a996:	f7f6 f8ff 	bl	8000b98 <__aeabi_d2iz>
 800a99a:	f7f5 fde3 	bl	8000564 <__aeabi_i2d>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	460b      	mov	r3, r1
 800a9a2:	ec43 2b18 	vmov	d8, r2, r3
 800a9a6:	4b46      	ldr	r3, [pc, #280]	; (800aac0 <__kernel_rem_pio2+0x338>)
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	f7f5 fe45 	bl	8000638 <__aeabi_dmul>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	4630      	mov	r0, r6
 800a9b4:	4639      	mov	r1, r7
 800a9b6:	f7f5 fc87 	bl	80002c8 <__aeabi_dsub>
 800a9ba:	f7f6 f8ed 	bl	8000b98 <__aeabi_d2iz>
 800a9be:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9c2:	f84b 0b04 	str.w	r0, [fp], #4
 800a9c6:	ec51 0b18 	vmov	r0, r1, d8
 800a9ca:	f7f5 fc7f 	bl	80002cc <__adddf3>
 800a9ce:	f109 39ff 	add.w	r9, r9, #4294967295
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	460f      	mov	r7, r1
 800a9d6:	e75b      	b.n	800a890 <__kernel_rem_pio2+0x108>
 800a9d8:	d106      	bne.n	800a9e8 <__kernel_rem_pio2+0x260>
 800a9da:	1e63      	subs	r3, r4, #1
 800a9dc:	aa0e      	add	r2, sp, #56	; 0x38
 800a9de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a9e2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800a9e6:	e79d      	b.n	800a924 <__kernel_rem_pio2+0x19c>
 800a9e8:	4b36      	ldr	r3, [pc, #216]	; (800aac4 <__kernel_rem_pio2+0x33c>)
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f7f6 f8aa 	bl	8000b44 <__aeabi_dcmpge>
 800a9f0:	2800      	cmp	r0, #0
 800a9f2:	d13d      	bne.n	800aa70 <__kernel_rem_pio2+0x2e8>
 800a9f4:	4683      	mov	fp, r0
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	4630      	mov	r0, r6
 800a9fc:	4639      	mov	r1, r7
 800a9fe:	f7f6 f883 	bl	8000b08 <__aeabi_dcmpeq>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	f000 80c0 	beq.w	800ab88 <__kernel_rem_pio2+0x400>
 800aa08:	1e65      	subs	r5, r4, #1
 800aa0a:	462b      	mov	r3, r5
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	9902      	ldr	r1, [sp, #8]
 800aa10:	428b      	cmp	r3, r1
 800aa12:	da6c      	bge.n	800aaee <__kernel_rem_pio2+0x366>
 800aa14:	2a00      	cmp	r2, #0
 800aa16:	f000 8089 	beq.w	800ab2c <__kernel_rem_pio2+0x3a4>
 800aa1a:	ab0e      	add	r3, sp, #56	; 0x38
 800aa1c:	f1aa 0a18 	sub.w	sl, sl, #24
 800aa20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	f000 80ad 	beq.w	800ab84 <__kernel_rem_pio2+0x3fc>
 800aa2a:	4650      	mov	r0, sl
 800aa2c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800aaa8 <__kernel_rem_pio2+0x320>
 800aa30:	f000 fc86 	bl	800b340 <scalbn>
 800aa34:	ab9a      	add	r3, sp, #616	; 0x268
 800aa36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aa3a:	ec57 6b10 	vmov	r6, r7, d0
 800aa3e:	00ec      	lsls	r4, r5, #3
 800aa40:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800aa44:	46aa      	mov	sl, r5
 800aa46:	f1ba 0f00 	cmp.w	sl, #0
 800aa4a:	f280 80d6 	bge.w	800abfa <__kernel_rem_pio2+0x472>
 800aa4e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800aaa0 <__kernel_rem_pio2+0x318>
 800aa52:	462e      	mov	r6, r5
 800aa54:	2e00      	cmp	r6, #0
 800aa56:	f2c0 8104 	blt.w	800ac62 <__kernel_rem_pio2+0x4da>
 800aa5a:	ab72      	add	r3, sp, #456	; 0x1c8
 800aa5c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800aa60:	f8df a064 	ldr.w	sl, [pc, #100]	; 800aac8 <__kernel_rem_pio2+0x340>
 800aa64:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800aa68:	f04f 0800 	mov.w	r8, #0
 800aa6c:	1baf      	subs	r7, r5, r6
 800aa6e:	e0ea      	b.n	800ac46 <__kernel_rem_pio2+0x4be>
 800aa70:	f04f 0b02 	mov.w	fp, #2
 800aa74:	e759      	b.n	800a92a <__kernel_rem_pio2+0x1a2>
 800aa76:	f8d8 3000 	ldr.w	r3, [r8]
 800aa7a:	b955      	cbnz	r5, 800aa92 <__kernel_rem_pio2+0x30a>
 800aa7c:	b123      	cbz	r3, 800aa88 <__kernel_rem_pio2+0x300>
 800aa7e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800aa82:	f8c8 3000 	str.w	r3, [r8]
 800aa86:	2301      	movs	r3, #1
 800aa88:	3201      	adds	r2, #1
 800aa8a:	f108 0804 	add.w	r8, r8, #4
 800aa8e:	461d      	mov	r5, r3
 800aa90:	e752      	b.n	800a938 <__kernel_rem_pio2+0x1b0>
 800aa92:	1acb      	subs	r3, r1, r3
 800aa94:	f8c8 3000 	str.w	r3, [r8]
 800aa98:	462b      	mov	r3, r5
 800aa9a:	e7f5      	b.n	800aa88 <__kernel_rem_pio2+0x300>
 800aa9c:	f3af 8000 	nop.w
	...
 800aaac:	3ff00000 	.word	0x3ff00000
 800aab0:	0800bb48 	.word	0x0800bb48
 800aab4:	40200000 	.word	0x40200000
 800aab8:	3ff00000 	.word	0x3ff00000
 800aabc:	3e700000 	.word	0x3e700000
 800aac0:	41700000 	.word	0x41700000
 800aac4:	3fe00000 	.word	0x3fe00000
 800aac8:	0800bb08 	.word	0x0800bb08
 800aacc:	1e62      	subs	r2, r4, #1
 800aace:	ab0e      	add	r3, sp, #56	; 0x38
 800aad0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aad8:	a90e      	add	r1, sp, #56	; 0x38
 800aada:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aade:	e739      	b.n	800a954 <__kernel_rem_pio2+0x1cc>
 800aae0:	1e62      	subs	r2, r4, #1
 800aae2:	ab0e      	add	r3, sp, #56	; 0x38
 800aae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800aaec:	e7f4      	b.n	800aad8 <__kernel_rem_pio2+0x350>
 800aaee:	a90e      	add	r1, sp, #56	; 0x38
 800aaf0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	430a      	orrs	r2, r1
 800aaf8:	e789      	b.n	800aa0e <__kernel_rem_pio2+0x286>
 800aafa:	3301      	adds	r3, #1
 800aafc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ab00:	2900      	cmp	r1, #0
 800ab02:	d0fa      	beq.n	800aafa <__kernel_rem_pio2+0x372>
 800ab04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab06:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ab0a:	446a      	add	r2, sp
 800ab0c:	3a98      	subs	r2, #152	; 0x98
 800ab0e:	920a      	str	r2, [sp, #40]	; 0x28
 800ab10:	9a08      	ldr	r2, [sp, #32]
 800ab12:	18e3      	adds	r3, r4, r3
 800ab14:	18a5      	adds	r5, r4, r2
 800ab16:	aa22      	add	r2, sp, #136	; 0x88
 800ab18:	f104 0801 	add.w	r8, r4, #1
 800ab1c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ab20:	9304      	str	r3, [sp, #16]
 800ab22:	9b04      	ldr	r3, [sp, #16]
 800ab24:	4543      	cmp	r3, r8
 800ab26:	da04      	bge.n	800ab32 <__kernel_rem_pio2+0x3aa>
 800ab28:	461c      	mov	r4, r3
 800ab2a:	e6a3      	b.n	800a874 <__kernel_rem_pio2+0xec>
 800ab2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab2e:	2301      	movs	r3, #1
 800ab30:	e7e4      	b.n	800aafc <__kernel_rem_pio2+0x374>
 800ab32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab34:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ab38:	f7f5 fd14 	bl	8000564 <__aeabi_i2d>
 800ab3c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800ab40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab42:	46ab      	mov	fp, r5
 800ab44:	461c      	mov	r4, r3
 800ab46:	f04f 0900 	mov.w	r9, #0
 800ab4a:	2600      	movs	r6, #0
 800ab4c:	2700      	movs	r7, #0
 800ab4e:	9b06      	ldr	r3, [sp, #24]
 800ab50:	4599      	cmp	r9, r3
 800ab52:	dd06      	ble.n	800ab62 <__kernel_rem_pio2+0x3da>
 800ab54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab56:	e8e3 6702 	strd	r6, r7, [r3], #8
 800ab5a:	f108 0801 	add.w	r8, r8, #1
 800ab5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ab60:	e7df      	b.n	800ab22 <__kernel_rem_pio2+0x39a>
 800ab62:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ab66:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ab6a:	f7f5 fd65 	bl	8000638 <__aeabi_dmul>
 800ab6e:	4602      	mov	r2, r0
 800ab70:	460b      	mov	r3, r1
 800ab72:	4630      	mov	r0, r6
 800ab74:	4639      	mov	r1, r7
 800ab76:	f7f5 fba9 	bl	80002cc <__adddf3>
 800ab7a:	f109 0901 	add.w	r9, r9, #1
 800ab7e:	4606      	mov	r6, r0
 800ab80:	460f      	mov	r7, r1
 800ab82:	e7e4      	b.n	800ab4e <__kernel_rem_pio2+0x3c6>
 800ab84:	3d01      	subs	r5, #1
 800ab86:	e748      	b.n	800aa1a <__kernel_rem_pio2+0x292>
 800ab88:	ec47 6b10 	vmov	d0, r6, r7
 800ab8c:	f1ca 0000 	rsb	r0, sl, #0
 800ab90:	f000 fbd6 	bl	800b340 <scalbn>
 800ab94:	ec57 6b10 	vmov	r6, r7, d0
 800ab98:	4ba0      	ldr	r3, [pc, #640]	; (800ae1c <__kernel_rem_pio2+0x694>)
 800ab9a:	ee10 0a10 	vmov	r0, s0
 800ab9e:	2200      	movs	r2, #0
 800aba0:	4639      	mov	r1, r7
 800aba2:	f7f5 ffcf 	bl	8000b44 <__aeabi_dcmpge>
 800aba6:	b1f8      	cbz	r0, 800abe8 <__kernel_rem_pio2+0x460>
 800aba8:	4b9d      	ldr	r3, [pc, #628]	; (800ae20 <__kernel_rem_pio2+0x698>)
 800abaa:	2200      	movs	r2, #0
 800abac:	4630      	mov	r0, r6
 800abae:	4639      	mov	r1, r7
 800abb0:	f7f5 fd42 	bl	8000638 <__aeabi_dmul>
 800abb4:	f7f5 fff0 	bl	8000b98 <__aeabi_d2iz>
 800abb8:	4680      	mov	r8, r0
 800abba:	f7f5 fcd3 	bl	8000564 <__aeabi_i2d>
 800abbe:	4b97      	ldr	r3, [pc, #604]	; (800ae1c <__kernel_rem_pio2+0x694>)
 800abc0:	2200      	movs	r2, #0
 800abc2:	f7f5 fd39 	bl	8000638 <__aeabi_dmul>
 800abc6:	460b      	mov	r3, r1
 800abc8:	4602      	mov	r2, r0
 800abca:	4639      	mov	r1, r7
 800abcc:	4630      	mov	r0, r6
 800abce:	f7f5 fb7b 	bl	80002c8 <__aeabi_dsub>
 800abd2:	f7f5 ffe1 	bl	8000b98 <__aeabi_d2iz>
 800abd6:	1c65      	adds	r5, r4, #1
 800abd8:	ab0e      	add	r3, sp, #56	; 0x38
 800abda:	f10a 0a18 	add.w	sl, sl, #24
 800abde:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800abe2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800abe6:	e720      	b.n	800aa2a <__kernel_rem_pio2+0x2a2>
 800abe8:	4630      	mov	r0, r6
 800abea:	4639      	mov	r1, r7
 800abec:	f7f5 ffd4 	bl	8000b98 <__aeabi_d2iz>
 800abf0:	ab0e      	add	r3, sp, #56	; 0x38
 800abf2:	4625      	mov	r5, r4
 800abf4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800abf8:	e717      	b.n	800aa2a <__kernel_rem_pio2+0x2a2>
 800abfa:	ab0e      	add	r3, sp, #56	; 0x38
 800abfc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ac00:	f7f5 fcb0 	bl	8000564 <__aeabi_i2d>
 800ac04:	4632      	mov	r2, r6
 800ac06:	463b      	mov	r3, r7
 800ac08:	f7f5 fd16 	bl	8000638 <__aeabi_dmul>
 800ac0c:	4b84      	ldr	r3, [pc, #528]	; (800ae20 <__kernel_rem_pio2+0x698>)
 800ac0e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ac12:	2200      	movs	r2, #0
 800ac14:	4630      	mov	r0, r6
 800ac16:	4639      	mov	r1, r7
 800ac18:	f7f5 fd0e 	bl	8000638 <__aeabi_dmul>
 800ac1c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac20:	4606      	mov	r6, r0
 800ac22:	460f      	mov	r7, r1
 800ac24:	e70f      	b.n	800aa46 <__kernel_rem_pio2+0x2be>
 800ac26:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ac2a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ac2e:	f7f5 fd03 	bl	8000638 <__aeabi_dmul>
 800ac32:	4602      	mov	r2, r0
 800ac34:	460b      	mov	r3, r1
 800ac36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac3a:	f7f5 fb47 	bl	80002cc <__adddf3>
 800ac3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ac42:	f108 0801 	add.w	r8, r8, #1
 800ac46:	9b02      	ldr	r3, [sp, #8]
 800ac48:	4598      	cmp	r8, r3
 800ac4a:	dc01      	bgt.n	800ac50 <__kernel_rem_pio2+0x4c8>
 800ac4c:	45b8      	cmp	r8, r7
 800ac4e:	ddea      	ble.n	800ac26 <__kernel_rem_pio2+0x49e>
 800ac50:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ac54:	ab4a      	add	r3, sp, #296	; 0x128
 800ac56:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ac5a:	ed87 7b00 	vstr	d7, [r7]
 800ac5e:	3e01      	subs	r6, #1
 800ac60:	e6f8      	b.n	800aa54 <__kernel_rem_pio2+0x2cc>
 800ac62:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ac64:	2b02      	cmp	r3, #2
 800ac66:	dc0b      	bgt.n	800ac80 <__kernel_rem_pio2+0x4f8>
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	dc35      	bgt.n	800acd8 <__kernel_rem_pio2+0x550>
 800ac6c:	d059      	beq.n	800ad22 <__kernel_rem_pio2+0x59a>
 800ac6e:	9b04      	ldr	r3, [sp, #16]
 800ac70:	f003 0007 	and.w	r0, r3, #7
 800ac74:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ac78:	ecbd 8b02 	vpop	{d8}
 800ac7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac80:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	d1f3      	bne.n	800ac6e <__kernel_rem_pio2+0x4e6>
 800ac86:	ab4a      	add	r3, sp, #296	; 0x128
 800ac88:	4423      	add	r3, r4
 800ac8a:	9306      	str	r3, [sp, #24]
 800ac8c:	461c      	mov	r4, r3
 800ac8e:	469a      	mov	sl, r3
 800ac90:	9502      	str	r5, [sp, #8]
 800ac92:	9b02      	ldr	r3, [sp, #8]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f1aa 0a08 	sub.w	sl, sl, #8
 800ac9a:	dc6b      	bgt.n	800ad74 <__kernel_rem_pio2+0x5ec>
 800ac9c:	46aa      	mov	sl, r5
 800ac9e:	f1ba 0f01 	cmp.w	sl, #1
 800aca2:	f1a4 0408 	sub.w	r4, r4, #8
 800aca6:	f300 8085 	bgt.w	800adb4 <__kernel_rem_pio2+0x62c>
 800acaa:	9c06      	ldr	r4, [sp, #24]
 800acac:	2000      	movs	r0, #0
 800acae:	3408      	adds	r4, #8
 800acb0:	2100      	movs	r1, #0
 800acb2:	2d01      	cmp	r5, #1
 800acb4:	f300 809d 	bgt.w	800adf2 <__kernel_rem_pio2+0x66a>
 800acb8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800acbc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800acc0:	f1bb 0f00 	cmp.w	fp, #0
 800acc4:	f040 809b 	bne.w	800adfe <__kernel_rem_pio2+0x676>
 800acc8:	9b01      	ldr	r3, [sp, #4]
 800acca:	e9c3 5600 	strd	r5, r6, [r3]
 800acce:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800acd2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800acd6:	e7ca      	b.n	800ac6e <__kernel_rem_pio2+0x4e6>
 800acd8:	3408      	adds	r4, #8
 800acda:	ab4a      	add	r3, sp, #296	; 0x128
 800acdc:	441c      	add	r4, r3
 800acde:	462e      	mov	r6, r5
 800ace0:	2000      	movs	r0, #0
 800ace2:	2100      	movs	r1, #0
 800ace4:	2e00      	cmp	r6, #0
 800ace6:	da36      	bge.n	800ad56 <__kernel_rem_pio2+0x5ce>
 800ace8:	f1bb 0f00 	cmp.w	fp, #0
 800acec:	d039      	beq.n	800ad62 <__kernel_rem_pio2+0x5da>
 800acee:	4602      	mov	r2, r0
 800acf0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acf4:	9c01      	ldr	r4, [sp, #4]
 800acf6:	e9c4 2300 	strd	r2, r3, [r4]
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ad02:	f7f5 fae1 	bl	80002c8 <__aeabi_dsub>
 800ad06:	ae4c      	add	r6, sp, #304	; 0x130
 800ad08:	2401      	movs	r4, #1
 800ad0a:	42a5      	cmp	r5, r4
 800ad0c:	da2c      	bge.n	800ad68 <__kernel_rem_pio2+0x5e0>
 800ad0e:	f1bb 0f00 	cmp.w	fp, #0
 800ad12:	d002      	beq.n	800ad1a <__kernel_rem_pio2+0x592>
 800ad14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad18:	4619      	mov	r1, r3
 800ad1a:	9b01      	ldr	r3, [sp, #4]
 800ad1c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ad20:	e7a5      	b.n	800ac6e <__kernel_rem_pio2+0x4e6>
 800ad22:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ad26:	eb0d 0403 	add.w	r4, sp, r3
 800ad2a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ad2e:	2000      	movs	r0, #0
 800ad30:	2100      	movs	r1, #0
 800ad32:	2d00      	cmp	r5, #0
 800ad34:	da09      	bge.n	800ad4a <__kernel_rem_pio2+0x5c2>
 800ad36:	f1bb 0f00 	cmp.w	fp, #0
 800ad3a:	d002      	beq.n	800ad42 <__kernel_rem_pio2+0x5ba>
 800ad3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad40:	4619      	mov	r1, r3
 800ad42:	9b01      	ldr	r3, [sp, #4]
 800ad44:	e9c3 0100 	strd	r0, r1, [r3]
 800ad48:	e791      	b.n	800ac6e <__kernel_rem_pio2+0x4e6>
 800ad4a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ad4e:	f7f5 fabd 	bl	80002cc <__adddf3>
 800ad52:	3d01      	subs	r5, #1
 800ad54:	e7ed      	b.n	800ad32 <__kernel_rem_pio2+0x5aa>
 800ad56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ad5a:	f7f5 fab7 	bl	80002cc <__adddf3>
 800ad5e:	3e01      	subs	r6, #1
 800ad60:	e7c0      	b.n	800ace4 <__kernel_rem_pio2+0x55c>
 800ad62:	4602      	mov	r2, r0
 800ad64:	460b      	mov	r3, r1
 800ad66:	e7c5      	b.n	800acf4 <__kernel_rem_pio2+0x56c>
 800ad68:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ad6c:	f7f5 faae 	bl	80002cc <__adddf3>
 800ad70:	3401      	adds	r4, #1
 800ad72:	e7ca      	b.n	800ad0a <__kernel_rem_pio2+0x582>
 800ad74:	e9da 8900 	ldrd	r8, r9, [sl]
 800ad78:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800ad7c:	9b02      	ldr	r3, [sp, #8]
 800ad7e:	3b01      	subs	r3, #1
 800ad80:	9302      	str	r3, [sp, #8]
 800ad82:	4632      	mov	r2, r6
 800ad84:	463b      	mov	r3, r7
 800ad86:	4640      	mov	r0, r8
 800ad88:	4649      	mov	r1, r9
 800ad8a:	f7f5 fa9f 	bl	80002cc <__adddf3>
 800ad8e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad92:	4602      	mov	r2, r0
 800ad94:	460b      	mov	r3, r1
 800ad96:	4640      	mov	r0, r8
 800ad98:	4649      	mov	r1, r9
 800ad9a:	f7f5 fa95 	bl	80002c8 <__aeabi_dsub>
 800ad9e:	4632      	mov	r2, r6
 800ada0:	463b      	mov	r3, r7
 800ada2:	f7f5 fa93 	bl	80002cc <__adddf3>
 800ada6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800adaa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800adae:	ed8a 7b00 	vstr	d7, [sl]
 800adb2:	e76e      	b.n	800ac92 <__kernel_rem_pio2+0x50a>
 800adb4:	e9d4 8900 	ldrd	r8, r9, [r4]
 800adb8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800adbc:	4640      	mov	r0, r8
 800adbe:	4632      	mov	r2, r6
 800adc0:	463b      	mov	r3, r7
 800adc2:	4649      	mov	r1, r9
 800adc4:	f7f5 fa82 	bl	80002cc <__adddf3>
 800adc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adcc:	4602      	mov	r2, r0
 800adce:	460b      	mov	r3, r1
 800add0:	4640      	mov	r0, r8
 800add2:	4649      	mov	r1, r9
 800add4:	f7f5 fa78 	bl	80002c8 <__aeabi_dsub>
 800add8:	4632      	mov	r2, r6
 800adda:	463b      	mov	r3, r7
 800addc:	f7f5 fa76 	bl	80002cc <__adddf3>
 800ade0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ade4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ade8:	ed84 7b00 	vstr	d7, [r4]
 800adec:	f10a 3aff 	add.w	sl, sl, #4294967295
 800adf0:	e755      	b.n	800ac9e <__kernel_rem_pio2+0x516>
 800adf2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800adf6:	f7f5 fa69 	bl	80002cc <__adddf3>
 800adfa:	3d01      	subs	r5, #1
 800adfc:	e759      	b.n	800acb2 <__kernel_rem_pio2+0x52a>
 800adfe:	9b01      	ldr	r3, [sp, #4]
 800ae00:	9a01      	ldr	r2, [sp, #4]
 800ae02:	601d      	str	r5, [r3, #0]
 800ae04:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ae08:	605c      	str	r4, [r3, #4]
 800ae0a:	609f      	str	r7, [r3, #8]
 800ae0c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ae10:	60d3      	str	r3, [r2, #12]
 800ae12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae16:	6110      	str	r0, [r2, #16]
 800ae18:	6153      	str	r3, [r2, #20]
 800ae1a:	e728      	b.n	800ac6e <__kernel_rem_pio2+0x4e6>
 800ae1c:	41700000 	.word	0x41700000
 800ae20:	3e700000 	.word	0x3e700000
 800ae24:	00000000 	.word	0x00000000

0800ae28 <__kernel_tan>:
 800ae28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae2c:	ed2d 8b06 	vpush	{d8-d10}
 800ae30:	ec5b ab10 	vmov	sl, fp, d0
 800ae34:	4be0      	ldr	r3, [pc, #896]	; (800b1b8 <__kernel_tan+0x390>)
 800ae36:	b083      	sub	sp, #12
 800ae38:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
 800ae3c:	429f      	cmp	r7, r3
 800ae3e:	ec59 8b11 	vmov	r8, r9, d1
 800ae42:	4606      	mov	r6, r0
 800ae44:	f8cd b000 	str.w	fp, [sp]
 800ae48:	dc61      	bgt.n	800af0e <__kernel_tan+0xe6>
 800ae4a:	ee10 0a10 	vmov	r0, s0
 800ae4e:	4659      	mov	r1, fp
 800ae50:	f7f5 fea2 	bl	8000b98 <__aeabi_d2iz>
 800ae54:	4605      	mov	r5, r0
 800ae56:	2800      	cmp	r0, #0
 800ae58:	f040 8083 	bne.w	800af62 <__kernel_tan+0x13a>
 800ae5c:	1c73      	adds	r3, r6, #1
 800ae5e:	4652      	mov	r2, sl
 800ae60:	4313      	orrs	r3, r2
 800ae62:	433b      	orrs	r3, r7
 800ae64:	d112      	bne.n	800ae8c <__kernel_tan+0x64>
 800ae66:	ec4b ab10 	vmov	d0, sl, fp
 800ae6a:	f7ff fa41 	bl	800a2f0 <fabs>
 800ae6e:	49d3      	ldr	r1, [pc, #844]	; (800b1bc <__kernel_tan+0x394>)
 800ae70:	ec53 2b10 	vmov	r2, r3, d0
 800ae74:	2000      	movs	r0, #0
 800ae76:	f7f5 fd09 	bl	800088c <__aeabi_ddiv>
 800ae7a:	4682      	mov	sl, r0
 800ae7c:	468b      	mov	fp, r1
 800ae7e:	ec4b ab10 	vmov	d0, sl, fp
 800ae82:	b003      	add	sp, #12
 800ae84:	ecbd 8b06 	vpop	{d8-d10}
 800ae88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8c:	2e01      	cmp	r6, #1
 800ae8e:	d0f6      	beq.n	800ae7e <__kernel_tan+0x56>
 800ae90:	4642      	mov	r2, r8
 800ae92:	464b      	mov	r3, r9
 800ae94:	4650      	mov	r0, sl
 800ae96:	4659      	mov	r1, fp
 800ae98:	f7f5 fa18 	bl	80002cc <__adddf3>
 800ae9c:	4602      	mov	r2, r0
 800ae9e:	460b      	mov	r3, r1
 800aea0:	460f      	mov	r7, r1
 800aea2:	2000      	movs	r0, #0
 800aea4:	49c6      	ldr	r1, [pc, #792]	; (800b1c0 <__kernel_tan+0x398>)
 800aea6:	f7f5 fcf1 	bl	800088c <__aeabi_ddiv>
 800aeaa:	e9cd 0100 	strd	r0, r1, [sp]
 800aeae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aeb2:	462e      	mov	r6, r5
 800aeb4:	4652      	mov	r2, sl
 800aeb6:	462c      	mov	r4, r5
 800aeb8:	4630      	mov	r0, r6
 800aeba:	461d      	mov	r5, r3
 800aebc:	4639      	mov	r1, r7
 800aebe:	465b      	mov	r3, fp
 800aec0:	f7f5 fa02 	bl	80002c8 <__aeabi_dsub>
 800aec4:	4602      	mov	r2, r0
 800aec6:	460b      	mov	r3, r1
 800aec8:	4640      	mov	r0, r8
 800aeca:	4649      	mov	r1, r9
 800aecc:	f7f5 f9fc 	bl	80002c8 <__aeabi_dsub>
 800aed0:	4632      	mov	r2, r6
 800aed2:	462b      	mov	r3, r5
 800aed4:	f7f5 fbb0 	bl	8000638 <__aeabi_dmul>
 800aed8:	4632      	mov	r2, r6
 800aeda:	4680      	mov	r8, r0
 800aedc:	4689      	mov	r9, r1
 800aede:	462b      	mov	r3, r5
 800aee0:	4630      	mov	r0, r6
 800aee2:	4639      	mov	r1, r7
 800aee4:	f7f5 fba8 	bl	8000638 <__aeabi_dmul>
 800aee8:	4bb4      	ldr	r3, [pc, #720]	; (800b1bc <__kernel_tan+0x394>)
 800aeea:	2200      	movs	r2, #0
 800aeec:	f7f5 f9ee 	bl	80002cc <__adddf3>
 800aef0:	4602      	mov	r2, r0
 800aef2:	460b      	mov	r3, r1
 800aef4:	4640      	mov	r0, r8
 800aef6:	4649      	mov	r1, r9
 800aef8:	f7f5 f9e8 	bl	80002cc <__adddf3>
 800aefc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af00:	f7f5 fb9a 	bl	8000638 <__aeabi_dmul>
 800af04:	4622      	mov	r2, r4
 800af06:	462b      	mov	r3, r5
 800af08:	f7f5 f9e0 	bl	80002cc <__adddf3>
 800af0c:	e7b5      	b.n	800ae7a <__kernel_tan+0x52>
 800af0e:	4bad      	ldr	r3, [pc, #692]	; (800b1c4 <__kernel_tan+0x39c>)
 800af10:	429f      	cmp	r7, r3
 800af12:	dd26      	ble.n	800af62 <__kernel_tan+0x13a>
 800af14:	9b00      	ldr	r3, [sp, #0]
 800af16:	2b00      	cmp	r3, #0
 800af18:	da09      	bge.n	800af2e <__kernel_tan+0x106>
 800af1a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800af1e:	469b      	mov	fp, r3
 800af20:	ee10 aa10 	vmov	sl, s0
 800af24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800af28:	ee11 8a10 	vmov	r8, s2
 800af2c:	4699      	mov	r9, r3
 800af2e:	4652      	mov	r2, sl
 800af30:	465b      	mov	r3, fp
 800af32:	a183      	add	r1, pc, #524	; (adr r1, 800b140 <__kernel_tan+0x318>)
 800af34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af38:	f7f5 f9c6 	bl	80002c8 <__aeabi_dsub>
 800af3c:	4642      	mov	r2, r8
 800af3e:	464b      	mov	r3, r9
 800af40:	4604      	mov	r4, r0
 800af42:	460d      	mov	r5, r1
 800af44:	a180      	add	r1, pc, #512	; (adr r1, 800b148 <__kernel_tan+0x320>)
 800af46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af4a:	f7f5 f9bd 	bl	80002c8 <__aeabi_dsub>
 800af4e:	4622      	mov	r2, r4
 800af50:	462b      	mov	r3, r5
 800af52:	f7f5 f9bb 	bl	80002cc <__adddf3>
 800af56:	f04f 0800 	mov.w	r8, #0
 800af5a:	4682      	mov	sl, r0
 800af5c:	468b      	mov	fp, r1
 800af5e:	f04f 0900 	mov.w	r9, #0
 800af62:	4652      	mov	r2, sl
 800af64:	465b      	mov	r3, fp
 800af66:	4650      	mov	r0, sl
 800af68:	4659      	mov	r1, fp
 800af6a:	f7f5 fb65 	bl	8000638 <__aeabi_dmul>
 800af6e:	4602      	mov	r2, r0
 800af70:	460b      	mov	r3, r1
 800af72:	ec43 2b18 	vmov	d8, r2, r3
 800af76:	f7f5 fb5f 	bl	8000638 <__aeabi_dmul>
 800af7a:	ec53 2b18 	vmov	r2, r3, d8
 800af7e:	4604      	mov	r4, r0
 800af80:	460d      	mov	r5, r1
 800af82:	4650      	mov	r0, sl
 800af84:	4659      	mov	r1, fp
 800af86:	f7f5 fb57 	bl	8000638 <__aeabi_dmul>
 800af8a:	a371      	add	r3, pc, #452	; (adr r3, 800b150 <__kernel_tan+0x328>)
 800af8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af90:	ec41 0b19 	vmov	d9, r0, r1
 800af94:	4620      	mov	r0, r4
 800af96:	4629      	mov	r1, r5
 800af98:	f7f5 fb4e 	bl	8000638 <__aeabi_dmul>
 800af9c:	a36e      	add	r3, pc, #440	; (adr r3, 800b158 <__kernel_tan+0x330>)
 800af9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa2:	f7f5 f993 	bl	80002cc <__adddf3>
 800afa6:	4622      	mov	r2, r4
 800afa8:	462b      	mov	r3, r5
 800afaa:	f7f5 fb45 	bl	8000638 <__aeabi_dmul>
 800afae:	a36c      	add	r3, pc, #432	; (adr r3, 800b160 <__kernel_tan+0x338>)
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f7f5 f98a 	bl	80002cc <__adddf3>
 800afb8:	4622      	mov	r2, r4
 800afba:	462b      	mov	r3, r5
 800afbc:	f7f5 fb3c 	bl	8000638 <__aeabi_dmul>
 800afc0:	a369      	add	r3, pc, #420	; (adr r3, 800b168 <__kernel_tan+0x340>)
 800afc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc6:	f7f5 f981 	bl	80002cc <__adddf3>
 800afca:	4622      	mov	r2, r4
 800afcc:	462b      	mov	r3, r5
 800afce:	f7f5 fb33 	bl	8000638 <__aeabi_dmul>
 800afd2:	a367      	add	r3, pc, #412	; (adr r3, 800b170 <__kernel_tan+0x348>)
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	f7f5 f978 	bl	80002cc <__adddf3>
 800afdc:	4622      	mov	r2, r4
 800afde:	462b      	mov	r3, r5
 800afe0:	f7f5 fb2a 	bl	8000638 <__aeabi_dmul>
 800afe4:	a364      	add	r3, pc, #400	; (adr r3, 800b178 <__kernel_tan+0x350>)
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	f7f5 f96f 	bl	80002cc <__adddf3>
 800afee:	ec53 2b18 	vmov	r2, r3, d8
 800aff2:	f7f5 fb21 	bl	8000638 <__aeabi_dmul>
 800aff6:	a362      	add	r3, pc, #392	; (adr r3, 800b180 <__kernel_tan+0x358>)
 800aff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800affc:	ec41 0b1a 	vmov	d10, r0, r1
 800b000:	4620      	mov	r0, r4
 800b002:	4629      	mov	r1, r5
 800b004:	f7f5 fb18 	bl	8000638 <__aeabi_dmul>
 800b008:	a35f      	add	r3, pc, #380	; (adr r3, 800b188 <__kernel_tan+0x360>)
 800b00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00e:	f7f5 f95d 	bl	80002cc <__adddf3>
 800b012:	4622      	mov	r2, r4
 800b014:	462b      	mov	r3, r5
 800b016:	f7f5 fb0f 	bl	8000638 <__aeabi_dmul>
 800b01a:	a35d      	add	r3, pc, #372	; (adr r3, 800b190 <__kernel_tan+0x368>)
 800b01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b020:	f7f5 f954 	bl	80002cc <__adddf3>
 800b024:	4622      	mov	r2, r4
 800b026:	462b      	mov	r3, r5
 800b028:	f7f5 fb06 	bl	8000638 <__aeabi_dmul>
 800b02c:	a35a      	add	r3, pc, #360	; (adr r3, 800b198 <__kernel_tan+0x370>)
 800b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b032:	f7f5 f94b 	bl	80002cc <__adddf3>
 800b036:	4622      	mov	r2, r4
 800b038:	462b      	mov	r3, r5
 800b03a:	f7f5 fafd 	bl	8000638 <__aeabi_dmul>
 800b03e:	a358      	add	r3, pc, #352	; (adr r3, 800b1a0 <__kernel_tan+0x378>)
 800b040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b044:	f7f5 f942 	bl	80002cc <__adddf3>
 800b048:	4622      	mov	r2, r4
 800b04a:	462b      	mov	r3, r5
 800b04c:	f7f5 faf4 	bl	8000638 <__aeabi_dmul>
 800b050:	a355      	add	r3, pc, #340	; (adr r3, 800b1a8 <__kernel_tan+0x380>)
 800b052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b056:	f7f5 f939 	bl	80002cc <__adddf3>
 800b05a:	4602      	mov	r2, r0
 800b05c:	460b      	mov	r3, r1
 800b05e:	ec51 0b1a 	vmov	r0, r1, d10
 800b062:	f7f5 f933 	bl	80002cc <__adddf3>
 800b066:	ec53 2b19 	vmov	r2, r3, d9
 800b06a:	f7f5 fae5 	bl	8000638 <__aeabi_dmul>
 800b06e:	4642      	mov	r2, r8
 800b070:	464b      	mov	r3, r9
 800b072:	f7f5 f92b 	bl	80002cc <__adddf3>
 800b076:	ec53 2b18 	vmov	r2, r3, d8
 800b07a:	f7f5 fadd 	bl	8000638 <__aeabi_dmul>
 800b07e:	4642      	mov	r2, r8
 800b080:	464b      	mov	r3, r9
 800b082:	f7f5 f923 	bl	80002cc <__adddf3>
 800b086:	a34a      	add	r3, pc, #296	; (adr r3, 800b1b0 <__kernel_tan+0x388>)
 800b088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b08c:	4604      	mov	r4, r0
 800b08e:	460d      	mov	r5, r1
 800b090:	ec51 0b19 	vmov	r0, r1, d9
 800b094:	f7f5 fad0 	bl	8000638 <__aeabi_dmul>
 800b098:	4622      	mov	r2, r4
 800b09a:	462b      	mov	r3, r5
 800b09c:	f7f5 f916 	bl	80002cc <__adddf3>
 800b0a0:	460b      	mov	r3, r1
 800b0a2:	ec41 0b18 	vmov	d8, r0, r1
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	4659      	mov	r1, fp
 800b0aa:	4650      	mov	r0, sl
 800b0ac:	f7f5 f90e 	bl	80002cc <__adddf3>
 800b0b0:	4b44      	ldr	r3, [pc, #272]	; (800b1c4 <__kernel_tan+0x39c>)
 800b0b2:	429f      	cmp	r7, r3
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	460d      	mov	r5, r1
 800b0b8:	f340 8086 	ble.w	800b1c8 <__kernel_tan+0x3a0>
 800b0bc:	4630      	mov	r0, r6
 800b0be:	f7f5 fa51 	bl	8000564 <__aeabi_i2d>
 800b0c2:	4622      	mov	r2, r4
 800b0c4:	4680      	mov	r8, r0
 800b0c6:	4689      	mov	r9, r1
 800b0c8:	462b      	mov	r3, r5
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	f7f5 fab3 	bl	8000638 <__aeabi_dmul>
 800b0d2:	4642      	mov	r2, r8
 800b0d4:	4606      	mov	r6, r0
 800b0d6:	460f      	mov	r7, r1
 800b0d8:	464b      	mov	r3, r9
 800b0da:	4620      	mov	r0, r4
 800b0dc:	4629      	mov	r1, r5
 800b0de:	f7f5 f8f5 	bl	80002cc <__adddf3>
 800b0e2:	4602      	mov	r2, r0
 800b0e4:	460b      	mov	r3, r1
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	4639      	mov	r1, r7
 800b0ea:	f7f5 fbcf 	bl	800088c <__aeabi_ddiv>
 800b0ee:	ec53 2b18 	vmov	r2, r3, d8
 800b0f2:	f7f5 f8e9 	bl	80002c8 <__aeabi_dsub>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	460b      	mov	r3, r1
 800b0fa:	4650      	mov	r0, sl
 800b0fc:	4659      	mov	r1, fp
 800b0fe:	f7f5 f8e3 	bl	80002c8 <__aeabi_dsub>
 800b102:	4602      	mov	r2, r0
 800b104:	460b      	mov	r3, r1
 800b106:	f7f5 f8e1 	bl	80002cc <__adddf3>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	4640      	mov	r0, r8
 800b110:	4649      	mov	r1, r9
 800b112:	f7f5 f8d9 	bl	80002c8 <__aeabi_dsub>
 800b116:	9b00      	ldr	r3, [sp, #0]
 800b118:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800b11c:	f00a 0a02 	and.w	sl, sl, #2
 800b120:	4604      	mov	r4, r0
 800b122:	f1ca 0001 	rsb	r0, sl, #1
 800b126:	460d      	mov	r5, r1
 800b128:	f7f5 fa1c 	bl	8000564 <__aeabi_i2d>
 800b12c:	4602      	mov	r2, r0
 800b12e:	460b      	mov	r3, r1
 800b130:	4620      	mov	r0, r4
 800b132:	4629      	mov	r1, r5
 800b134:	f7f5 fa80 	bl	8000638 <__aeabi_dmul>
 800b138:	e69f      	b.n	800ae7a <__kernel_tan+0x52>
 800b13a:	bf00      	nop
 800b13c:	f3af 8000 	nop.w
 800b140:	54442d18 	.word	0x54442d18
 800b144:	3fe921fb 	.word	0x3fe921fb
 800b148:	33145c07 	.word	0x33145c07
 800b14c:	3c81a626 	.word	0x3c81a626
 800b150:	74bf7ad4 	.word	0x74bf7ad4
 800b154:	3efb2a70 	.word	0x3efb2a70
 800b158:	32f0a7e9 	.word	0x32f0a7e9
 800b15c:	3f12b80f 	.word	0x3f12b80f
 800b160:	1a8d1068 	.word	0x1a8d1068
 800b164:	3f3026f7 	.word	0x3f3026f7
 800b168:	fee08315 	.word	0xfee08315
 800b16c:	3f57dbc8 	.word	0x3f57dbc8
 800b170:	e96e8493 	.word	0xe96e8493
 800b174:	3f8226e3 	.word	0x3f8226e3
 800b178:	1bb341fe 	.word	0x1bb341fe
 800b17c:	3faba1ba 	.word	0x3faba1ba
 800b180:	db605373 	.word	0xdb605373
 800b184:	bef375cb 	.word	0xbef375cb
 800b188:	a03792a6 	.word	0xa03792a6
 800b18c:	3f147e88 	.word	0x3f147e88
 800b190:	f2f26501 	.word	0xf2f26501
 800b194:	3f4344d8 	.word	0x3f4344d8
 800b198:	c9560328 	.word	0xc9560328
 800b19c:	3f6d6d22 	.word	0x3f6d6d22
 800b1a0:	8406d637 	.word	0x8406d637
 800b1a4:	3f9664f4 	.word	0x3f9664f4
 800b1a8:	1110fe7a 	.word	0x1110fe7a
 800b1ac:	3fc11111 	.word	0x3fc11111
 800b1b0:	55555563 	.word	0x55555563
 800b1b4:	3fd55555 	.word	0x3fd55555
 800b1b8:	3e2fffff 	.word	0x3e2fffff
 800b1bc:	3ff00000 	.word	0x3ff00000
 800b1c0:	bff00000 	.word	0xbff00000
 800b1c4:	3fe59427 	.word	0x3fe59427
 800b1c8:	2e01      	cmp	r6, #1
 800b1ca:	d02f      	beq.n	800b22c <__kernel_tan+0x404>
 800b1cc:	460f      	mov	r7, r1
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4689      	mov	r9, r1
 800b1d4:	2000      	movs	r0, #0
 800b1d6:	4917      	ldr	r1, [pc, #92]	; (800b234 <__kernel_tan+0x40c>)
 800b1d8:	f7f5 fb58 	bl	800088c <__aeabi_ddiv>
 800b1dc:	2600      	movs	r6, #0
 800b1de:	e9cd 0100 	strd	r0, r1, [sp]
 800b1e2:	4652      	mov	r2, sl
 800b1e4:	465b      	mov	r3, fp
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	4639      	mov	r1, r7
 800b1ea:	f7f5 f86d 	bl	80002c8 <__aeabi_dsub>
 800b1ee:	e9dd 4500 	ldrd	r4, r5, [sp]
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	ec51 0b18 	vmov	r0, r1, d8
 800b1fa:	f7f5 f865 	bl	80002c8 <__aeabi_dsub>
 800b1fe:	4632      	mov	r2, r6
 800b200:	462b      	mov	r3, r5
 800b202:	f7f5 fa19 	bl	8000638 <__aeabi_dmul>
 800b206:	46b0      	mov	r8, r6
 800b208:	460f      	mov	r7, r1
 800b20a:	4642      	mov	r2, r8
 800b20c:	462b      	mov	r3, r5
 800b20e:	4634      	mov	r4, r6
 800b210:	4649      	mov	r1, r9
 800b212:	4606      	mov	r6, r0
 800b214:	4640      	mov	r0, r8
 800b216:	f7f5 fa0f 	bl	8000638 <__aeabi_dmul>
 800b21a:	4b07      	ldr	r3, [pc, #28]	; (800b238 <__kernel_tan+0x410>)
 800b21c:	2200      	movs	r2, #0
 800b21e:	f7f5 f855 	bl	80002cc <__adddf3>
 800b222:	4602      	mov	r2, r0
 800b224:	460b      	mov	r3, r1
 800b226:	4630      	mov	r0, r6
 800b228:	4639      	mov	r1, r7
 800b22a:	e665      	b.n	800aef8 <__kernel_tan+0xd0>
 800b22c:	4682      	mov	sl, r0
 800b22e:	468b      	mov	fp, r1
 800b230:	e625      	b.n	800ae7e <__kernel_tan+0x56>
 800b232:	bf00      	nop
 800b234:	bff00000 	.word	0xbff00000
 800b238:	3ff00000 	.word	0x3ff00000
 800b23c:	00000000 	.word	0x00000000

0800b240 <floor>:
 800b240:	ec51 0b10 	vmov	r0, r1, d0
 800b244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b248:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b24c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b250:	2e13      	cmp	r6, #19
 800b252:	ee10 5a10 	vmov	r5, s0
 800b256:	ee10 8a10 	vmov	r8, s0
 800b25a:	460c      	mov	r4, r1
 800b25c:	dc32      	bgt.n	800b2c4 <floor+0x84>
 800b25e:	2e00      	cmp	r6, #0
 800b260:	da14      	bge.n	800b28c <floor+0x4c>
 800b262:	a333      	add	r3, pc, #204	; (adr r3, 800b330 <floor+0xf0>)
 800b264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b268:	f7f5 f830 	bl	80002cc <__adddf3>
 800b26c:	2200      	movs	r2, #0
 800b26e:	2300      	movs	r3, #0
 800b270:	f7f5 fc72 	bl	8000b58 <__aeabi_dcmpgt>
 800b274:	b138      	cbz	r0, 800b286 <floor+0x46>
 800b276:	2c00      	cmp	r4, #0
 800b278:	da57      	bge.n	800b32a <floor+0xea>
 800b27a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b27e:	431d      	orrs	r5, r3
 800b280:	d001      	beq.n	800b286 <floor+0x46>
 800b282:	4c2d      	ldr	r4, [pc, #180]	; (800b338 <floor+0xf8>)
 800b284:	2500      	movs	r5, #0
 800b286:	4621      	mov	r1, r4
 800b288:	4628      	mov	r0, r5
 800b28a:	e025      	b.n	800b2d8 <floor+0x98>
 800b28c:	4f2b      	ldr	r7, [pc, #172]	; (800b33c <floor+0xfc>)
 800b28e:	4137      	asrs	r7, r6
 800b290:	ea01 0307 	and.w	r3, r1, r7
 800b294:	4303      	orrs	r3, r0
 800b296:	d01f      	beq.n	800b2d8 <floor+0x98>
 800b298:	a325      	add	r3, pc, #148	; (adr r3, 800b330 <floor+0xf0>)
 800b29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b29e:	f7f5 f815 	bl	80002cc <__adddf3>
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	f7f5 fc57 	bl	8000b58 <__aeabi_dcmpgt>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d0eb      	beq.n	800b286 <floor+0x46>
 800b2ae:	2c00      	cmp	r4, #0
 800b2b0:	bfbe      	ittt	lt
 800b2b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b2b6:	fa43 f606 	asrlt.w	r6, r3, r6
 800b2ba:	19a4      	addlt	r4, r4, r6
 800b2bc:	ea24 0407 	bic.w	r4, r4, r7
 800b2c0:	2500      	movs	r5, #0
 800b2c2:	e7e0      	b.n	800b286 <floor+0x46>
 800b2c4:	2e33      	cmp	r6, #51	; 0x33
 800b2c6:	dd0b      	ble.n	800b2e0 <floor+0xa0>
 800b2c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b2cc:	d104      	bne.n	800b2d8 <floor+0x98>
 800b2ce:	ee10 2a10 	vmov	r2, s0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	f7f4 fffa 	bl	80002cc <__adddf3>
 800b2d8:	ec41 0b10 	vmov	d0, r0, r1
 800b2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b2e4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2e8:	fa23 f707 	lsr.w	r7, r3, r7
 800b2ec:	4207      	tst	r7, r0
 800b2ee:	d0f3      	beq.n	800b2d8 <floor+0x98>
 800b2f0:	a30f      	add	r3, pc, #60	; (adr r3, 800b330 <floor+0xf0>)
 800b2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2f6:	f7f4 ffe9 	bl	80002cc <__adddf3>
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	f7f5 fc2b 	bl	8000b58 <__aeabi_dcmpgt>
 800b302:	2800      	cmp	r0, #0
 800b304:	d0bf      	beq.n	800b286 <floor+0x46>
 800b306:	2c00      	cmp	r4, #0
 800b308:	da02      	bge.n	800b310 <floor+0xd0>
 800b30a:	2e14      	cmp	r6, #20
 800b30c:	d103      	bne.n	800b316 <floor+0xd6>
 800b30e:	3401      	adds	r4, #1
 800b310:	ea25 0507 	bic.w	r5, r5, r7
 800b314:	e7b7      	b.n	800b286 <floor+0x46>
 800b316:	2301      	movs	r3, #1
 800b318:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b31c:	fa03 f606 	lsl.w	r6, r3, r6
 800b320:	4435      	add	r5, r6
 800b322:	4545      	cmp	r5, r8
 800b324:	bf38      	it	cc
 800b326:	18e4      	addcc	r4, r4, r3
 800b328:	e7f2      	b.n	800b310 <floor+0xd0>
 800b32a:	2500      	movs	r5, #0
 800b32c:	462c      	mov	r4, r5
 800b32e:	e7aa      	b.n	800b286 <floor+0x46>
 800b330:	8800759c 	.word	0x8800759c
 800b334:	7e37e43c 	.word	0x7e37e43c
 800b338:	bff00000 	.word	0xbff00000
 800b33c:	000fffff 	.word	0x000fffff

0800b340 <scalbn>:
 800b340:	b570      	push	{r4, r5, r6, lr}
 800b342:	ec55 4b10 	vmov	r4, r5, d0
 800b346:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b34a:	4606      	mov	r6, r0
 800b34c:	462b      	mov	r3, r5
 800b34e:	b99a      	cbnz	r2, 800b378 <scalbn+0x38>
 800b350:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b354:	4323      	orrs	r3, r4
 800b356:	d036      	beq.n	800b3c6 <scalbn+0x86>
 800b358:	4b39      	ldr	r3, [pc, #228]	; (800b440 <scalbn+0x100>)
 800b35a:	4629      	mov	r1, r5
 800b35c:	ee10 0a10 	vmov	r0, s0
 800b360:	2200      	movs	r2, #0
 800b362:	f7f5 f969 	bl	8000638 <__aeabi_dmul>
 800b366:	4b37      	ldr	r3, [pc, #220]	; (800b444 <scalbn+0x104>)
 800b368:	429e      	cmp	r6, r3
 800b36a:	4604      	mov	r4, r0
 800b36c:	460d      	mov	r5, r1
 800b36e:	da10      	bge.n	800b392 <scalbn+0x52>
 800b370:	a32b      	add	r3, pc, #172	; (adr r3, 800b420 <scalbn+0xe0>)
 800b372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b376:	e03a      	b.n	800b3ee <scalbn+0xae>
 800b378:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b37c:	428a      	cmp	r2, r1
 800b37e:	d10c      	bne.n	800b39a <scalbn+0x5a>
 800b380:	ee10 2a10 	vmov	r2, s0
 800b384:	4620      	mov	r0, r4
 800b386:	4629      	mov	r1, r5
 800b388:	f7f4 ffa0 	bl	80002cc <__adddf3>
 800b38c:	4604      	mov	r4, r0
 800b38e:	460d      	mov	r5, r1
 800b390:	e019      	b.n	800b3c6 <scalbn+0x86>
 800b392:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b396:	460b      	mov	r3, r1
 800b398:	3a36      	subs	r2, #54	; 0x36
 800b39a:	4432      	add	r2, r6
 800b39c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b3a0:	428a      	cmp	r2, r1
 800b3a2:	dd08      	ble.n	800b3b6 <scalbn+0x76>
 800b3a4:	2d00      	cmp	r5, #0
 800b3a6:	a120      	add	r1, pc, #128	; (adr r1, 800b428 <scalbn+0xe8>)
 800b3a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3ac:	da1c      	bge.n	800b3e8 <scalbn+0xa8>
 800b3ae:	a120      	add	r1, pc, #128	; (adr r1, 800b430 <scalbn+0xf0>)
 800b3b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3b4:	e018      	b.n	800b3e8 <scalbn+0xa8>
 800b3b6:	2a00      	cmp	r2, #0
 800b3b8:	dd08      	ble.n	800b3cc <scalbn+0x8c>
 800b3ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b3be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b3c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b3c6:	ec45 4b10 	vmov	d0, r4, r5
 800b3ca:	bd70      	pop	{r4, r5, r6, pc}
 800b3cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b3d0:	da19      	bge.n	800b406 <scalbn+0xc6>
 800b3d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b3d6:	429e      	cmp	r6, r3
 800b3d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b3dc:	dd0a      	ble.n	800b3f4 <scalbn+0xb4>
 800b3de:	a112      	add	r1, pc, #72	; (adr r1, 800b428 <scalbn+0xe8>)
 800b3e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d1e2      	bne.n	800b3ae <scalbn+0x6e>
 800b3e8:	a30f      	add	r3, pc, #60	; (adr r3, 800b428 <scalbn+0xe8>)
 800b3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ee:	f7f5 f923 	bl	8000638 <__aeabi_dmul>
 800b3f2:	e7cb      	b.n	800b38c <scalbn+0x4c>
 800b3f4:	a10a      	add	r1, pc, #40	; (adr r1, 800b420 <scalbn+0xe0>)
 800b3f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d0b8      	beq.n	800b370 <scalbn+0x30>
 800b3fe:	a10e      	add	r1, pc, #56	; (adr r1, 800b438 <scalbn+0xf8>)
 800b400:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b404:	e7b4      	b.n	800b370 <scalbn+0x30>
 800b406:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b40a:	3236      	adds	r2, #54	; 0x36
 800b40c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b410:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b414:	4620      	mov	r0, r4
 800b416:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <scalbn+0x108>)
 800b418:	2200      	movs	r2, #0
 800b41a:	e7e8      	b.n	800b3ee <scalbn+0xae>
 800b41c:	f3af 8000 	nop.w
 800b420:	c2f8f359 	.word	0xc2f8f359
 800b424:	01a56e1f 	.word	0x01a56e1f
 800b428:	8800759c 	.word	0x8800759c
 800b42c:	7e37e43c 	.word	0x7e37e43c
 800b430:	8800759c 	.word	0x8800759c
 800b434:	fe37e43c 	.word	0xfe37e43c
 800b438:	c2f8f359 	.word	0xc2f8f359
 800b43c:	81a56e1f 	.word	0x81a56e1f
 800b440:	43500000 	.word	0x43500000
 800b444:	ffff3cb0 	.word	0xffff3cb0
 800b448:	3c900000 	.word	0x3c900000

0800b44c <_close>:
 800b44c:	4b02      	ldr	r3, [pc, #8]	; (800b458 <_close+0xc>)
 800b44e:	2258      	movs	r2, #88	; 0x58
 800b450:	601a      	str	r2, [r3, #0]
 800b452:	f04f 30ff 	mov.w	r0, #4294967295
 800b456:	4770      	bx	lr
 800b458:	20000778 	.word	0x20000778

0800b45c <_fstat>:
 800b45c:	4b02      	ldr	r3, [pc, #8]	; (800b468 <_fstat+0xc>)
 800b45e:	2258      	movs	r2, #88	; 0x58
 800b460:	601a      	str	r2, [r3, #0]
 800b462:	f04f 30ff 	mov.w	r0, #4294967295
 800b466:	4770      	bx	lr
 800b468:	20000778 	.word	0x20000778

0800b46c <_getpid>:
 800b46c:	4b02      	ldr	r3, [pc, #8]	; (800b478 <_getpid+0xc>)
 800b46e:	2258      	movs	r2, #88	; 0x58
 800b470:	601a      	str	r2, [r3, #0]
 800b472:	f04f 30ff 	mov.w	r0, #4294967295
 800b476:	4770      	bx	lr
 800b478:	20000778 	.word	0x20000778

0800b47c <_isatty>:
 800b47c:	4b02      	ldr	r3, [pc, #8]	; (800b488 <_isatty+0xc>)
 800b47e:	2258      	movs	r2, #88	; 0x58
 800b480:	601a      	str	r2, [r3, #0]
 800b482:	2000      	movs	r0, #0
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	20000778 	.word	0x20000778

0800b48c <_kill>:
 800b48c:	4b02      	ldr	r3, [pc, #8]	; (800b498 <_kill+0xc>)
 800b48e:	2258      	movs	r2, #88	; 0x58
 800b490:	601a      	str	r2, [r3, #0]
 800b492:	f04f 30ff 	mov.w	r0, #4294967295
 800b496:	4770      	bx	lr
 800b498:	20000778 	.word	0x20000778

0800b49c <_lseek>:
 800b49c:	4b02      	ldr	r3, [pc, #8]	; (800b4a8 <_lseek+0xc>)
 800b49e:	2258      	movs	r2, #88	; 0x58
 800b4a0:	601a      	str	r2, [r3, #0]
 800b4a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a6:	4770      	bx	lr
 800b4a8:	20000778 	.word	0x20000778

0800b4ac <_read>:
 800b4ac:	4b02      	ldr	r3, [pc, #8]	; (800b4b8 <_read+0xc>)
 800b4ae:	2258      	movs	r2, #88	; 0x58
 800b4b0:	601a      	str	r2, [r3, #0]
 800b4b2:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b6:	4770      	bx	lr
 800b4b8:	20000778 	.word	0x20000778

0800b4bc <_sbrk>:
 800b4bc:	4a04      	ldr	r2, [pc, #16]	; (800b4d0 <_sbrk+0x14>)
 800b4be:	6811      	ldr	r1, [r2, #0]
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	b909      	cbnz	r1, 800b4c8 <_sbrk+0xc>
 800b4c4:	4903      	ldr	r1, [pc, #12]	; (800b4d4 <_sbrk+0x18>)
 800b4c6:	6011      	str	r1, [r2, #0]
 800b4c8:	6810      	ldr	r0, [r2, #0]
 800b4ca:	4403      	add	r3, r0
 800b4cc:	6013      	str	r3, [r2, #0]
 800b4ce:	4770      	bx	lr
 800b4d0:	20000780 	.word	0x20000780
 800b4d4:	20000788 	.word	0x20000788

0800b4d8 <_write>:
 800b4d8:	4b02      	ldr	r3, [pc, #8]	; (800b4e4 <_write+0xc>)
 800b4da:	2258      	movs	r2, #88	; 0x58
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	f04f 30ff 	mov.w	r0, #4294967295
 800b4e2:	4770      	bx	lr
 800b4e4:	20000778 	.word	0x20000778

0800b4e8 <_exit>:
 800b4e8:	e7fe      	b.n	800b4e8 <_exit>
	...

0800b4ec <_init>:
 800b4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4ee:	bf00      	nop
 800b4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4f2:	bc08      	pop	{r3}
 800b4f4:	469e      	mov	lr, r3
 800b4f6:	4770      	bx	lr

0800b4f8 <_fini>:
 800b4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fa:	bf00      	nop
 800b4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4fe:	bc08      	pop	{r3}
 800b500:	469e      	mov	lr, r3
 800b502:	4770      	bx	lr
