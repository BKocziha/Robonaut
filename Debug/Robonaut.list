
Robonaut.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000574c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800591c  0800591c  0001591c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005978  08005978  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005978  08005978  00015978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005980  08005980  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005980  08005980  00015980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005984  08005984  00015984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005988  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000043c  20000070  080059f8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ac  080059f8  000204ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149b8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002659  00000000  00000000  00034a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  000370b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011b8  00000000  00000000  00038350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000245b9  00000000  00000000  00039508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016ee4  00000000  00000000  0005dac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e1b97  00000000  00000000  000749a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015653c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053e8  00000000  00000000  0015658c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005904 	.word	0x08005904

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005904 	.word	0x08005904

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <BT_ReceiveMsg>:
	uint32_t len = strlen((char*)msg_to_send);
	HAL_UART_Transmit(huart, (uint8_t*)msg_to_send, len, 100);
}

void BT_ReceiveMsg(UART_HandleTypeDef *huart, unsigned char *msg_to_receive) // Max üzenethossz: 10 karakter
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	HAL_UART_Receive_IT(huart, msg_to_receive, 20);
 80005ee:	2214      	movs	r2, #20
 80005f0:	6839      	ldr	r1, [r7, #0]
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f004 f98d 	bl	8004912 <HAL_UART_Receive_IT>

}
 80005f8:	bf00      	nop
 80005fa:	3708      	adds	r7, #8
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <BT_ProcessMsg>:

void BT_ProcessMsg(unsigned char *msg)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	// Throw away the excess characters
	for (int i = 0; i < 20; i++)
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e00e      	b.n	800062c <BT_ProcessMsg+0x2c>
	{
		if(msg[i] == '!')
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	4413      	add	r3, r2
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b21      	cmp	r3, #33	; 0x21
 8000618:	d105      	bne.n	8000626 <BT_ProcessMsg+0x26>
		{
			msg[i] = 0;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	687a      	ldr	r2, [r7, #4]
 800061e:	4413      	add	r3, r2
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
			break;
 8000624:	e005      	b.n	8000632 <BT_ProcessMsg+0x32>
	for (int i = 0; i < 20; i++)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	3301      	adds	r3, #1
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	2b13      	cmp	r3, #19
 8000630:	dded      	ble.n	800060e <BT_ProcessMsg+0xe>
		}
	}

	if(strcmp((char*)msg, "STOP") == 0)
 8000632:	4907      	ldr	r1, [pc, #28]	; (8000650 <BT_ProcessMsg+0x50>)
 8000634:	6878      	ldr	r0, [r7, #4]
 8000636:	f7ff fdeb 	bl	8000210 <strcmp>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d103      	bne.n	8000648 <BT_ProcessMsg+0x48>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000640:	2140      	movs	r1, #64	; 0x40
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <BT_ProcessMsg+0x54>)
 8000644:	f001 ffeb 	bl	800261e <HAL_GPIO_TogglePin>
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	0800591c 	.word	0x0800591c
 8000654:	40020400 	.word	0x40020400

08000658 <LS_LED_Send>:
// Line sensor control

#include "main.h"

void LS_LED_Send(SPI_HandleTypeDef *hspi, uint8_t *leds_on)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	6039      	str	r1, [r7, #0]
	// Send bits with SPI
	HAL_SPI_Transmit(hspi, leds_on, 4, 100);
 8000662:	2364      	movs	r3, #100	; 0x64
 8000664:	2204      	movs	r2, #4
 8000666:	6839      	ldr	r1, [r7, #0]
 8000668:	6878      	ldr	r0, [r7, #4]
 800066a:	f002 fff8 	bl	800365e <HAL_SPI_Transmit>

	// Latch enable
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000674:	481a      	ldr	r0, [pc, #104]	; (80006e0 <LS_LED_Send+0x88>)
 8000676:	f001 ffb9 	bl	80025ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000680:	4817      	ldr	r0, [pc, #92]	; (80006e0 <LS_LED_Send+0x88>)
 8000682:	f001 ffb3 	bl	80025ec <HAL_GPIO_WritePin>

	//Output enable
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_SET);
 8000686:	2201      	movs	r2, #1
 8000688:	2104      	movs	r1, #4
 800068a:	4816      	ldr	r0, [pc, #88]	; (80006e4 <LS_LED_Send+0x8c>)
 800068c:	f001 ffae 	bl	80025ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	2104      	movs	r1, #4
 8000694:	4813      	ldr	r0, [pc, #76]	; (80006e4 <LS_LED_Send+0x8c>)
 8000696:	f001 ffa9 	bl	80025ec <HAL_GPIO_WritePin>

	// Send bits with SPI
	HAL_SPI_Transmit(hspi, leds_on, 4, 100);
 800069a:	2364      	movs	r3, #100	; 0x64
 800069c:	2204      	movs	r2, #4
 800069e:	6839      	ldr	r1, [r7, #0]
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f002 ffdc 	bl	800365e <HAL_SPI_Transmit>

	// Inf Latch enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ac:	480e      	ldr	r0, [pc, #56]	; (80006e8 <LS_LED_Send+0x90>)
 80006ae:	f001 ff9d 	bl	80025ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b8:	480b      	ldr	r0, [pc, #44]	; (80006e8 <LS_LED_Send+0x90>)
 80006ba:	f001 ff97 	bl	80025ec <HAL_GPIO_WritePin>

	// Inf Output enable
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006c4:	4808      	ldr	r0, [pc, #32]	; (80006e8 <LS_LED_Send+0x90>)
 80006c6:	f001 ff91 	bl	80025ec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <LS_LED_Send+0x90>)
 80006d2:	f001 ff8b 	bl	80025ec <HAL_GPIO_WritePin>
}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40020800 	.word	0x40020800
 80006e4:	40020c00 	.word	0x40020c00
 80006e8:	40020000 	.word	0x40020000

080006ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08a      	sub	sp, #40	; 0x28
 80006f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f001 f9f9 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f8d9 	bl	80008ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 fc9f 	bl	800103c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006fe:	f000 fc49 	bl	8000f94 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000702:	f000 f997 	bl	8000a34 <MX_I2C1_Init>
  MX_I2C3_Init();
 8000706:	f000 f9c3 	bl	8000a90 <MX_I2C3_Init>
  MX_SPI1_Init();
 800070a:	f000 f9ef 	bl	8000aec <MX_SPI1_Init>
  MX_SPI2_Init();
 800070e:	f000 fa23 	bl	8000b58 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000712:	f000 fa57 	bl	8000bc4 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000716:	f000 f93b 	bl	8000990 <MX_ADC1_Init>
  MX_TIM2_Init();
 800071a:	f000 fa8b 	bl	8000c34 <MX_TIM2_Init>
  MX_TIM3_Init();
 800071e:	f000 fadd 	bl	8000cdc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000722:	f000 fb35 	bl	8000d90 <MX_TIM4_Init>
  MX_TIM13_Init();
 8000726:	f000 fbe7 	bl	8000ef8 <MX_TIM13_Init>
  MX_USART6_UART_Init();
 800072a:	f000 fc5d 	bl	8000fe8 <MX_USART6_UART_Init>
  MX_TIM5_Init();
 800072e:	f000 fb89 	bl	8000e44 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  uint8_t ADC_msg = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	75fb      	strb	r3, [r7, #23]

  unsigned char bt_msg[20];

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000736:	2200      	movs	r2, #0
 8000738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800073c:	4851      	ldr	r0, [pc, #324]	; (8000884 <main+0x198>)
 800073e:	f001 ff55 	bl	80025ec <HAL_GPIO_WritePin>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  HAL_SPI_TransmitReceive(&hspi1, &ADC_msg, ADC_received_msg, 2, 100);
 8000742:	f107 0117 	add.w	r1, r7, #23
 8000746:	2364      	movs	r3, #100	; 0x64
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2302      	movs	r3, #2
 800074c:	4a4e      	ldr	r2, [pc, #312]	; (8000888 <main+0x19c>)
 800074e:	484f      	ldr	r0, [pc, #316]	; (800088c <main+0x1a0>)
 8000750:	f003 f8c1 	bl	80038d6 <HAL_SPI_TransmitReceive>
	  ADC_received_msg_16 = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 8000754:	4b4c      	ldr	r3, [pc, #304]	; (8000888 <main+0x19c>)
 8000756:	785b      	ldrb	r3, [r3, #1]
 8000758:	b21a      	sxth	r2, r3
 800075a:	4b4b      	ldr	r3, [pc, #300]	; (8000888 <main+0x19c>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	021b      	lsls	r3, r3, #8
 8000760:	b21b      	sxth	r3, r3
 8000762:	4313      	orrs	r3, r2
 8000764:	b21b      	sxth	r3, r3
 8000766:	b29a      	uxth	r2, r3
 8000768:	4b49      	ldr	r3, [pc, #292]	; (8000890 <main+0x1a4>)
 800076a:	801a      	strh	r2, [r3, #0]
	  sprintf((char*)bt_msg, "%d\n\r", ADC_received_msg_16);
 800076c:	4b48      	ldr	r3, [pc, #288]	; (8000890 <main+0x1a4>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	461a      	mov	r2, r3
 8000772:	463b      	mov	r3, r7
 8000774:	4947      	ldr	r1, [pc, #284]	; (8000894 <main+0x1a8>)
 8000776:	4618      	mov	r0, r3
 8000778:	f004 fc48 	bl	800500c <siprintf>
	  HAL_UART_Transmit(&huart2, bt_msg, strlen((char*)bt_msg), 100);
 800077c:	463b      	mov	r3, r7
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fd50 	bl	8000224 <strlen>
 8000784:	4603      	mov	r3, r0
 8000786:	b29a      	uxth	r2, r3
 8000788:	4639      	mov	r1, r7
 800078a:	2364      	movs	r3, #100	; 0x64
 800078c:	4842      	ldr	r0, [pc, #264]	; (8000898 <main+0x1ac>)
 800078e:	f004 f82e 	bl	80047ee <HAL_UART_Transmit>
	  //printf("%d\n", ADC_received_msg_16);
	  //printf("%d %d\n", ADC_received_msg[0], ADC_received_msg[1]);

	  	  for (int j = 0; j < 4; j++)
 8000792:	2300      	movs	r3, #0
 8000794:	61fb      	str	r3, [r7, #28]
 8000796:	e062      	b.n	800085e <main+0x172>
		  {
			  leds_on[j] = 128;
 8000798:	4a40      	ldr	r2, [pc, #256]	; (800089c <main+0x1b0>)
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	4413      	add	r3, r2
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	701a      	strb	r2, [r3, #0]
			  LS_LED_Send(&hspi3, leds_on);
 80007a2:	493e      	ldr	r1, [pc, #248]	; (800089c <main+0x1b0>)
 80007a4:	483e      	ldr	r0, [pc, #248]	; (80008a0 <main+0x1b4>)
 80007a6:	f7ff ff57 	bl	8000658 <LS_LED_Send>
			  HAL_Delay(500);
 80007aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007ae:	f001 fa0d 	bl	8001bcc <HAL_Delay>
			  for (int i = 0; i < 7; i++)
 80007b2:	2300      	movs	r3, #0
 80007b4:	61bb      	str	r3, [r7, #24]
 80007b6:	e03d      	b.n	8000834 <main+0x148>
			  {
				  leds_on[j] >>= 1;
 80007b8:	4a38      	ldr	r2, [pc, #224]	; (800089c <main+0x1b0>)
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	4413      	add	r3, r2
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	b2d9      	uxtb	r1, r3
 80007c4:	4a35      	ldr	r2, [pc, #212]	; (800089c <main+0x1b0>)
 80007c6:	69fb      	ldr	r3, [r7, #28]
 80007c8:	4413      	add	r3, r2
 80007ca:	460a      	mov	r2, r1
 80007cc:	701a      	strb	r2, [r3, #0]
				  LS_LED_Send(&hspi3, leds_on);
 80007ce:	4933      	ldr	r1, [pc, #204]	; (800089c <main+0x1b0>)
 80007d0:	4833      	ldr	r0, [pc, #204]	; (80008a0 <main+0x1b4>)
 80007d2:	f7ff ff41 	bl	8000658 <LS_LED_Send>
				  HAL_Delay(500);
 80007d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007da:	f001 f9f7 	bl	8001bcc <HAL_Delay>

				  HAL_SPI_TransmitReceive(&hspi1, &ADC_msg, ADC_received_msg, 2, 100);
 80007de:	f107 0117 	add.w	r1, r7, #23
 80007e2:	2364      	movs	r3, #100	; 0x64
 80007e4:	9300      	str	r3, [sp, #0]
 80007e6:	2302      	movs	r3, #2
 80007e8:	4a27      	ldr	r2, [pc, #156]	; (8000888 <main+0x19c>)
 80007ea:	4828      	ldr	r0, [pc, #160]	; (800088c <main+0x1a0>)
 80007ec:	f003 f873 	bl	80038d6 <HAL_SPI_TransmitReceive>
				  ADC_received_msg_16 = ADC_received_msg[1] | (ADC_received_msg[0] << 8);
 80007f0:	4b25      	ldr	r3, [pc, #148]	; (8000888 <main+0x19c>)
 80007f2:	785b      	ldrb	r3, [r3, #1]
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	4b24      	ldr	r3, [pc, #144]	; (8000888 <main+0x19c>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	021b      	lsls	r3, r3, #8
 80007fc:	b21b      	sxth	r3, r3
 80007fe:	4313      	orrs	r3, r2
 8000800:	b21b      	sxth	r3, r3
 8000802:	b29a      	uxth	r2, r3
 8000804:	4b22      	ldr	r3, [pc, #136]	; (8000890 <main+0x1a4>)
 8000806:	801a      	strh	r2, [r3, #0]
				  sprintf((char*)bt_msg, "%d\n\r", ADC_received_msg_16);
 8000808:	4b21      	ldr	r3, [pc, #132]	; (8000890 <main+0x1a4>)
 800080a:	881b      	ldrh	r3, [r3, #0]
 800080c:	461a      	mov	r2, r3
 800080e:	463b      	mov	r3, r7
 8000810:	4920      	ldr	r1, [pc, #128]	; (8000894 <main+0x1a8>)
 8000812:	4618      	mov	r0, r3
 8000814:	f004 fbfa 	bl	800500c <siprintf>
				  HAL_UART_Transmit(&huart2, bt_msg, strlen((char*)bt_msg), 100);
 8000818:	463b      	mov	r3, r7
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fd02 	bl	8000224 <strlen>
 8000820:	4603      	mov	r3, r0
 8000822:	b29a      	uxth	r2, r3
 8000824:	4639      	mov	r1, r7
 8000826:	2364      	movs	r3, #100	; 0x64
 8000828:	481b      	ldr	r0, [pc, #108]	; (8000898 <main+0x1ac>)
 800082a:	f003 ffe0 	bl	80047ee <HAL_UART_Transmit>
			  for (int i = 0; i < 7; i++)
 800082e:	69bb      	ldr	r3, [r7, #24]
 8000830:	3301      	adds	r3, #1
 8000832:	61bb      	str	r3, [r7, #24]
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	2b06      	cmp	r3, #6
 8000838:	ddbe      	ble.n	80007b8 <main+0xcc>
				  //printf("%d\n", ADC_received_msg_16);
			  }
			  leds_on[j] >>= 1;
 800083a:	4a18      	ldr	r2, [pc, #96]	; (800089c <main+0x1b0>)
 800083c:	69fb      	ldr	r3, [r7, #28]
 800083e:	4413      	add	r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	085b      	lsrs	r3, r3, #1
 8000844:	b2d9      	uxtb	r1, r3
 8000846:	4a15      	ldr	r2, [pc, #84]	; (800089c <main+0x1b0>)
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	4413      	add	r3, r2
 800084c:	460a      	mov	r2, r1
 800084e:	701a      	strb	r2, [r3, #0]
			  LS_LED_Send(&hspi3, leds_on);
 8000850:	4912      	ldr	r1, [pc, #72]	; (800089c <main+0x1b0>)
 8000852:	4813      	ldr	r0, [pc, #76]	; (80008a0 <main+0x1b4>)
 8000854:	f7ff ff00 	bl	8000658 <LS_LED_Send>
	  	  for (int j = 0; j < 4; j++)
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	3301      	adds	r3, #1
 800085c:	61fb      	str	r3, [r7, #28]
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	2b03      	cmp	r3, #3
 8000862:	dd99      	ble.n	8000798 <main+0xac>
		  }



	  // Check if a bluetooth message has arrived
	  if (BTMessageFlag)
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <main+0x1b8>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	f43f af6a 	beq.w	8000742 <main+0x56>
	  {
		  BT_ProcessMsg(BT_received_msg);
 800086e:	480e      	ldr	r0, [pc, #56]	; (80008a8 <main+0x1bc>)
 8000870:	f7ff fec6 	bl	8000600 <BT_ProcessMsg>
		  BT_ReceiveMsg(&huart2, BT_received_msg);
 8000874:	490c      	ldr	r1, [pc, #48]	; (80008a8 <main+0x1bc>)
 8000876:	4808      	ldr	r0, [pc, #32]	; (8000898 <main+0x1ac>)
 8000878:	f7ff feb4 	bl	80005e4 <BT_ReceiveMsg>
		  BTMessageFlag = false;
 800087c:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <main+0x1b8>)
 800087e:	2200      	movs	r2, #0
 8000880:	701a      	strb	r2, [r3, #0]
	  HAL_SPI_TransmitReceive(&hspi1, &ADC_msg, ADC_received_msg, 2, 100);
 8000882:	e75e      	b.n	8000742 <main+0x56>
 8000884:	40020800 	.word	0x40020800
 8000888:	20000488 	.word	0x20000488
 800088c:	2000017c 	.word	0x2000017c
 8000890:	2000048a 	.word	0x2000048a
 8000894:	08005924 	.word	0x08005924
 8000898:	200003ec 	.word	0x200003ec
 800089c:	20000490 	.word	0x20000490
 80008a0:	2000022c 	.word	0x2000022c
 80008a4:	2000048c 	.word	0x2000048c
 80008a8:	20000474 	.word	0x20000474

080008ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b094      	sub	sp, #80	; 0x50
 80008b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2234      	movs	r2, #52	; 0x34
 80008b8:	2100      	movs	r1, #0
 80008ba:	4618      	mov	r0, r3
 80008bc:	f004 fb9e 	bl	8004ffc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	4b2c      	ldr	r3, [pc, #176]	; (8000988 <SystemClock_Config+0xdc>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a2b      	ldr	r2, [pc, #172]	; (8000988 <SystemClock_Config+0xdc>)
 80008da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
 80008e0:	4b29      	ldr	r3, [pc, #164]	; (8000988 <SystemClock_Config+0xdc>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ec:	2300      	movs	r3, #0
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	4b26      	ldr	r3, [pc, #152]	; (800098c <SystemClock_Config+0xe0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a25      	ldr	r2, [pc, #148]	; (800098c <SystemClock_Config+0xe0>)
 80008f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008fa:	6013      	str	r3, [r2, #0]
 80008fc:	4b23      	ldr	r3, [pc, #140]	; (800098c <SystemClock_Config+0xe0>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000908:	2301      	movs	r3, #1
 800090a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800090c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000910:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000912:	2302      	movs	r3, #2
 8000914:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000916:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800091a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800091c:	2304      	movs	r3, #4
 800091e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000920:	23b4      	movs	r3, #180	; 0xb4
 8000922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000924:	2302      	movs	r3, #2
 8000926:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000928:	2302      	movs	r3, #2
 800092a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800092c:	2302      	movs	r3, #2
 800092e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4618      	mov	r0, r3
 8000936:	f002 fb6b 	bl	8003010 <HAL_RCC_OscConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000940:	f000 fc54 	bl	80011ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000944:	f001 ffca 	bl	80028dc <HAL_PWREx_EnableOverDrive>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800094e:	f000 fc4d 	bl	80011ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	230f      	movs	r3, #15
 8000954:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2302      	movs	r3, #2
 8000958:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800095e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000962:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000968:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800096a:	f107 0308 	add.w	r3, r7, #8
 800096e:	2105      	movs	r1, #5
 8000970:	4618      	mov	r0, r3
 8000972:	f002 f803 	bl	800297c <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800097c:	f000 fc36 	bl	80011ec <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3750      	adds	r7, #80	; 0x50
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000996:	463b      	mov	r3, r7
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009a2:	4b21      	ldr	r3, [pc, #132]	; (8000a28 <MX_ADC1_Init+0x98>)
 80009a4:	4a21      	ldr	r2, [pc, #132]	; (8000a2c <MX_ADC1_Init+0x9c>)
 80009a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_ADC1_Init+0x98>)
 80009aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_ADC1_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_ADC1_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_ADC1_Init+0x98>)
 80009be:	2200      	movs	r2, #0
 80009c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009c2:	4b19      	ldr	r3, [pc, #100]	; (8000a28 <MX_ADC1_Init+0x98>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <MX_ADC1_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d0:	4b15      	ldr	r3, [pc, #84]	; (8000a28 <MX_ADC1_Init+0x98>)
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <MX_ADC1_Init+0xa0>)
 80009d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_ADC1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <MX_ADC1_Init+0x98>)
 80009de:	2201      	movs	r2, #1
 80009e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <MX_ADC1_Init+0x98>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <MX_ADC1_Init+0x98>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009f0:	480d      	ldr	r0, [pc, #52]	; (8000a28 <MX_ADC1_Init+0x98>)
 80009f2:	f001 f90f 	bl	8001c14 <HAL_ADC_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009fc:	f000 fbf6 	bl	80011ec <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a04:	2301      	movs	r3, #1
 8000a06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_ADC1_Init+0x98>)
 8000a12:	f001 f943 	bl	8001c9c <HAL_ADC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a1c:	f000 fbe6 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000008c 	.word	0x2000008c
 8000a2c:	40012000 	.word	0x40012000
 8000a30:	0f000001 	.word	0x0f000001

08000a34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a38:	4b12      	ldr	r3, [pc, #72]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a3a:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <MX_I2C1_Init+0x54>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a3e:	4b11      	ldr	r3, [pc, #68]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a40:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <MX_I2C1_Init+0x58>)
 8000a42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a4a:	4b0e      	ldr	r3, [pc, #56]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a58:	4b0a      	ldr	r3, [pc, #40]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a64:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a6a:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a70:	4804      	ldr	r0, [pc, #16]	; (8000a84 <MX_I2C1_Init+0x50>)
 8000a72:	f001 fdef 	bl	8002654 <HAL_I2C_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a7c:	f000 fbb6 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	200000d4 	.word	0x200000d4
 8000a88:	40005400 	.word	0x40005400
 8000a8c:	000186a0 	.word	0x000186a0

08000a90 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_I2C3_Init+0x50>)
 8000a96:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <MX_I2C3_Init+0x54>)
 8000a98:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_I2C3_Init+0x50>)
 8000a9c:	4a12      	ldr	r2, [pc, #72]	; (8000ae8 <MX_I2C3_Init+0x58>)
 8000a9e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_I2C3_Init+0x50>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <MX_I2C3_Init+0x50>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <MX_I2C3_Init+0x50>)
 8000aae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ab2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <MX_I2C3_Init+0x50>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <MX_I2C3_Init+0x50>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac0:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <MX_I2C3_Init+0x50>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <MX_I2C3_Init+0x50>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000acc:	4804      	ldr	r0, [pc, #16]	; (8000ae0 <MX_I2C3_Init+0x50>)
 8000ace:	f001 fdc1 	bl	8002654 <HAL_I2C_Init>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ad8:	f000 fb88 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	20000128 	.word	0x20000128
 8000ae4:	40005c00 	.word	0x40005c00
 8000ae8:	000186a0 	.word	0x000186a0

08000aec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000af0:	4b17      	ldr	r3, [pc, #92]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000af2:	4a18      	ldr	r2, [pc, #96]	; (8000b54 <MX_SPI1_Init+0x68>)
 8000af4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000af8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000afc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000afe:	4b14      	ldr	r3, [pc, #80]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b04:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b0a:	4b11      	ldr	r3, [pc, #68]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b10:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b16:	4b0e      	ldr	r3, [pc, #56]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b20:	2218      	movs	r2, #24
 8000b22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b24:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b30:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b36:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b38:	220a      	movs	r2, #10
 8000b3a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <MX_SPI1_Init+0x64>)
 8000b3e:	f002 fd05 	bl	800354c <HAL_SPI_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b48:	f000 fb50 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	2000017c 	.word	0x2000017c
 8000b54:	40013000 	.word	0x40013000

08000b58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b5c:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <MX_SPI2_Init+0x64>)
 8000b5e:	4a18      	ldr	r2, [pc, #96]	; (8000bc0 <MX_SPI2_Init+0x68>)
 8000b60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_SPI2_Init+0x64>)
 8000b64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_SPI2_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_SPI2_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_SPI2_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_SPI2_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_SPI2_Init+0x64>)
 8000b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b88:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_SPI2_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b90:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <MX_SPI2_Init+0x64>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b96:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_SPI2_Init+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b9c:	4b07      	ldr	r3, [pc, #28]	; (8000bbc <MX_SPI2_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ba2:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_SPI2_Init+0x64>)
 8000ba4:	220a      	movs	r2, #10
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <MX_SPI2_Init+0x64>)
 8000baa:	f002 fccf 	bl	800354c <HAL_SPI_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bb4:	f000 fb1a 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200001d4 	.word	0x200001d4
 8000bc0:	40003800 	.word	0x40003800

08000bc4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000bc8:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <MX_SPI3_Init+0x68>)
 8000bca:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <MX_SPI3_Init+0x6c>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000bce:	4b17      	ldr	r3, [pc, #92]	; (8000c2c <MX_SPI3_Init+0x68>)
 8000bd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bd4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000bd6:	4b15      	ldr	r3, [pc, #84]	; (8000c2c <MX_SPI3_Init+0x68>)
 8000bd8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000bdc:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_SPI3_Init+0x68>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be4:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_SPI3_Init+0x68>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bea:	4b10      	ldr	r3, [pc, #64]	; (8000c2c <MX_SPI3_Init+0x68>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_SPI3_Init+0x68>)
 8000bf2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bf6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_SPI3_Init+0x68>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_SPI3_Init+0x68>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_SPI3_Init+0x68>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_SPI3_Init+0x68>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_SPI3_Init+0x68>)
 8000c12:	220a      	movs	r2, #10
 8000c14:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_SPI3_Init+0x68>)
 8000c18:	f002 fc98 	bl	800354c <HAL_SPI_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 8000c22:	f000 fae3 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000022c 	.word	0x2000022c
 8000c30:	40003c00 	.word	0x40003c00

08000c34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	; 0x30
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	2224      	movs	r2, #36	; 0x24
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f004 f9da 	bl	8004ffc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c48:	1d3b      	adds	r3, r7, #4
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c50:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <MX_TIM2_Init+0xa4>)
 8000c52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c56:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c58:	4b1f      	ldr	r3, [pc, #124]	; (8000cd8 <MX_TIM2_Init+0xa4>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c5e:	4b1e      	ldr	r3, [pc, #120]	; (8000cd8 <MX_TIM2_Init+0xa4>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c64:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_TIM2_Init+0xa4>)
 8000c66:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_TIM2_Init+0xa4>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_TIM2_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c80:	2301      	movs	r3, #1
 8000c82:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c90:	2301      	movs	r3, #1
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c9c:	f107 030c 	add.w	r3, r7, #12
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480d      	ldr	r0, [pc, #52]	; (8000cd8 <MX_TIM2_Init+0xa4>)
 8000ca4:	f003 f922 	bl	8003eec <HAL_TIM_Encoder_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000cae:	f000 fa9d 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4806      	ldr	r0, [pc, #24]	; (8000cd8 <MX_TIM2_Init+0xa4>)
 8000cc0:	f003 fccc 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000cca:	f000 fa8f 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cce:	bf00      	nop
 8000cd0:	3730      	adds	r7, #48	; 0x30
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	20000284 	.word	0x20000284

08000cdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce2:	f107 0320 	add.w	r3, r7, #32
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cec:	1d3b      	adds	r3, r7, #4
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	611a      	str	r2, [r3, #16]
 8000cfa:	615a      	str	r2, [r3, #20]
 8000cfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cfe:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <MX_TIM3_Init+0xac>)
 8000d00:	4a22      	ldr	r2, [pc, #136]	; (8000d8c <MX_TIM3_Init+0xb0>)
 8000d02:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d04:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <MX_TIM3_Init+0xac>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0a:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <MX_TIM3_Init+0xac>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d10:	4b1d      	ldr	r3, [pc, #116]	; (8000d88 <MX_TIM3_Init+0xac>)
 8000d12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b1b      	ldr	r3, [pc, #108]	; (8000d88 <MX_TIM3_Init+0xac>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <MX_TIM3_Init+0xac>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d24:	4818      	ldr	r0, [pc, #96]	; (8000d88 <MX_TIM3_Init+0xac>)
 8000d26:	f003 f892 	bl	8003e4e <HAL_TIM_PWM_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000d30:	f000 fa5c 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d3c:	f107 0320 	add.w	r3, r7, #32
 8000d40:	4619      	mov	r1, r3
 8000d42:	4811      	ldr	r0, [pc, #68]	; (8000d88 <MX_TIM3_Init+0xac>)
 8000d44:	f003 fc8a 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d4e:	f000 fa4d 	bl	80011ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d52:	2360      	movs	r3, #96	; 0x60
 8000d54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2204      	movs	r2, #4
 8000d66:	4619      	mov	r1, r3
 8000d68:	4807      	ldr	r0, [pc, #28]	; (8000d88 <MX_TIM3_Init+0xac>)
 8000d6a:	f003 f965 	bl	8004038 <HAL_TIM_PWM_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000d74:	f000 fa3a 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <MX_TIM3_Init+0xac>)
 8000d7a:	f000 fd23 	bl	80017c4 <HAL_TIM_MspPostInit>

}
 8000d7e:	bf00      	nop
 8000d80:	3728      	adds	r7, #40	; 0x28
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200002cc 	.word	0x200002cc
 8000d8c:	40000400 	.word	0x40000400

08000d90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
 8000dae:	615a      	str	r2, [r3, #20]
 8000db0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000db2:	4b22      	ldr	r3, [pc, #136]	; (8000e3c <MX_TIM4_Init+0xac>)
 8000db4:	4a22      	ldr	r2, [pc, #136]	; (8000e40 <MX_TIM4_Init+0xb0>)
 8000db6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000db8:	4b20      	ldr	r3, [pc, #128]	; (8000e3c <MX_TIM4_Init+0xac>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_TIM4_Init+0xac>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000dc4:	4b1d      	ldr	r3, [pc, #116]	; (8000e3c <MX_TIM4_Init+0xac>)
 8000dc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dcc:	4b1b      	ldr	r3, [pc, #108]	; (8000e3c <MX_TIM4_Init+0xac>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd2:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_TIM4_Init+0xac>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dd8:	4818      	ldr	r0, [pc, #96]	; (8000e3c <MX_TIM4_Init+0xac>)
 8000dda:	f003 f838 	bl	8003e4e <HAL_TIM_PWM_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000de4:	f000 fa02 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000df0:	f107 0320 	add.w	r3, r7, #32
 8000df4:	4619      	mov	r1, r3
 8000df6:	4811      	ldr	r0, [pc, #68]	; (8000e3c <MX_TIM4_Init+0xac>)
 8000df8:	f003 fc30 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000e02:	f000 f9f3 	bl	80011ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e06:	2360      	movs	r3, #96	; 0x60
 8000e08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e16:	1d3b      	adds	r3, r7, #4
 8000e18:	2200      	movs	r2, #0
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4807      	ldr	r0, [pc, #28]	; (8000e3c <MX_TIM4_Init+0xac>)
 8000e1e:	f003 f90b 	bl	8004038 <HAL_TIM_PWM_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000e28:	f000 f9e0 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e2c:	4803      	ldr	r0, [pc, #12]	; (8000e3c <MX_TIM4_Init+0xac>)
 8000e2e:	f000 fcc9 	bl	80017c4 <HAL_TIM_MspPostInit>

}
 8000e32:	bf00      	nop
 8000e34:	3728      	adds	r7, #40	; 0x28
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000314 	.word	0x20000314
 8000e40:	40000800 	.word	0x40000800

08000e44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e4a:	f107 0320 	add.w	r3, r7, #32
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
 8000e62:	615a      	str	r2, [r3, #20]
 8000e64:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e66:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <MX_TIM5_Init+0xac>)
 8000e68:	4a22      	ldr	r2, [pc, #136]	; (8000ef4 <MX_TIM5_Init+0xb0>)
 8000e6a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <MX_TIM5_Init+0xac>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <MX_TIM5_Init+0xac>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <MX_TIM5_Init+0xac>)
 8000e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000e7e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e80:	4b1b      	ldr	r3, [pc, #108]	; (8000ef0 <MX_TIM5_Init+0xac>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e86:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_TIM5_Init+0xac>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e8c:	4818      	ldr	r0, [pc, #96]	; (8000ef0 <MX_TIM5_Init+0xac>)
 8000e8e:	f002 ffde 	bl	8003e4e <HAL_TIM_PWM_Init>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000e98:	f000 f9a8 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000ea4:	f107 0320 	add.w	r3, r7, #32
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4811      	ldr	r0, [pc, #68]	; (8000ef0 <MX_TIM5_Init+0xac>)
 8000eac:	f003 fbd6 	bl	800465c <HAL_TIMEx_MasterConfigSynchronization>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000eb6:	f000 f999 	bl	80011ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eba:	2360      	movs	r3, #96	; 0x60
 8000ebc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4807      	ldr	r0, [pc, #28]	; (8000ef0 <MX_TIM5_Init+0xac>)
 8000ed2:	f003 f8b1 	bl	8004038 <HAL_TIM_PWM_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000edc:	f000 f986 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ee0:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <MX_TIM5_Init+0xac>)
 8000ee2:	f000 fc6f 	bl	80017c4 <HAL_TIM_MspPostInit>

}
 8000ee6:	bf00      	nop
 8000ee8:	3728      	adds	r7, #40	; 0x28
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	2000035c 	.word	0x2000035c
 8000ef4:	40000c00 	.word	0x40000c00

08000ef8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b088      	sub	sp, #32
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000efe:	1d3b      	adds	r3, r7, #4
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]
 8000f0e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f12:	4a1f      	ldr	r2, [pc, #124]	; (8000f90 <MX_TIM13_Init+0x98>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8000f16:	4b1d      	ldr	r3, [pc, #116]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1c:	4b1b      	ldr	r3, [pc, #108]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 8000f22:	4b1a      	ldr	r3, [pc, #104]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f28:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2a:	4b18      	ldr	r3, [pc, #96]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f30:	4b16      	ldr	r3, [pc, #88]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8000f36:	4815      	ldr	r0, [pc, #84]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f38:	f002 ff3a 	bl	8003db0 <HAL_TIM_Base_Init>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8000f42:	f000 f953 	bl	80011ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8000f46:	4811      	ldr	r0, [pc, #68]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f48:	f002 ff81 	bl	8003e4e <HAL_TIM_PWM_Init>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d001      	beq.n	8000f56 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8000f52:	f000 f94b 	bl	80011ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f56:	2360      	movs	r3, #96	; 0x60
 8000f58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2200      	movs	r2, #0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4807      	ldr	r0, [pc, #28]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f6e:	f003 f863 	bl	8004038 <HAL_TIM_PWM_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8000f78:	f000 f938 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8000f7c:	4803      	ldr	r0, [pc, #12]	; (8000f8c <MX_TIM13_Init+0x94>)
 8000f7e:	f000 fc21 	bl	80017c4 <HAL_TIM_MspPostInit>

}
 8000f82:	bf00      	nop
 8000f84:	3720      	adds	r7, #32
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200003a4 	.word	0x200003a4
 8000f90:	40001c00 	.word	0x40001c00

08000f94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <MX_USART2_UART_Init+0x50>)
 8000f9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fac:	4b0c      	ldr	r3, [pc, #48]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb8:	4b09      	ldr	r3, [pc, #36]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fba:	220c      	movs	r2, #12
 8000fbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_USART2_UART_Init+0x4c>)
 8000fcc:	f003 fbc2 	bl	8004754 <HAL_UART_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fd6:	f000 f909 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200003ec 	.word	0x200003ec
 8000fe4:	40004400 	.word	0x40004400

08000fe8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000fec:	4b11      	ldr	r3, [pc, #68]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	; (8001038 <MX_USART6_UART_Init+0x50>)
 8000ff0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000ff2:	4b10      	ldr	r3, [pc, #64]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001000:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 800100e:	220c      	movs	r2, #12
 8001010:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 8001014:	2200      	movs	r2, #0
 8001016:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001018:	4b06      	ldr	r3, [pc, #24]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 800101a:	2200      	movs	r2, #0
 800101c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	; (8001034 <MX_USART6_UART_Init+0x4c>)
 8001020:	f003 fb98 	bl	8004754 <HAL_UART_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800102a:	f000 f8df 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000430 	.word	0x20000430
 8001038:	40011400 	.word	0x40011400

0800103c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
 8001050:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
 8001056:	4b60      	ldr	r3, [pc, #384]	; (80011d8 <MX_GPIO_Init+0x19c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a5f      	ldr	r2, [pc, #380]	; (80011d8 <MX_GPIO_Init+0x19c>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b5d      	ldr	r3, [pc, #372]	; (80011d8 <MX_GPIO_Init+0x19c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	4b59      	ldr	r3, [pc, #356]	; (80011d8 <MX_GPIO_Init+0x19c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	4a58      	ldr	r2, [pc, #352]	; (80011d8 <MX_GPIO_Init+0x19c>)
 8001078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107c:	6313      	str	r3, [r2, #48]	; 0x30
 800107e:	4b56      	ldr	r3, [pc, #344]	; (80011d8 <MX_GPIO_Init+0x19c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	4b52      	ldr	r3, [pc, #328]	; (80011d8 <MX_GPIO_Init+0x19c>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	4a51      	ldr	r2, [pc, #324]	; (80011d8 <MX_GPIO_Init+0x19c>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6313      	str	r3, [r2, #48]	; 0x30
 800109a:	4b4f      	ldr	r3, [pc, #316]	; (80011d8 <MX_GPIO_Init+0x19c>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	607b      	str	r3, [r7, #4]
 80010aa:	4b4b      	ldr	r3, [pc, #300]	; (80011d8 <MX_GPIO_Init+0x19c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a4a      	ldr	r2, [pc, #296]	; (80011d8 <MX_GPIO_Init+0x19c>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b48      	ldr	r3, [pc, #288]	; (80011d8 <MX_GPIO_Init+0x19c>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
 80010c6:	4b44      	ldr	r3, [pc, #272]	; (80011d8 <MX_GPIO_Init+0x19c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a43      	ldr	r2, [pc, #268]	; (80011d8 <MX_GPIO_Init+0x19c>)
 80010cc:	f043 0308 	orr.w	r3, r3, #8
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b41      	ldr	r3, [pc, #260]	; (80011d8 <MX_GPIO_Init+0x19c>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0308 	and.w	r3, r3, #8
 80010da:	603b      	str	r3, [r7, #0]
 80010dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 80010de:	2200      	movs	r2, #0
 80010e0:	f24d 0107 	movw	r1, #53255	; 0xd007
 80010e4:	483d      	ldr	r0, [pc, #244]	; (80011dc <MX_GPIO_Init+0x1a0>)
 80010e6:	f001 fa81 	bl	80025ec <HAL_GPIO_WritePin>
                          |AD_CS3_Pin|AD_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AD_CS1_Pin|LED_LE_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 6110 	mov.w	r1, #2304	; 0x900
 80010f0:	483b      	ldr	r0, [pc, #236]	; (80011e0 <MX_GPIO_Init+0x1a4>)
 80010f2:	f001 fa7b 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 51b0 	mov.w	r1, #5632	; 0x1600
 80010fc:	4839      	ldr	r0, [pc, #228]	; (80011e4 <MX_GPIO_Init+0x1a8>)
 80010fe:	f001 fa75 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, GPIO_PIN_RESET);
 8001102:	2200      	movs	r2, #0
 8001104:	2104      	movs	r1, #4
 8001106:	4838      	ldr	r0, [pc, #224]	; (80011e8 <MX_GPIO_Init+0x1ac>)
 8001108:	f001 fa70 	bl	80025ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800110c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001112:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001116:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	482f      	ldr	r0, [pc, #188]	; (80011e0 <MX_GPIO_Init+0x1a4>)
 8001124:	f001 f8ce 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_PWR_FB_Pin */
  GPIO_InitStruct.Pin = DRV_PWR_FB_Pin;
 8001128:	2310      	movs	r3, #16
 800112a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_PWR_FB_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4829      	ldr	r0, [pc, #164]	; (80011e0 <MX_GPIO_Init+0x1a4>)
 800113c:	f001 f8c2 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ToF_XSDN_36_Pin ToF_XSDN_25_Pin ToF_XSDN_14_Pin AD_CS4_Pin
                           AD_CS3_Pin AD_CS2_Pin */
  GPIO_InitStruct.Pin = ToF_XSDN_36_Pin|ToF_XSDN_25_Pin|ToF_XSDN_14_Pin|AD_CS4_Pin
 8001140:	f24d 0307 	movw	r3, #53255	; 0xd007
 8001144:	617b      	str	r3, [r7, #20]
                          |AD_CS3_Pin|AD_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001146:	2301      	movs	r3, #1
 8001148:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800114e:	2300      	movs	r3, #0
 8001150:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4820      	ldr	r0, [pc, #128]	; (80011dc <MX_GPIO_Init+0x1a0>)
 800115a:	f001 f8b3 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD_CS1_Pin LED_LE_Pin */
  GPIO_InitStruct.Pin = AD_CS1_Pin|LED_LE_Pin;
 800115e:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001162:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	4619      	mov	r1, r3
 8001176:	481a      	ldr	r0, [pc, #104]	; (80011e0 <MX_GPIO_Init+0x1a4>)
 8001178:	f001 f8a4 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INF_LE_Pin INF_OE_Pin DRV_EN_Pin */
  GPIO_InitStruct.Pin = INF_LE_Pin|INF_OE_Pin|DRV_EN_Pin;
 800117c:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118a:	2300      	movs	r3, #0
 800118c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	4619      	mov	r1, r3
 8001194:	4813      	ldr	r0, [pc, #76]	; (80011e4 <MX_GPIO_Init+0x1a8>)
 8001196:	f001 f895 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : DRV_EN_FB_Pin */
  GPIO_InitStruct.Pin = DRV_EN_FB_Pin;
 800119a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800119e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DRV_EN_FB_GPIO_Port, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	480d      	ldr	r0, [pc, #52]	; (80011e4 <MX_GPIO_Init+0x1a8>)
 80011b0:	f001 f888 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_OE_Pin */
  GPIO_InitStruct.Pin = LED_OE_Pin;
 80011b4:	2304      	movs	r3, #4
 80011b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b8:	2301      	movs	r3, #1
 80011ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011bc:	2300      	movs	r3, #0
 80011be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c0:	2300      	movs	r3, #0
 80011c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_OE_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	4807      	ldr	r0, [pc, #28]	; (80011e8 <MX_GPIO_Init+0x1ac>)
 80011cc:	f001 f87a 	bl	80022c4 <HAL_GPIO_Init>

}
 80011d0:	bf00      	nop
 80011d2:	3728      	adds	r7, #40	; 0x28
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020400 	.word	0x40020400
 80011e0:	40020800 	.word	0x40020800
 80011e4:	40020000 	.word	0x40020000
 80011e8:	40020c00 	.word	0x40020c00

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <Error_Handler+0x8>
	...

080011f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a0f      	ldr	r2, [pc, #60]	; (8001244 <HAL_MspInit+0x4c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b0d      	ldr	r3, [pc, #52]	; (8001244 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <HAL_MspInit+0x4c>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a08      	ldr	r2, [pc, #32]	; (8001244 <HAL_MspInit+0x4c>)
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b06      	ldr	r3, [pc, #24]	; (8001244 <HAL_MspInit+0x4c>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001232:	603b      	str	r3, [r7, #0]
 8001234:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001236:	2007      	movs	r0, #7
 8001238:	f001 f810 	bl	800225c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800

08001248 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b08a      	sub	sp, #40	; 0x28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a17      	ldr	r2, [pc, #92]	; (80012c4 <HAL_ADC_MspInit+0x7c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d127      	bne.n	80012ba <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_ADC_MspInit+0x80>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001272:	4a15      	ldr	r2, [pc, #84]	; (80012c8 <HAL_ADC_MspInit+0x80>)
 8001274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001278:	6453      	str	r3, [r2, #68]	; 0x44
 800127a:	4b13      	ldr	r3, [pc, #76]	; (80012c8 <HAL_ADC_MspInit+0x80>)
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	60fb      	str	r3, [r7, #12]
 800128a:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <HAL_ADC_MspInit+0x80>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a0e      	ldr	r2, [pc, #56]	; (80012c8 <HAL_ADC_MspInit+0x80>)
 8001290:	f043 0301 	orr.w	r3, r3, #1
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <HAL_ADC_MspInit+0x80>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IMotor_Pin|UBatt_Pin;
 80012a2:	2312      	movs	r3, #18
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a6:	2303      	movs	r3, #3
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 0314 	add.w	r3, r7, #20
 80012b2:	4619      	mov	r1, r3
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <HAL_ADC_MspInit+0x84>)
 80012b6:	f001 f805 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012ba:	bf00      	nop
 80012bc:	3728      	adds	r7, #40	; 0x28
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40012000 	.word	0x40012000
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020000 	.word	0x40020000

080012d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08c      	sub	sp, #48	; 0x30
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 031c 	add.w	r3, r7, #28
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a42      	ldr	r2, [pc, #264]	; (80013f8 <HAL_I2C_MspInit+0x128>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d12d      	bne.n	800134e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	4b41      	ldr	r3, [pc, #260]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a40      	ldr	r2, [pc, #256]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800130e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001314:	2312      	movs	r3, #18
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001320:	2304      	movs	r3, #4
 8001322:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 031c 	add.w	r3, r7, #28
 8001328:	4619      	mov	r1, r3
 800132a:	4835      	ldr	r0, [pc, #212]	; (8001400 <HAL_I2C_MspInit+0x130>)
 800132c:	f000 ffca 	bl	80022c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001330:	2300      	movs	r3, #0
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	4b31      	ldr	r3, [pc, #196]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	4a30      	ldr	r2, [pc, #192]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 800133a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800133e:	6413      	str	r3, [r2, #64]	; 0x40
 8001340:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800134c:	e050      	b.n	80013f0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a2c      	ldr	r2, [pc, #176]	; (8001404 <HAL_I2C_MspInit+0x134>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d14b      	bne.n	80013f0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a26      	ldr	r2, [pc, #152]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 8001362:	f043 0304 	orr.w	r3, r3, #4
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	4b20      	ldr	r3, [pc, #128]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	4a1f      	ldr	r2, [pc, #124]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	6313      	str	r3, [r2, #48]	; 0x30
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001396:	2312      	movs	r3, #18
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139e:	2303      	movs	r3, #3
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013a2:	2304      	movs	r3, #4
 80013a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013a6:	f107 031c 	add.w	r3, r7, #28
 80013aa:	4619      	mov	r1, r3
 80013ac:	4816      	ldr	r0, [pc, #88]	; (8001408 <HAL_I2C_MspInit+0x138>)
 80013ae:	f000 ff89 	bl	80022c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013b8:	2312      	movs	r3, #18
 80013ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c0:	2303      	movs	r3, #3
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80013c4:	2304      	movs	r3, #4
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	480f      	ldr	r0, [pc, #60]	; (800140c <HAL_I2C_MspInit+0x13c>)
 80013d0:	f000 ff78 	bl	80022c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013d4:	2300      	movs	r3, #0
 80013d6:	60bb      	str	r3, [r7, #8]
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	4a07      	ldr	r2, [pc, #28]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 80013de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013e2:	6413      	str	r3, [r2, #64]	; 0x40
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <HAL_I2C_MspInit+0x12c>)
 80013e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
}
 80013f0:	bf00      	nop
 80013f2:	3730      	adds	r7, #48	; 0x30
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40005400 	.word	0x40005400
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020400 	.word	0x40020400
 8001404:	40005c00 	.word	0x40005c00
 8001408:	40020800 	.word	0x40020800
 800140c:	40020000 	.word	0x40020000

08001410 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b090      	sub	sp, #64	; 0x40
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a72      	ldr	r2, [pc, #456]	; (80015f8 <HAL_SPI_MspInit+0x1e8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d14a      	bne.n	80014c8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
 8001436:	4b71      	ldr	r3, [pc, #452]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a70      	ldr	r2, [pc, #448]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 800143c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b6e      	ldr	r3, [pc, #440]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
 800144c:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
 8001452:	4b6a      	ldr	r3, [pc, #424]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a69      	ldr	r2, [pc, #420]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b67      	ldr	r3, [pc, #412]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	623b      	str	r3, [r7, #32]
 800146e:	4b63      	ldr	r3, [pc, #396]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a62      	ldr	r2, [pc, #392]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b60      	ldr	r3, [pc, #384]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	623b      	str	r3, [r7, #32]
 8001484:	6a3b      	ldr	r3, [r7, #32]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001486:	23a0      	movs	r3, #160	; 0xa0
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001496:	2305      	movs	r3, #5
 8001498:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800149a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800149e:	4619      	mov	r1, r3
 80014a0:	4857      	ldr	r0, [pc, #348]	; (8001600 <HAL_SPI_MspInit+0x1f0>)
 80014a2:	f000 ff0f 	bl	80022c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014a6:	2310      	movs	r3, #16
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b6:	2305      	movs	r3, #5
 80014b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014be:	4619      	mov	r1, r3
 80014c0:	4850      	ldr	r0, [pc, #320]	; (8001604 <HAL_SPI_MspInit+0x1f4>)
 80014c2:	f000 feff 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80014c6:	e092      	b.n	80015ee <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI2)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a4e      	ldr	r2, [pc, #312]	; (8001608 <HAL_SPI_MspInit+0x1f8>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d15b      	bne.n	800158a <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	4b49      	ldr	r3, [pc, #292]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	4a48      	ldr	r2, [pc, #288]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014e0:	6413      	str	r3, [r2, #64]	; 0x40
 80014e2:	4b46      	ldr	r3, [pc, #280]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	61bb      	str	r3, [r7, #24]
 80014f2:	4b42      	ldr	r3, [pc, #264]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a41      	ldr	r2, [pc, #260]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 80014f8:	f043 0304 	orr.w	r3, r3, #4
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b3f      	ldr	r3, [pc, #252]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0304 	and.w	r3, r3, #4
 8001506:	61bb      	str	r3, [r7, #24]
 8001508:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	4a3a      	ldr	r2, [pc, #232]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 8001514:	f043 0302 	orr.w	r3, r3, #2
 8001518:	6313      	str	r3, [r2, #48]	; 0x30
 800151a:	4b38      	ldr	r3, [pc, #224]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	617b      	str	r3, [r7, #20]
 8001524:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001526:	2302      	movs	r3, #2
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152a:	2302      	movs	r3, #2
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001532:	2303      	movs	r3, #3
 8001534:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8001536:	2307      	movs	r3, #7
 8001538:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800153e:	4619      	mov	r1, r3
 8001540:	4832      	ldr	r0, [pc, #200]	; (800160c <HAL_SPI_MspInit+0x1fc>)
 8001542:	f000 febf 	bl	80022c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001546:	2304      	movs	r3, #4
 8001548:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154a:	2302      	movs	r3, #2
 800154c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154e:	2300      	movs	r3, #0
 8001550:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001552:	2303      	movs	r3, #3
 8001554:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001556:	2305      	movs	r3, #5
 8001558:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800155e:	4619      	mov	r1, r3
 8001560:	482a      	ldr	r0, [pc, #168]	; (800160c <HAL_SPI_MspInit+0x1fc>)
 8001562:	f000 feaf 	bl	80022c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001566:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156c:	2302      	movs	r3, #2
 800156e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001570:	2300      	movs	r3, #0
 8001572:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001574:	2303      	movs	r3, #3
 8001576:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001578:	2305      	movs	r3, #5
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001580:	4619      	mov	r1, r3
 8001582:	4820      	ldr	r0, [pc, #128]	; (8001604 <HAL_SPI_MspInit+0x1f4>)
 8001584:	f000 fe9e 	bl	80022c4 <HAL_GPIO_Init>
}
 8001588:	e031      	b.n	80015ee <HAL_SPI_MspInit+0x1de>
  else if(hspi->Instance==SPI3)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a20      	ldr	r2, [pc, #128]	; (8001610 <HAL_SPI_MspInit+0x200>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d12c      	bne.n	80015ee <HAL_SPI_MspInit+0x1de>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001594:	2300      	movs	r3, #0
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	4b18      	ldr	r3, [pc, #96]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	4a17      	ldr	r2, [pc, #92]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 800159e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015a2:	6413      	str	r3, [r2, #64]	; 0x40
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 80015a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015ac:	613b      	str	r3, [r7, #16]
 80015ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	4b11      	ldr	r3, [pc, #68]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 80015b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b8:	4a10      	ldr	r2, [pc, #64]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6313      	str	r3, [r2, #48]	; 0x30
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <HAL_SPI_MspInit+0x1ec>)
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	60fb      	str	r3, [r7, #12]
 80015ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80015cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015de:	2306      	movs	r3, #6
 80015e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e6:	4619      	mov	r1, r3
 80015e8:	4808      	ldr	r0, [pc, #32]	; (800160c <HAL_SPI_MspInit+0x1fc>)
 80015ea:	f000 fe6b 	bl	80022c4 <HAL_GPIO_Init>
}
 80015ee:	bf00      	nop
 80015f0:	3740      	adds	r7, #64	; 0x40
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40013000 	.word	0x40013000
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020000 	.word	0x40020000
 8001604:	40020400 	.word	0x40020400
 8001608:	40003800 	.word	0x40003800
 800160c:	40020800 	.word	0x40020800
 8001610:	40003c00 	.word	0x40003c00

08001614 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001634:	d14b      	bne.n	80016ce <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b27      	ldr	r3, [pc, #156]	; (80016d8 <HAL_TIM_Encoder_MspInit+0xc4>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	4a26      	ldr	r2, [pc, #152]	; (80016d8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6413      	str	r3, [r2, #64]	; 0x40
 8001646:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b20      	ldr	r3, [pc, #128]	; (80016d8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a1f      	ldr	r2, [pc, #124]	; (80016d8 <HAL_TIM_Encoder_MspInit+0xc4>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b1d      	ldr	r3, [pc, #116]	; (80016d8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b19      	ldr	r3, [pc, #100]	; (80016d8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	; 0x30
 800167e:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_A_Pin;
 800168a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800169c:	2301      	movs	r3, #1
 800169e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	480d      	ldr	r0, [pc, #52]	; (80016dc <HAL_TIM_Encoder_MspInit+0xc8>)
 80016a8:	f000 fe0c 	bl	80022c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENCODER_B_Pin;
 80016ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80016b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ba:	2300      	movs	r3, #0
 80016bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016be:	2301      	movs	r3, #1
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 80016c2:	f107 0314 	add.w	r3, r7, #20
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <HAL_TIM_Encoder_MspInit+0xcc>)
 80016ca:	f000 fdfb 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020000 	.word	0x40020000
 80016e0:	40020400 	.word	0x40020400

080016e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b087      	sub	sp, #28
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a1f      	ldr	r2, [pc, #124]	; (8001770 <HAL_TIM_PWM_MspInit+0x8c>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d10e      	bne.n	8001714 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	4b1e      	ldr	r3, [pc, #120]	; (8001774 <HAL_TIM_PWM_MspInit+0x90>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_TIM_PWM_MspInit+0x90>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <HAL_TIM_PWM_MspInit+0x90>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001712:	e026      	b.n	8001762 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM4)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a17      	ldr	r2, [pc, #92]	; (8001778 <HAL_TIM_PWM_MspInit+0x94>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d10e      	bne.n	800173c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	613b      	str	r3, [r7, #16]
 8001722:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_TIM_PWM_MspInit+0x90>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a13      	ldr	r2, [pc, #76]	; (8001774 <HAL_TIM_PWM_MspInit+0x90>)
 8001728:	f043 0304 	orr.w	r3, r3, #4
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_TIM_PWM_MspInit+0x90>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 0304 	and.w	r3, r3, #4
 8001736:	613b      	str	r3, [r7, #16]
 8001738:	693b      	ldr	r3, [r7, #16]
}
 800173a:	e012      	b.n	8001762 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a0e      	ldr	r2, [pc, #56]	; (800177c <HAL_TIM_PWM_MspInit+0x98>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d10d      	bne.n	8001762 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	4b0a      	ldr	r3, [pc, #40]	; (8001774 <HAL_TIM_PWM_MspInit+0x90>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	4a09      	ldr	r2, [pc, #36]	; (8001774 <HAL_TIM_PWM_MspInit+0x90>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6413      	str	r3, [r2, #64]	; 0x40
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <HAL_TIM_PWM_MspInit+0x90>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
}
 8001762:	bf00      	nop
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40000400 	.word	0x40000400
 8001774:	40023800 	.word	0x40023800
 8001778:	40000800 	.word	0x40000800
 800177c:	40000c00 	.word	0x40000c00

08001780 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM13)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <HAL_TIM_Base_MspInit+0x3c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d10d      	bne.n	80017ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM13_MspInit 0 */

  /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_TIM_Base_MspInit+0x40>)
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	4a09      	ldr	r2, [pc, #36]	; (80017c0 <HAL_TIM_Base_MspInit+0x40>)
 800179c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017a0:	6413      	str	r3, [r2, #64]	; 0x40
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <HAL_TIM_Base_MspInit+0x40>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80017ae:	bf00      	nop
 80017b0:	3714      	adds	r7, #20
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40001c00 	.word	0x40001c00
 80017c0:	40023800 	.word	0x40023800

080017c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08c      	sub	sp, #48	; 0x30
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a48      	ldr	r2, [pc, #288]	; (8001904 <HAL_TIM_MspPostInit+0x140>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d11e      	bne.n	8001824 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	61bb      	str	r3, [r7, #24]
 80017ea:	4b47      	ldr	r3, [pc, #284]	; (8001908 <HAL_TIM_MspPostInit+0x144>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a46      	ldr	r2, [pc, #280]	; (8001908 <HAL_TIM_MspPostInit+0x144>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b44      	ldr	r3, [pc, #272]	; (8001908 <HAL_TIM_MspPostInit+0x144>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]
 8001800:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = DRV_PMW1_Pin;
 8001802:	2320      	movs	r3, #32
 8001804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	2302      	movs	r3, #2
 8001808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180e:	2300      	movs	r3, #0
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001812:	2302      	movs	r3, #2
 8001814:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PMW1_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4619      	mov	r1, r3
 800181c:	483b      	ldr	r0, [pc, #236]	; (800190c <HAL_TIM_MspPostInit+0x148>)
 800181e:	f000 fd51 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001822:	e06a      	b.n	80018fa <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM4)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a39      	ldr	r2, [pc, #228]	; (8001910 <HAL_TIM_MspPostInit+0x14c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d11e      	bne.n	800186c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <HAL_TIM_MspPostInit+0x144>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4a34      	ldr	r2, [pc, #208]	; (8001908 <HAL_TIM_MspPostInit+0x144>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4b32      	ldr	r3, [pc, #200]	; (8001908 <HAL_TIM_MspPostInit+0x144>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = DRV_PWM2_Pin;
 800184a:	2340      	movs	r3, #64	; 0x40
 800184c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184e:	2302      	movs	r3, #2
 8001850:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001856:	2300      	movs	r3, #0
 8001858:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800185a:	2302      	movs	r3, #2
 800185c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRV_PWM2_GPIO_Port, &GPIO_InitStruct);
 800185e:	f107 031c 	add.w	r3, r7, #28
 8001862:	4619      	mov	r1, r3
 8001864:	4829      	ldr	r0, [pc, #164]	; (800190c <HAL_TIM_MspPostInit+0x148>)
 8001866:	f000 fd2d 	bl	80022c4 <HAL_GPIO_Init>
}
 800186a:	e046      	b.n	80018fa <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM5)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a28      	ldr	r2, [pc, #160]	; (8001914 <HAL_TIM_MspPostInit+0x150>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d11e      	bne.n	80018b4 <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b23      	ldr	r3, [pc, #140]	; (8001908 <HAL_TIM_MspPostInit+0x144>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a22      	ldr	r2, [pc, #136]	; (8001908 <HAL_TIM_MspPostInit+0x144>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <HAL_TIM_MspPostInit+0x144>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = RC_PWM2_Pin;
 8001892:	2301      	movs	r3, #1
 8001894:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80018a2:	2302      	movs	r3, #2
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM2_GPIO_Port, &GPIO_InitStruct);
 80018a6:	f107 031c 	add.w	r3, r7, #28
 80018aa:	4619      	mov	r1, r3
 80018ac:	481a      	ldr	r0, [pc, #104]	; (8001918 <HAL_TIM_MspPostInit+0x154>)
 80018ae:	f000 fd09 	bl	80022c4 <HAL_GPIO_Init>
}
 80018b2:	e022      	b.n	80018fa <HAL_TIM_MspPostInit+0x136>
  else if(htim->Instance==TIM13)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a18      	ldr	r2, [pc, #96]	; (800191c <HAL_TIM_MspPostInit+0x158>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d11d      	bne.n	80018fa <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	2300      	movs	r3, #0
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <HAL_TIM_MspPostInit+0x144>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a10      	ldr	r2, [pc, #64]	; (8001908 <HAL_TIM_MspPostInit+0x144>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_TIM_MspPostInit+0x144>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = RC_PWM_Pin;
 80018da:	2340      	movs	r3, #64	; 0x40
 80018dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	2302      	movs	r3, #2
 80018e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80018ea:	2309      	movs	r3, #9
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(RC_PWM_GPIO_Port, &GPIO_InitStruct);
 80018ee:	f107 031c 	add.w	r3, r7, #28
 80018f2:	4619      	mov	r1, r3
 80018f4:	4808      	ldr	r0, [pc, #32]	; (8001918 <HAL_TIM_MspPostInit+0x154>)
 80018f6:	f000 fce5 	bl	80022c4 <HAL_GPIO_Init>
}
 80018fa:	bf00      	nop
 80018fc:	3730      	adds	r7, #48	; 0x30
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	40000400 	.word	0x40000400
 8001908:	40023800 	.word	0x40023800
 800190c:	40020400 	.word	0x40020400
 8001910:	40000800 	.word	0x40000800
 8001914:	40000c00 	.word	0x40000c00
 8001918:	40020000 	.word	0x40020000
 800191c:	40001c00 	.word	0x40001c00

08001920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b08c      	sub	sp, #48	; 0x30
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	2200      	movs	r2, #0
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	609a      	str	r2, [r3, #8]
 8001934:	60da      	str	r2, [r3, #12]
 8001936:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a32      	ldr	r2, [pc, #200]	; (8001a08 <HAL_UART_MspInit+0xe8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d12c      	bne.n	800199c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	61bb      	str	r3, [r7, #24]
 8001946:	4b31      	ldr	r3, [pc, #196]	; (8001a0c <HAL_UART_MspInit+0xec>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a30      	ldr	r2, [pc, #192]	; (8001a0c <HAL_UART_MspInit+0xec>)
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <HAL_UART_MspInit+0xec>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	61bb      	str	r3, [r7, #24]
 800195c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	617b      	str	r3, [r7, #20]
 8001962:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <HAL_UART_MspInit+0xec>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a29      	ldr	r2, [pc, #164]	; (8001a0c <HAL_UART_MspInit+0xec>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_UART_MspInit+0xec>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BT_TX_Pin|BT_RX_Pin;
 800197a:	230c      	movs	r3, #12
 800197c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197e:	2302      	movs	r3, #2
 8001980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001986:	2303      	movs	r3, #3
 8001988:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800198a:	2307      	movs	r3, #7
 800198c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 031c 	add.w	r3, r7, #28
 8001992:	4619      	mov	r1, r3
 8001994:	481e      	ldr	r0, [pc, #120]	; (8001a10 <HAL_UART_MspInit+0xf0>)
 8001996:	f000 fc95 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800199a:	e030      	b.n	80019fe <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1c      	ldr	r2, [pc, #112]	; (8001a14 <HAL_UART_MspInit+0xf4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d12b      	bne.n	80019fe <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b18      	ldr	r3, [pc, #96]	; (8001a0c <HAL_UART_MspInit+0xec>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	4a17      	ldr	r2, [pc, #92]	; (8001a0c <HAL_UART_MspInit+0xec>)
 80019b0:	f043 0320 	orr.w	r3, r3, #32
 80019b4:	6453      	str	r3, [r2, #68]	; 0x44
 80019b6:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_UART_MspInit+0xec>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	f003 0320 	and.w	r3, r3, #32
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_UART_MspInit+0xec>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a10      	ldr	r2, [pc, #64]	; (8001a0c <HAL_UART_MspInit+0xec>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <HAL_UART_MspInit+0xec>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019de:	23c0      	movs	r3, #192	; 0xc0
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80019ee:	2308      	movs	r3, #8
 80019f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	4807      	ldr	r0, [pc, #28]	; (8001a18 <HAL_UART_MspInit+0xf8>)
 80019fa:	f000 fc63 	bl	80022c4 <HAL_GPIO_Init>
}
 80019fe:	bf00      	nop
 8001a00:	3730      	adds	r7, #48	; 0x30
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40004400 	.word	0x40004400
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40020000 	.word	0x40020000
 8001a14:	40011400 	.word	0x40011400
 8001a18:	40020800 	.word	0x40020800

08001a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a20:	e7fe      	b.n	8001a20 <NMI_Handler+0x4>

08001a22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a22:	b480      	push	{r7}
 8001a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a26:	e7fe      	b.n	8001a26 <HardFault_Handler+0x4>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	e7fe      	b.n	8001a2c <MemManage_Handler+0x4>

08001a2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a32:	e7fe      	b.n	8001a32 <BusFault_Handler+0x4>

08001a34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a38:	e7fe      	b.n	8001a38 <UsageFault_Handler+0x4>

08001a3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a56:	b480      	push	{r7}
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a68:	f000 f890 	bl	8001b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <SystemInit+0x20>)
 8001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <SystemInit+0x20>)
 8001a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001acc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a98:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a9a:	490e      	ldr	r1, [pc, #56]	; (8001ad4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a9c:	4a0e      	ldr	r2, [pc, #56]	; (8001ad8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa0:	e002      	b.n	8001aa8 <LoopCopyDataInit>

08001aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aa6:	3304      	adds	r3, #4

08001aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aac:	d3f9      	bcc.n	8001aa2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aae:	4a0b      	ldr	r2, [pc, #44]	; (8001adc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ab0:	4c0b      	ldr	r4, [pc, #44]	; (8001ae0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab4:	e001      	b.n	8001aba <LoopFillZerobss>

08001ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab8:	3204      	adds	r2, #4

08001aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001abc:	d3fb      	bcc.n	8001ab6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001abe:	f7ff ffd7 	bl	8001a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f003 fa77 	bl	8004fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ac6:	f7fe fe11 	bl	80006ec <main>
  bx  lr    
 8001aca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001acc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001ad8:	08005988 	.word	0x08005988
  ldr r2, =_sbss
 8001adc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001ae0:	200004ac 	.word	0x200004ac

08001ae4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC_IRQHandler>
	...

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aec:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <HAL_Init+0x40>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0d      	ldr	r2, [pc, #52]	; (8001b28 <HAL_Init+0x40>)
 8001af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001af6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_Init+0x40>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_Init+0x40>)
 8001afe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b04:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a07      	ldr	r2, [pc, #28]	; (8001b28 <HAL_Init+0x40>)
 8001b0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b10:	2003      	movs	r0, #3
 8001b12:	f000 fba3 	bl	800225c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b16:	2000      	movs	r0, #0
 8001b18:	f000 f808 	bl	8001b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b1c:	f7ff fb6c 	bl	80011f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023c00 	.word	0x40023c00

08001b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <HAL_InitTick+0x54>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b12      	ldr	r3, [pc, #72]	; (8001b84 <HAL_InitTick+0x58>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fbad 	bl	80022aa <HAL_SYSTICK_Config>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00e      	b.n	8001b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b0f      	cmp	r3, #15
 8001b5e:	d80a      	bhi.n	8001b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b60:	2200      	movs	r2, #0
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f000 fb83 	bl	8002272 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b6c:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <HAL_InitTick+0x5c>)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e000      	b.n	8001b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000000 	.word	0x20000000
 8001b84:	20000008 	.word	0x20000008
 8001b88:	20000004 	.word	0x20000004

08001b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <HAL_IncTick+0x20>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	4b06      	ldr	r3, [pc, #24]	; (8001bb0 <HAL_IncTick+0x24>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	4a04      	ldr	r2, [pc, #16]	; (8001bb0 <HAL_IncTick+0x24>)
 8001b9e:	6013      	str	r3, [r2, #0]
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
 8001baa:	bf00      	nop
 8001bac:	20000008 	.word	0x20000008
 8001bb0:	20000494 	.word	0x20000494

08001bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb8:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <HAL_GetTick+0x14>)
 8001bba:	681b      	ldr	r3, [r3, #0]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	20000494 	.word	0x20000494

08001bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bd4:	f7ff ffee 	bl	8001bb4 <HAL_GetTick>
 8001bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001be4:	d005      	beq.n	8001bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001be6:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <HAL_Delay+0x44>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	461a      	mov	r2, r3
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bf2:	bf00      	nop
 8001bf4:	f7ff ffde 	bl	8001bb4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d8f7      	bhi.n	8001bf4 <HAL_Delay+0x28>
  {
  }
}
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000008 	.word	0x20000008

08001c14 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e033      	b.n	8001c92 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff fb08 	bl	8001248 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	f003 0310 	and.w	r3, r3, #16
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d118      	bne.n	8001c84 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c5a:	f023 0302 	bic.w	r3, r3, #2
 8001c5e:	f043 0202 	orr.w	r2, r3, #2
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f94a 	bl	8001f00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f023 0303 	bic.w	r3, r3, #3
 8001c7a:	f043 0201 	orr.w	r2, r3, #1
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
 8001c82:	e001      	b.n	8001c88 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d101      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x1c>
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	e113      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x244>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b09      	cmp	r3, #9
 8001cc6:	d925      	bls.n	8001d14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68d9      	ldr	r1, [r3, #12]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	b29b      	uxth	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	3b1e      	subs	r3, #30
 8001cde:	2207      	movs	r2, #7
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43da      	mvns	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	400a      	ands	r2, r1
 8001cec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68d9      	ldr	r1, [r3, #12]
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	4618      	mov	r0, r3
 8001d00:	4603      	mov	r3, r0
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4403      	add	r3, r0
 8001d06:	3b1e      	subs	r3, #30
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	e022      	b.n	8001d5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	6919      	ldr	r1, [r3, #16]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	4613      	mov	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	2207      	movs	r2, #7
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	400a      	ands	r2, r1
 8001d36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6919      	ldr	r1, [r3, #16]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	4618      	mov	r0, r3
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	4403      	add	r3, r0
 8001d50:	409a      	lsls	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d824      	bhi.n	8001dac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	3b05      	subs	r3, #5
 8001d74:	221f      	movs	r2, #31
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	400a      	ands	r2, r1
 8001d82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	4613      	mov	r3, r2
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	3b05      	subs	r3, #5
 8001d9e:	fa00 f203 	lsl.w	r2, r0, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	430a      	orrs	r2, r1
 8001da8:	635a      	str	r2, [r3, #52]	; 0x34
 8001daa:	e04c      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b0c      	cmp	r3, #12
 8001db2:	d824      	bhi.n	8001dfe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b23      	subs	r3, #35	; 0x23
 8001dc6:	221f      	movs	r2, #31
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	3b23      	subs	r3, #35	; 0x23
 8001df0:	fa00 f203 	lsl.w	r2, r0, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8001dfc:	e023      	b.n	8001e46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3b41      	subs	r3, #65	; 0x41
 8001e10:	221f      	movs	r2, #31
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	3b41      	subs	r3, #65	; 0x41
 8001e3a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e46:	4b29      	ldr	r3, [pc, #164]	; (8001eec <HAL_ADC_ConfigChannel+0x250>)
 8001e48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a28      	ldr	r2, [pc, #160]	; (8001ef0 <HAL_ADC_ConfigChannel+0x254>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d10f      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x1d8>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b12      	cmp	r3, #18
 8001e5a:	d10b      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <HAL_ADC_ConfigChannel+0x254>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d12b      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x23a>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a1c      	ldr	r2, [pc, #112]	; (8001ef4 <HAL_ADC_ConfigChannel+0x258>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d003      	beq.n	8001e90 <HAL_ADC_ConfigChannel+0x1f4>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b11      	cmp	r3, #17
 8001e8e:	d122      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <HAL_ADC_ConfigChannel+0x258>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d111      	bne.n	8001ed6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <HAL_ADC_ConfigChannel+0x25c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a11      	ldr	r2, [pc, #68]	; (8001efc <HAL_ADC_ConfigChannel+0x260>)
 8001eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ebc:	0c9a      	lsrs	r2, r3, #18
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ec8:	e002      	b.n	8001ed0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f9      	bne.n	8001eca <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	40012300 	.word	0x40012300
 8001ef0:	40012000 	.word	0x40012000
 8001ef4:	10000012 	.word	0x10000012
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	431bde83 	.word	0x431bde83

08001f00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f08:	4b79      	ldr	r3, [pc, #484]	; (80020f0 <ADC_Init+0x1f0>)
 8001f0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	431a      	orrs	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	6859      	ldr	r1, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	021a      	lsls	r2, r3, #8
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6859      	ldr	r1, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6899      	ldr	r1, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f92:	4a58      	ldr	r2, [pc, #352]	; (80020f4 <ADC_Init+0x1f4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d022      	beq.n	8001fde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	689a      	ldr	r2, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6899      	ldr	r1, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6899      	ldr	r1, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	e00f      	b.n	8001ffe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	689a      	ldr	r2, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ffc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 0202 	bic.w	r2, r2, #2
 800200c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6899      	ldr	r1, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	7e1b      	ldrb	r3, [r3, #24]
 8002018:	005a      	lsls	r2, r3, #1
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01b      	beq.n	8002064 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800203a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800204a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6859      	ldr	r1, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	3b01      	subs	r3, #1
 8002058:	035a      	lsls	r2, r3, #13
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	e007      	b.n	8002074 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	685a      	ldr	r2, [r3, #4]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002072:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	3b01      	subs	r3, #1
 8002090:	051a      	lsls	r2, r3, #20
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	430a      	orrs	r2, r1
 8002098:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6899      	ldr	r1, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020b6:	025a      	lsls	r2, r3, #9
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6899      	ldr	r1, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	029a      	lsls	r2, r3, #10
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	609a      	str	r2, [r3, #8]
}
 80020e4:	bf00      	nop
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr
 80020f0:	40012300 	.word	0x40012300
 80020f4:	0f000001 	.word	0x0f000001

080020f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800210a:	68db      	ldr	r3, [r3, #12]
 800210c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002114:	4013      	ands	r3, r2
 8002116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212a:	4a04      	ldr	r2, [pc, #16]	; (800213c <__NVIC_SetPriorityGrouping+0x44>)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	60d3      	str	r3, [r2, #12]
}
 8002130:	bf00      	nop
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002144:	4b04      	ldr	r3, [pc, #16]	; (8002158 <__NVIC_GetPriorityGrouping+0x18>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	0a1b      	lsrs	r3, r3, #8
 800214a:	f003 0307 	and.w	r3, r3, #7
}
 800214e:	4618      	mov	r0, r3
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	6039      	str	r1, [r7, #0]
 8002166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	2b00      	cmp	r3, #0
 800216e:	db0a      	blt.n	8002186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	490c      	ldr	r1, [pc, #48]	; (80021a8 <__NVIC_SetPriority+0x4c>)
 8002176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217a:	0112      	lsls	r2, r2, #4
 800217c:	b2d2      	uxtb	r2, r2
 800217e:	440b      	add	r3, r1
 8002180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002184:	e00a      	b.n	800219c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	b2da      	uxtb	r2, r3
 800218a:	4908      	ldr	r1, [pc, #32]	; (80021ac <__NVIC_SetPriority+0x50>)
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	3b04      	subs	r3, #4
 8002194:	0112      	lsls	r2, r2, #4
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	440b      	add	r3, r1
 800219a:	761a      	strb	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	e000e100 	.word	0xe000e100
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b089      	sub	sp, #36	; 0x24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f1c3 0307 	rsb	r3, r3, #7
 80021ca:	2b04      	cmp	r3, #4
 80021cc:	bf28      	it	cs
 80021ce:	2304      	movcs	r3, #4
 80021d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3304      	adds	r3, #4
 80021d6:	2b06      	cmp	r3, #6
 80021d8:	d902      	bls.n	80021e0 <NVIC_EncodePriority+0x30>
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	3b03      	subs	r3, #3
 80021de:	e000      	b.n	80021e2 <NVIC_EncodePriority+0x32>
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	f04f 32ff 	mov.w	r2, #4294967295
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43da      	mvns	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	401a      	ands	r2, r3
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021f8:	f04f 31ff 	mov.w	r1, #4294967295
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	43d9      	mvns	r1, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002208:	4313      	orrs	r3, r2
         );
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	; 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002228:	d301      	bcc.n	800222e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800222a:	2301      	movs	r3, #1
 800222c:	e00f      	b.n	800224e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800222e:	4a0a      	ldr	r2, [pc, #40]	; (8002258 <SysTick_Config+0x40>)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3b01      	subs	r3, #1
 8002234:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002236:	210f      	movs	r1, #15
 8002238:	f04f 30ff 	mov.w	r0, #4294967295
 800223c:	f7ff ff8e 	bl	800215c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002240:	4b05      	ldr	r3, [pc, #20]	; (8002258 <SysTick_Config+0x40>)
 8002242:	2200      	movs	r2, #0
 8002244:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002246:	4b04      	ldr	r3, [pc, #16]	; (8002258 <SysTick_Config+0x40>)
 8002248:	2207      	movs	r2, #7
 800224a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	e000e010 	.word	0xe000e010

0800225c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff47 	bl	80020f8 <__NVIC_SetPriorityGrouping>
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002272:	b580      	push	{r7, lr}
 8002274:	b086      	sub	sp, #24
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	60b9      	str	r1, [r7, #8]
 800227c:	607a      	str	r2, [r7, #4]
 800227e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002284:	f7ff ff5c 	bl	8002140 <__NVIC_GetPriorityGrouping>
 8002288:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	6978      	ldr	r0, [r7, #20]
 8002290:	f7ff ff8e 	bl	80021b0 <NVIC_EncodePriority>
 8002294:	4602      	mov	r2, r0
 8002296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800229a:	4611      	mov	r1, r2
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff5d 	bl	800215c <__NVIC_SetPriority>
}
 80022a2:	bf00      	nop
 80022a4:	3718      	adds	r7, #24
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffb0 	bl	8002218 <SysTick_Config>
 80022b8:	4603      	mov	r3, r0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	e165      	b.n	80025ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022e0:	2201      	movs	r2, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	f040 8154 	bne.w	80025a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d005      	beq.n	8002316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002312:	2b02      	cmp	r3, #2
 8002314:	d130      	bne.n	8002378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800234c:	2201      	movs	r2, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 0201 	and.w	r2, r3, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b03      	cmp	r3, #3
 8002382:	d017      	beq.n	80023b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d123      	bne.n	8002408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	08da      	lsrs	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3208      	adds	r2, #8
 80023c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	220f      	movs	r2, #15
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	08da      	lsrs	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3208      	adds	r2, #8
 8002402:	69b9      	ldr	r1, [r7, #24]
 8002404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0203 	and.w	r2, r3, #3
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80ae 	beq.w	80025a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b5d      	ldr	r3, [pc, #372]	; (80025c4 <HAL_GPIO_Init+0x300>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	4a5c      	ldr	r2, [pc, #368]	; (80025c4 <HAL_GPIO_Init+0x300>)
 8002454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002458:	6453      	str	r3, [r2, #68]	; 0x44
 800245a:	4b5a      	ldr	r3, [pc, #360]	; (80025c4 <HAL_GPIO_Init+0x300>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002466:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <HAL_GPIO_Init+0x304>)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	089b      	lsrs	r3, r3, #2
 800246c:	3302      	adds	r3, #2
 800246e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	220f      	movs	r2, #15
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4f      	ldr	r2, [pc, #316]	; (80025cc <HAL_GPIO_Init+0x308>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d025      	beq.n	80024de <HAL_GPIO_Init+0x21a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4e      	ldr	r2, [pc, #312]	; (80025d0 <HAL_GPIO_Init+0x30c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d01f      	beq.n	80024da <HAL_GPIO_Init+0x216>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4d      	ldr	r2, [pc, #308]	; (80025d4 <HAL_GPIO_Init+0x310>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d019      	beq.n	80024d6 <HAL_GPIO_Init+0x212>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4c      	ldr	r2, [pc, #304]	; (80025d8 <HAL_GPIO_Init+0x314>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_GPIO_Init+0x20e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4b      	ldr	r2, [pc, #300]	; (80025dc <HAL_GPIO_Init+0x318>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00d      	beq.n	80024ce <HAL_GPIO_Init+0x20a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4a      	ldr	r2, [pc, #296]	; (80025e0 <HAL_GPIO_Init+0x31c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <HAL_GPIO_Init+0x206>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a49      	ldr	r2, [pc, #292]	; (80025e4 <HAL_GPIO_Init+0x320>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d101      	bne.n	80024c6 <HAL_GPIO_Init+0x202>
 80024c2:	2306      	movs	r3, #6
 80024c4:	e00c      	b.n	80024e0 <HAL_GPIO_Init+0x21c>
 80024c6:	2307      	movs	r3, #7
 80024c8:	e00a      	b.n	80024e0 <HAL_GPIO_Init+0x21c>
 80024ca:	2305      	movs	r3, #5
 80024cc:	e008      	b.n	80024e0 <HAL_GPIO_Init+0x21c>
 80024ce:	2304      	movs	r3, #4
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x21c>
 80024d2:	2303      	movs	r3, #3
 80024d4:	e004      	b.n	80024e0 <HAL_GPIO_Init+0x21c>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_Init+0x21c>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_GPIO_Init+0x21c>
 80024de:	2300      	movs	r3, #0
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f002 0203 	and.w	r2, r2, #3
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	4093      	lsls	r3, r2
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f0:	4935      	ldr	r1, [pc, #212]	; (80025c8 <HAL_GPIO_Init+0x304>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fe:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_GPIO_Init+0x324>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002522:	4a31      	ldr	r2, [pc, #196]	; (80025e8 <HAL_GPIO_Init+0x324>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002528:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <HAL_GPIO_Init+0x324>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800254c:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <HAL_GPIO_Init+0x324>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002552:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_GPIO_Init+0x324>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002576:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <HAL_GPIO_Init+0x324>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_GPIO_Init+0x324>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025a0:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_GPIO_Init+0x324>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	f67f ae96 	bls.w	80022e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3724      	adds	r7, #36	; 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020c00 	.word	0x40020c00
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40021400 	.word	0x40021400
 80025e4:	40021800 	.word	0x40021800
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
 80025f8:	4613      	mov	r3, r2
 80025fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025fc:	787b      	ldrb	r3, [r7, #1]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002602:	887a      	ldrh	r2, [r7, #2]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002608:	e003      	b.n	8002612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800260a:	887b      	ldrh	r3, [r7, #2]
 800260c:	041a      	lsls	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	619a      	str	r2, [r3, #24]
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800261e:	b480      	push	{r7}
 8002620:	b085      	sub	sp, #20
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	460b      	mov	r3, r1
 8002628:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	695b      	ldr	r3, [r3, #20]
 800262e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002630:	887a      	ldrh	r2, [r7, #2]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	4013      	ands	r3, r2
 8002636:	041a      	lsls	r2, r3, #16
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	43d9      	mvns	r1, r3
 800263c:	887b      	ldrh	r3, [r7, #2]
 800263e:	400b      	ands	r3, r1
 8002640:	431a      	orrs	r2, r3
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	619a      	str	r2, [r3, #24]
}
 8002646:	bf00      	nop
 8002648:	3714      	adds	r7, #20
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e12b      	b.n	80028be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe fe28 	bl	80012d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2224      	movs	r2, #36	; 0x24
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b8:	f000 fa52 	bl	8002b60 <HAL_RCC_GetPCLK1Freq>
 80026bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	4a81      	ldr	r2, [pc, #516]	; (80028c8 <HAL_I2C_Init+0x274>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d807      	bhi.n	80026d8 <HAL_I2C_Init+0x84>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4a80      	ldr	r2, [pc, #512]	; (80028cc <HAL_I2C_Init+0x278>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	bf94      	ite	ls
 80026d0:	2301      	movls	r3, #1
 80026d2:	2300      	movhi	r3, #0
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	e006      	b.n	80026e6 <HAL_I2C_Init+0x92>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4a7d      	ldr	r2, [pc, #500]	; (80028d0 <HAL_I2C_Init+0x27c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	bf94      	ite	ls
 80026e0:	2301      	movls	r3, #1
 80026e2:	2300      	movhi	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0e7      	b.n	80028be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	4a78      	ldr	r2, [pc, #480]	; (80028d4 <HAL_I2C_Init+0x280>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0c9b      	lsrs	r3, r3, #18
 80026f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68ba      	ldr	r2, [r7, #8]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	4a6a      	ldr	r2, [pc, #424]	; (80028c8 <HAL_I2C_Init+0x274>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d802      	bhi.n	8002728 <HAL_I2C_Init+0xd4>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	3301      	adds	r3, #1
 8002726:	e009      	b.n	800273c <HAL_I2C_Init+0xe8>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	4a69      	ldr	r2, [pc, #420]	; (80028d8 <HAL_I2C_Init+0x284>)
 8002734:	fba2 2303 	umull	r2, r3, r2, r3
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	3301      	adds	r3, #1
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6812      	ldr	r2, [r2, #0]
 8002740:	430b      	orrs	r3, r1
 8002742:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	69db      	ldr	r3, [r3, #28]
 800274a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800274e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	495c      	ldr	r1, [pc, #368]	; (80028c8 <HAL_I2C_Init+0x274>)
 8002758:	428b      	cmp	r3, r1
 800275a:	d819      	bhi.n	8002790 <HAL_I2C_Init+0x13c>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	1e59      	subs	r1, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	fbb1 f3f3 	udiv	r3, r1, r3
 800276a:	1c59      	adds	r1, r3, #1
 800276c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002770:	400b      	ands	r3, r1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00a      	beq.n	800278c <HAL_I2C_Init+0x138>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	1e59      	subs	r1, r3, #1
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	005b      	lsls	r3, r3, #1
 8002780:	fbb1 f3f3 	udiv	r3, r1, r3
 8002784:	3301      	adds	r3, #1
 8002786:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800278a:	e051      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 800278c:	2304      	movs	r3, #4
 800278e:	e04f      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d111      	bne.n	80027bc <HAL_I2C_Init+0x168>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	1e58      	subs	r0, r3, #1
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6859      	ldr	r1, [r3, #4]
 80027a0:	460b      	mov	r3, r1
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	440b      	add	r3, r1
 80027a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027aa:	3301      	adds	r3, #1
 80027ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	e012      	b.n	80027e2 <HAL_I2C_Init+0x18e>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	1e58      	subs	r0, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	460b      	mov	r3, r1
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	0099      	lsls	r1, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80027d2:	3301      	adds	r3, #1
 80027d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d8:	2b00      	cmp	r3, #0
 80027da:	bf0c      	ite	eq
 80027dc:	2301      	moveq	r3, #1
 80027de:	2300      	movne	r3, #0
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Init+0x196>
 80027e6:	2301      	movs	r3, #1
 80027e8:	e022      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10e      	bne.n	8002810 <HAL_I2C_Init+0x1bc>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	1e58      	subs	r0, r3, #1
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6859      	ldr	r1, [r3, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	440b      	add	r3, r1
 8002800:	fbb0 f3f3 	udiv	r3, r0, r3
 8002804:	3301      	adds	r3, #1
 8002806:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800280a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800280e:	e00f      	b.n	8002830 <HAL_I2C_Init+0x1dc>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	1e58      	subs	r0, r3, #1
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6859      	ldr	r1, [r3, #4]
 8002818:	460b      	mov	r3, r1
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	0099      	lsls	r1, r3, #2
 8002820:	440b      	add	r3, r1
 8002822:	fbb0 f3f3 	udiv	r3, r0, r3
 8002826:	3301      	adds	r3, #1
 8002828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	6809      	ldr	r1, [r1, #0]
 8002834:	4313      	orrs	r3, r2
 8002836:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69da      	ldr	r2, [r3, #28]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800285e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6911      	ldr	r1, [r2, #16]
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	68d2      	ldr	r2, [r2, #12]
 800286a:	4311      	orrs	r1, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6812      	ldr	r2, [r2, #0]
 8002870:	430b      	orrs	r3, r1
 8002872:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	695a      	ldr	r2, [r3, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2220      	movs	r2, #32
 80028aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	000186a0 	.word	0x000186a0
 80028cc:	001e847f 	.word	0x001e847f
 80028d0:	003d08ff 	.word	0x003d08ff
 80028d4:	431bde83 	.word	0x431bde83
 80028d8:	10624dd3 	.word	0x10624dd3

080028dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80028e6:	2300      	movs	r3, #0
 80028e8:	603b      	str	r3, [r7, #0]
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_PWREx_EnableOverDrive+0x90>)
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	4a1f      	ldr	r2, [pc, #124]	; (800296c <HAL_PWREx_EnableOverDrive+0x90>)
 80028f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f4:	6413      	str	r3, [r2, #64]	; 0x40
 80028f6:	4b1d      	ldr	r3, [pc, #116]	; (800296c <HAL_PWREx_EnableOverDrive+0x90>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fe:	603b      	str	r3, [r7, #0]
 8002900:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002902:	4b1b      	ldr	r3, [pc, #108]	; (8002970 <HAL_PWREx_EnableOverDrive+0x94>)
 8002904:	2201      	movs	r2, #1
 8002906:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002908:	f7ff f954 	bl	8001bb4 <HAL_GetTick>
 800290c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800290e:	e009      	b.n	8002924 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002910:	f7ff f950 	bl	8001bb4 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800291e:	d901      	bls.n	8002924 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002920:	2303      	movs	r3, #3
 8002922:	e01f      	b.n	8002964 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002924:	4b13      	ldr	r3, [pc, #76]	; (8002974 <HAL_PWREx_EnableOverDrive+0x98>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800292c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002930:	d1ee      	bne.n	8002910 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002934:	2201      	movs	r2, #1
 8002936:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002938:	f7ff f93c 	bl	8001bb4 <HAL_GetTick>
 800293c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800293e:	e009      	b.n	8002954 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002940:	f7ff f938 	bl	8001bb4 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800294e:	d901      	bls.n	8002954 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e007      	b.n	8002964 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002954:	4b07      	ldr	r3, [pc, #28]	; (8002974 <HAL_PWREx_EnableOverDrive+0x98>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002960:	d1ee      	bne.n	8002940 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	40023800 	.word	0x40023800
 8002970:	420e0040 	.word	0x420e0040
 8002974:	40007000 	.word	0x40007000
 8002978:	420e0044 	.word	0x420e0044

0800297c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d101      	bne.n	8002990 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e0cc      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002990:	4b68      	ldr	r3, [pc, #416]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 030f 	and.w	r3, r3, #15
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d90c      	bls.n	80029b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b65      	ldr	r3, [pc, #404]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b63      	ldr	r3, [pc, #396]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	683a      	ldr	r2, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d001      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0b8      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d020      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029d0:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4a58      	ldr	r2, [pc, #352]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0308 	and.w	r3, r3, #8
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029e8:	4b53      	ldr	r3, [pc, #332]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	4a52      	ldr	r2, [pc, #328]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029f4:	4b50      	ldr	r3, [pc, #320]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	494d      	ldr	r1, [pc, #308]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d044      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d107      	bne.n	8002a2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b47      	ldr	r3, [pc, #284]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d119      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e07f      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d003      	beq.n	8002a3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a36:	2b03      	cmp	r3, #3
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a3a:	4b3f      	ldr	r3, [pc, #252]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d109      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e06f      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4a:	4b3b      	ldr	r3, [pc, #236]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e067      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a5a:	4b37      	ldr	r3, [pc, #220]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f023 0203 	bic.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	4934      	ldr	r1, [pc, #208]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a6c:	f7ff f8a2 	bl	8001bb4 <HAL_GetTick>
 8002a70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	e00a      	b.n	8002a8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a74:	f7ff f89e 	bl	8001bb4 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e04f      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 020c 	and.w	r2, r3, #12
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d1eb      	bne.n	8002a74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b25      	ldr	r3, [pc, #148]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d20c      	bcs.n	8002ac4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b22      	ldr	r3, [pc, #136]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab2:	4b20      	ldr	r3, [pc, #128]	; (8002b34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e032      	b.n	8002b2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0304 	and.w	r3, r3, #4
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad0:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4916      	ldr	r1, [pc, #88]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d009      	beq.n	8002b02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	490e      	ldr	r1, [pc, #56]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b02:	f000 f855 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002b06:	4602      	mov	r2, r0
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	490a      	ldr	r1, [pc, #40]	; (8002b3c <HAL_RCC_ClockConfig+0x1c0>)
 8002b14:	5ccb      	ldrb	r3, [r1, r3]
 8002b16:	fa22 f303 	lsr.w	r3, r2, r3
 8002b1a:	4a09      	ldr	r2, [pc, #36]	; (8002b40 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b1e:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_RCC_ClockConfig+0x1c8>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff f802 	bl	8001b2c <HAL_InitTick>

  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40023c00 	.word	0x40023c00
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	0800592c 	.word	0x0800592c
 8002b40:	20000000 	.word	0x20000000
 8002b44:	20000004 	.word	0x20000004

08002b48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b4c:	4b03      	ldr	r3, [pc, #12]	; (8002b5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	20000000 	.word	0x20000000

08002b60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b64:	f7ff fff0 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	0a9b      	lsrs	r3, r3, #10
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	4903      	ldr	r1, [pc, #12]	; (8002b84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b76:	5ccb      	ldrb	r3, [r1, r3]
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40023800 	.word	0x40023800
 8002b84:	0800593c 	.word	0x0800593c

08002b88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b8c:	f7ff ffdc 	bl	8002b48 <HAL_RCC_GetHCLKFreq>
 8002b90:	4602      	mov	r2, r0
 8002b92:	4b05      	ldr	r3, [pc, #20]	; (8002ba8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	0b5b      	lsrs	r3, r3, #13
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	4903      	ldr	r1, [pc, #12]	; (8002bac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b9e:	5ccb      	ldrb	r3, [r1, r3]
 8002ba0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40023800 	.word	0x40023800
 8002bac:	0800593c 	.word	0x0800593c

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb4:	b0ae      	sub	sp, #184	; 0xb8
 8002bb6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd6:	4bcb      	ldr	r3, [pc, #812]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 030c 	and.w	r3, r3, #12
 8002bde:	2b0c      	cmp	r3, #12
 8002be0:	f200 8206 	bhi.w	8002ff0 <HAL_RCC_GetSysClockFreq+0x440>
 8002be4:	a201      	add	r2, pc, #4	; (adr r2, 8002bec <HAL_RCC_GetSysClockFreq+0x3c>)
 8002be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bea:	bf00      	nop
 8002bec:	08002c21 	.word	0x08002c21
 8002bf0:	08002ff1 	.word	0x08002ff1
 8002bf4:	08002ff1 	.word	0x08002ff1
 8002bf8:	08002ff1 	.word	0x08002ff1
 8002bfc:	08002c29 	.word	0x08002c29
 8002c00:	08002ff1 	.word	0x08002ff1
 8002c04:	08002ff1 	.word	0x08002ff1
 8002c08:	08002ff1 	.word	0x08002ff1
 8002c0c:	08002c31 	.word	0x08002c31
 8002c10:	08002ff1 	.word	0x08002ff1
 8002c14:	08002ff1 	.word	0x08002ff1
 8002c18:	08002ff1 	.word	0x08002ff1
 8002c1c:	08002e21 	.word	0x08002e21
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4bb9      	ldr	r3, [pc, #740]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x358>)
 8002c22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002c26:	e1e7      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c28:	4bb8      	ldr	r3, [pc, #736]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002c2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002c2e:	e1e3      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c30:	4bb4      	ldr	r3, [pc, #720]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c3c:	4bb1      	ldr	r3, [pc, #708]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d071      	beq.n	8002d2c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c48:	4bae      	ldr	r3, [pc, #696]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	099b      	lsrs	r3, r3, #6
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002c54:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002c58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002c64:	2300      	movs	r3, #0
 8002c66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002c6a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002c6e:	4622      	mov	r2, r4
 8002c70:	462b      	mov	r3, r5
 8002c72:	f04f 0000 	mov.w	r0, #0
 8002c76:	f04f 0100 	mov.w	r1, #0
 8002c7a:	0159      	lsls	r1, r3, #5
 8002c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c80:	0150      	lsls	r0, r2, #5
 8002c82:	4602      	mov	r2, r0
 8002c84:	460b      	mov	r3, r1
 8002c86:	4621      	mov	r1, r4
 8002c88:	1a51      	subs	r1, r2, r1
 8002c8a:	6439      	str	r1, [r7, #64]	; 0x40
 8002c8c:	4629      	mov	r1, r5
 8002c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c92:	647b      	str	r3, [r7, #68]	; 0x44
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002ca0:	4649      	mov	r1, r9
 8002ca2:	018b      	lsls	r3, r1, #6
 8002ca4:	4641      	mov	r1, r8
 8002ca6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002caa:	4641      	mov	r1, r8
 8002cac:	018a      	lsls	r2, r1, #6
 8002cae:	4641      	mov	r1, r8
 8002cb0:	1a51      	subs	r1, r2, r1
 8002cb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8002cb4:	4649      	mov	r1, r9
 8002cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cbc:	f04f 0200 	mov.w	r2, #0
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002cc8:	4649      	mov	r1, r9
 8002cca:	00cb      	lsls	r3, r1, #3
 8002ccc:	4641      	mov	r1, r8
 8002cce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cd2:	4641      	mov	r1, r8
 8002cd4:	00ca      	lsls	r2, r1, #3
 8002cd6:	4610      	mov	r0, r2
 8002cd8:	4619      	mov	r1, r3
 8002cda:	4603      	mov	r3, r0
 8002cdc:	4622      	mov	r2, r4
 8002cde:	189b      	adds	r3, r3, r2
 8002ce0:	633b      	str	r3, [r7, #48]	; 0x30
 8002ce2:	462b      	mov	r3, r5
 8002ce4:	460a      	mov	r2, r1
 8002ce6:	eb42 0303 	adc.w	r3, r2, r3
 8002cea:	637b      	str	r3, [r7, #52]	; 0x34
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	024b      	lsls	r3, r1, #9
 8002cfc:	4621      	mov	r1, r4
 8002cfe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d02:	4621      	mov	r1, r4
 8002d04:	024a      	lsls	r2, r1, #9
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002d14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002d18:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002d1c:	f7fd fae0 	bl	80002e0 <__aeabi_uldivmod>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	4613      	mov	r3, r2
 8002d26:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d2a:	e067      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d2c:	4b75      	ldr	r3, [pc, #468]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	099b      	lsrs	r3, r3, #6
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002d38:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002d3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d44:	67bb      	str	r3, [r7, #120]	; 0x78
 8002d46:	2300      	movs	r3, #0
 8002d48:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002d4a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002d4e:	4622      	mov	r2, r4
 8002d50:	462b      	mov	r3, r5
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	0159      	lsls	r1, r3, #5
 8002d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d60:	0150      	lsls	r0, r2, #5
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4621      	mov	r1, r4
 8002d68:	1a51      	subs	r1, r2, r1
 8002d6a:	62b9      	str	r1, [r7, #40]	; 0x28
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002d80:	4649      	mov	r1, r9
 8002d82:	018b      	lsls	r3, r1, #6
 8002d84:	4641      	mov	r1, r8
 8002d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d8a:	4641      	mov	r1, r8
 8002d8c:	018a      	lsls	r2, r1, #6
 8002d8e:	4641      	mov	r1, r8
 8002d90:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d94:	4649      	mov	r1, r9
 8002d96:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002da6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002daa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002dae:	4692      	mov	sl, r2
 8002db0:	469b      	mov	fp, r3
 8002db2:	4623      	mov	r3, r4
 8002db4:	eb1a 0303 	adds.w	r3, sl, r3
 8002db8:	623b      	str	r3, [r7, #32]
 8002dba:	462b      	mov	r3, r5
 8002dbc:	eb4b 0303 	adc.w	r3, fp, r3
 8002dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002dce:	4629      	mov	r1, r5
 8002dd0:	028b      	lsls	r3, r1, #10
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dd8:	4621      	mov	r1, r4
 8002dda:	028a      	lsls	r2, r1, #10
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002de4:	2200      	movs	r2, #0
 8002de6:	673b      	str	r3, [r7, #112]	; 0x70
 8002de8:	677a      	str	r2, [r7, #116]	; 0x74
 8002dea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002dee:	f7fd fa77 	bl	80002e0 <__aeabi_uldivmod>
 8002df2:	4602      	mov	r2, r0
 8002df4:	460b      	mov	r3, r1
 8002df6:	4613      	mov	r3, r2
 8002df8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dfc:	4b41      	ldr	r3, [pc, #260]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	3301      	adds	r3, #1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002e12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002e1e:	e0eb      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e20:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e2c:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d06b      	beq.n	8002f10 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e38:	4b32      	ldr	r3, [pc, #200]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	099b      	lsrs	r3, r3, #6
 8002e3e:	2200      	movs	r2, #0
 8002e40:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e44:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e4a:	663b      	str	r3, [r7, #96]	; 0x60
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	667b      	str	r3, [r7, #100]	; 0x64
 8002e50:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002e54:	4622      	mov	r2, r4
 8002e56:	462b      	mov	r3, r5
 8002e58:	f04f 0000 	mov.w	r0, #0
 8002e5c:	f04f 0100 	mov.w	r1, #0
 8002e60:	0159      	lsls	r1, r3, #5
 8002e62:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e66:	0150      	lsls	r0, r2, #5
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	1a51      	subs	r1, r2, r1
 8002e70:	61b9      	str	r1, [r7, #24]
 8002e72:	4629      	mov	r1, r5
 8002e74:	eb63 0301 	sbc.w	r3, r3, r1
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e86:	4659      	mov	r1, fp
 8002e88:	018b      	lsls	r3, r1, #6
 8002e8a:	4651      	mov	r1, sl
 8002e8c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e90:	4651      	mov	r1, sl
 8002e92:	018a      	lsls	r2, r1, #6
 8002e94:	4651      	mov	r1, sl
 8002e96:	ebb2 0801 	subs.w	r8, r2, r1
 8002e9a:	4659      	mov	r1, fp
 8002e9c:	eb63 0901 	sbc.w	r9, r3, r1
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	f04f 0300 	mov.w	r3, #0
 8002ea8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002eb4:	4690      	mov	r8, r2
 8002eb6:	4699      	mov	r9, r3
 8002eb8:	4623      	mov	r3, r4
 8002eba:	eb18 0303 	adds.w	r3, r8, r3
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	462b      	mov	r3, r5
 8002ec2:	eb49 0303 	adc.w	r3, r9, r3
 8002ec6:	617b      	str	r3, [r7, #20]
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002ed4:	4629      	mov	r1, r5
 8002ed6:	024b      	lsls	r3, r1, #9
 8002ed8:	4621      	mov	r1, r4
 8002eda:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ede:	4621      	mov	r1, r4
 8002ee0:	024a      	lsls	r2, r1, #9
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002eea:	2200      	movs	r2, #0
 8002eec:	65bb      	str	r3, [r7, #88]	; 0x58
 8002eee:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002ef0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002ef4:	f7fd f9f4 	bl	80002e0 <__aeabi_uldivmod>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4613      	mov	r3, r2
 8002efe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f02:	e065      	b.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x420>
 8002f04:	40023800 	.word	0x40023800
 8002f08:	00f42400 	.word	0x00f42400
 8002f0c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f10:	4b3d      	ldr	r3, [pc, #244]	; (8003008 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	099b      	lsrs	r3, r3, #6
 8002f16:	2200      	movs	r2, #0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	4611      	mov	r1, r2
 8002f1c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f20:	653b      	str	r3, [r7, #80]	; 0x50
 8002f22:	2300      	movs	r3, #0
 8002f24:	657b      	str	r3, [r7, #84]	; 0x54
 8002f26:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002f2a:	4642      	mov	r2, r8
 8002f2c:	464b      	mov	r3, r9
 8002f2e:	f04f 0000 	mov.w	r0, #0
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	0159      	lsls	r1, r3, #5
 8002f38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f3c:	0150      	lsls	r0, r2, #5
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4641      	mov	r1, r8
 8002f44:	1a51      	subs	r1, r2, r1
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	4649      	mov	r1, r9
 8002f4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	f04f 0300 	mov.w	r3, #0
 8002f58:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002f5c:	4659      	mov	r1, fp
 8002f5e:	018b      	lsls	r3, r1, #6
 8002f60:	4651      	mov	r1, sl
 8002f62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f66:	4651      	mov	r1, sl
 8002f68:	018a      	lsls	r2, r1, #6
 8002f6a:	4651      	mov	r1, sl
 8002f6c:	1a54      	subs	r4, r2, r1
 8002f6e:	4659      	mov	r1, fp
 8002f70:	eb63 0501 	sbc.w	r5, r3, r1
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	00eb      	lsls	r3, r5, #3
 8002f7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f82:	00e2      	lsls	r2, r4, #3
 8002f84:	4614      	mov	r4, r2
 8002f86:	461d      	mov	r5, r3
 8002f88:	4643      	mov	r3, r8
 8002f8a:	18e3      	adds	r3, r4, r3
 8002f8c:	603b      	str	r3, [r7, #0]
 8002f8e:	464b      	mov	r3, r9
 8002f90:	eb45 0303 	adc.w	r3, r5, r3
 8002f94:	607b      	str	r3, [r7, #4]
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	028b      	lsls	r3, r1, #10
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fac:	4621      	mov	r1, r4
 8002fae:	028a      	lsls	r2, r1, #10
 8002fb0:	4610      	mov	r0, r2
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fb8:	2200      	movs	r2, #0
 8002fba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fbc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002fbe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fc2:	f7fd f98d 	bl	80002e0 <__aeabi_uldivmod>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4613      	mov	r3, r2
 8002fcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002fd0:	4b0d      	ldr	r3, [pc, #52]	; (8003008 <HAL_RCC_GetSysClockFreq+0x458>)
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	0f1b      	lsrs	r3, r3, #28
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002fde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002fe2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002fee:	e003      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ff2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ff6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ff8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	37b8      	adds	r7, #184	; 0xb8
 8003000:	46bd      	mov	sp, r7
 8003002:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003006:	bf00      	nop
 8003008:	40023800 	.word	0x40023800
 800300c:	00f42400 	.word	0x00f42400

08003010 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e28d      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 8083 	beq.w	8003136 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003030:	4b94      	ldr	r3, [pc, #592]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b04      	cmp	r3, #4
 800303a:	d019      	beq.n	8003070 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800303c:	4b91      	ldr	r3, [pc, #580]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003044:	2b08      	cmp	r3, #8
 8003046:	d106      	bne.n	8003056 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003048:	4b8e      	ldr	r3, [pc, #568]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003050:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003054:	d00c      	beq.n	8003070 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003056:	4b8b      	ldr	r3, [pc, #556]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d112      	bne.n	8003088 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003062:	4b88      	ldr	r3, [pc, #544]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800306a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800306e:	d10b      	bne.n	8003088 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003070:	4b84      	ldr	r3, [pc, #528]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d05b      	beq.n	8003134 <HAL_RCC_OscConfig+0x124>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d157      	bne.n	8003134 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e25a      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003090:	d106      	bne.n	80030a0 <HAL_RCC_OscConfig+0x90>
 8003092:	4b7c      	ldr	r3, [pc, #496]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a7b      	ldr	r2, [pc, #492]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003098:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	e01d      	b.n	80030dc <HAL_RCC_OscConfig+0xcc>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030a8:	d10c      	bne.n	80030c4 <HAL_RCC_OscConfig+0xb4>
 80030aa:	4b76      	ldr	r3, [pc, #472]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a75      	ldr	r2, [pc, #468]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 80030b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030b4:	6013      	str	r3, [r2, #0]
 80030b6:	4b73      	ldr	r3, [pc, #460]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a72      	ldr	r2, [pc, #456]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e00b      	b.n	80030dc <HAL_RCC_OscConfig+0xcc>
 80030c4:	4b6f      	ldr	r3, [pc, #444]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a6e      	ldr	r2, [pc, #440]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 80030ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	4b6c      	ldr	r3, [pc, #432]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a6b      	ldr	r2, [pc, #428]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 80030d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d013      	beq.n	800310c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e4:	f7fe fd66 	bl	8001bb4 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030ec:	f7fe fd62 	bl	8001bb4 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b64      	cmp	r3, #100	; 0x64
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e21f      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030fe:	4b61      	ldr	r3, [pc, #388]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d0f0      	beq.n	80030ec <HAL_RCC_OscConfig+0xdc>
 800310a:	e014      	b.n	8003136 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800310c:	f7fe fd52 	bl	8001bb4 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003114:	f7fe fd4e 	bl	8001bb4 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b64      	cmp	r3, #100	; 0x64
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e20b      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003126:	4b57      	ldr	r3, [pc, #348]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1f0      	bne.n	8003114 <HAL_RCC_OscConfig+0x104>
 8003132:	e000      	b.n	8003136 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d06f      	beq.n	8003222 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003142:	4b50      	ldr	r3, [pc, #320]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	f003 030c 	and.w	r3, r3, #12
 800314a:	2b00      	cmp	r3, #0
 800314c:	d017      	beq.n	800317e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800314e:	4b4d      	ldr	r3, [pc, #308]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003156:	2b08      	cmp	r3, #8
 8003158:	d105      	bne.n	8003166 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800315a:	4b4a      	ldr	r3, [pc, #296]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00b      	beq.n	800317e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003166:	4b47      	ldr	r3, [pc, #284]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800316e:	2b0c      	cmp	r3, #12
 8003170:	d11c      	bne.n	80031ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003172:	4b44      	ldr	r3, [pc, #272]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d116      	bne.n	80031ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800317e:	4b41      	ldr	r3, [pc, #260]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_RCC_OscConfig+0x186>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b01      	cmp	r3, #1
 8003190:	d001      	beq.n	8003196 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e1d3      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003196:	4b3b      	ldr	r3, [pc, #236]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4937      	ldr	r1, [pc, #220]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031aa:	e03a      	b.n	8003222 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d020      	beq.n	80031f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b4:	4b34      	ldr	r3, [pc, #208]	; (8003288 <HAL_RCC_OscConfig+0x278>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ba:	f7fe fcfb 	bl	8001bb4 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c2:	f7fe fcf7 	bl	8001bb4 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e1b4      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d4:	4b2b      	ldr	r3, [pc, #172]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e0:	4b28      	ldr	r3, [pc, #160]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	4925      	ldr	r1, [pc, #148]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]
 80031f4:	e015      	b.n	8003222 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f6:	4b24      	ldr	r3, [pc, #144]	; (8003288 <HAL_RCC_OscConfig+0x278>)
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031fc:	f7fe fcda 	bl	8001bb4 <HAL_GetTick>
 8003200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003204:	f7fe fcd6 	bl	8001bb4 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e193      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003216:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d1f0      	bne.n	8003204 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0308 	and.w	r3, r3, #8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d036      	beq.n	800329c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d016      	beq.n	8003264 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_RCC_OscConfig+0x27c>)
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7fe fcba 	bl	8001bb4 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003244:	f7fe fcb6 	bl	8001bb4 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e173      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003256:	4b0b      	ldr	r3, [pc, #44]	; (8003284 <HAL_RCC_OscConfig+0x274>)
 8003258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x234>
 8003262:	e01b      	b.n	800329c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003264:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_RCC_OscConfig+0x27c>)
 8003266:	2200      	movs	r2, #0
 8003268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326a:	f7fe fca3 	bl	8001bb4 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003270:	e00e      	b.n	8003290 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003272:	f7fe fc9f 	bl	8001bb4 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d907      	bls.n	8003290 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e15c      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
 8003284:	40023800 	.word	0x40023800
 8003288:	42470000 	.word	0x42470000
 800328c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003290:	4b8a      	ldr	r3, [pc, #552]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d1ea      	bne.n	8003272 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0304 	and.w	r3, r3, #4
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 8097 	beq.w	80033d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032aa:	2300      	movs	r3, #0
 80032ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ae:	4b83      	ldr	r3, [pc, #524]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d10f      	bne.n	80032da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60bb      	str	r3, [r7, #8]
 80032be:	4b7f      	ldr	r3, [pc, #508]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a7e      	ldr	r2, [pc, #504]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80032c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b7c      	ldr	r3, [pc, #496]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032d6:	2301      	movs	r3, #1
 80032d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032da:	4b79      	ldr	r3, [pc, #484]	; (80034c0 <HAL_RCC_OscConfig+0x4b0>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d118      	bne.n	8003318 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032e6:	4b76      	ldr	r3, [pc, #472]	; (80034c0 <HAL_RCC_OscConfig+0x4b0>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a75      	ldr	r2, [pc, #468]	; (80034c0 <HAL_RCC_OscConfig+0x4b0>)
 80032ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032f2:	f7fe fc5f 	bl	8001bb4 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032fa:	f7fe fc5b 	bl	8001bb4 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e118      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330c:	4b6c      	ldr	r3, [pc, #432]	; (80034c0 <HAL_RCC_OscConfig+0x4b0>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d106      	bne.n	800332e <HAL_RCC_OscConfig+0x31e>
 8003320:	4b66      	ldr	r3, [pc, #408]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	4a65      	ldr	r2, [pc, #404]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6713      	str	r3, [r2, #112]	; 0x70
 800332c:	e01c      	b.n	8003368 <HAL_RCC_OscConfig+0x358>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	2b05      	cmp	r3, #5
 8003334:	d10c      	bne.n	8003350 <HAL_RCC_OscConfig+0x340>
 8003336:	4b61      	ldr	r3, [pc, #388]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333a:	4a60      	ldr	r2, [pc, #384]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 800333c:	f043 0304 	orr.w	r3, r3, #4
 8003340:	6713      	str	r3, [r2, #112]	; 0x70
 8003342:	4b5e      	ldr	r3, [pc, #376]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	4a5d      	ldr	r2, [pc, #372]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003348:	f043 0301 	orr.w	r3, r3, #1
 800334c:	6713      	str	r3, [r2, #112]	; 0x70
 800334e:	e00b      	b.n	8003368 <HAL_RCC_OscConfig+0x358>
 8003350:	4b5a      	ldr	r3, [pc, #360]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	4a59      	ldr	r2, [pc, #356]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003356:	f023 0301 	bic.w	r3, r3, #1
 800335a:	6713      	str	r3, [r2, #112]	; 0x70
 800335c:	4b57      	ldr	r3, [pc, #348]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	4a56      	ldr	r2, [pc, #344]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003362:	f023 0304 	bic.w	r3, r3, #4
 8003366:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d015      	beq.n	800339c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003370:	f7fe fc20 	bl	8001bb4 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003376:	e00a      	b.n	800338e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003378:	f7fe fc1c 	bl	8001bb4 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f241 3288 	movw	r2, #5000	; 0x1388
 8003386:	4293      	cmp	r3, r2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e0d7      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338e:	4b4b      	ldr	r3, [pc, #300]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0ee      	beq.n	8003378 <HAL_RCC_OscConfig+0x368>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fe fc0a 	bl	8001bb4 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a2:	e00a      	b.n	80033ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033a4:	f7fe fc06 	bl	8001bb4 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e0c1      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ba:	4b40      	ldr	r3, [pc, #256]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80033bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033be:	f003 0302 	and.w	r3, r3, #2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1ee      	bne.n	80033a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d105      	bne.n	80033d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033cc:	4b3b      	ldr	r3, [pc, #236]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	4a3a      	ldr	r2, [pc, #232]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80033d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	f000 80ad 	beq.w	800353c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033e2:	4b36      	ldr	r3, [pc, #216]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	f003 030c 	and.w	r3, r3, #12
 80033ea:	2b08      	cmp	r3, #8
 80033ec:	d060      	beq.n	80034b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d145      	bne.n	8003482 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033f6:	4b33      	ldr	r3, [pc, #204]	; (80034c4 <HAL_RCC_OscConfig+0x4b4>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe fbda 	bl	8001bb4 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003404:	f7fe fbd6 	bl	8001bb4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e093      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003416:	4b29      	ldr	r3, [pc, #164]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69da      	ldr	r2, [r3, #28]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	019b      	lsls	r3, r3, #6
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	085b      	lsrs	r3, r3, #1
 800343a:	3b01      	subs	r3, #1
 800343c:	041b      	lsls	r3, r3, #16
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	061b      	lsls	r3, r3, #24
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344c:	071b      	lsls	r3, r3, #28
 800344e:	491b      	ldr	r1, [pc, #108]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003450:	4313      	orrs	r3, r2
 8003452:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <HAL_RCC_OscConfig+0x4b4>)
 8003456:	2201      	movs	r2, #1
 8003458:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345a:	f7fe fbab 	bl	8001bb4 <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003462:	f7fe fba7 	bl	8001bb4 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e064      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003474:	4b11      	ldr	r3, [pc, #68]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f0      	beq.n	8003462 <HAL_RCC_OscConfig+0x452>
 8003480:	e05c      	b.n	800353c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003482:	4b10      	ldr	r3, [pc, #64]	; (80034c4 <HAL_RCC_OscConfig+0x4b4>)
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003488:	f7fe fb94 	bl	8001bb4 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003490:	f7fe fb90 	bl	8001bb4 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e04d      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_RCC_OscConfig+0x4ac>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f0      	bne.n	8003490 <HAL_RCC_OscConfig+0x480>
 80034ae:	e045      	b.n	800353c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d107      	bne.n	80034c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e040      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
 80034bc:	40023800 	.word	0x40023800
 80034c0:	40007000 	.word	0x40007000
 80034c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034c8:	4b1f      	ldr	r3, [pc, #124]	; (8003548 <HAL_RCC_OscConfig+0x538>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	699b      	ldr	r3, [r3, #24]
 80034d2:	2b01      	cmp	r3, #1
 80034d4:	d030      	beq.n	8003538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d129      	bne.n	8003538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d122      	bne.n	8003538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034f8:	4013      	ands	r3, r2
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80034fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003500:	4293      	cmp	r3, r2
 8003502:	d119      	bne.n	8003538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350e:	085b      	lsrs	r3, r3, #1
 8003510:	3b01      	subs	r3, #1
 8003512:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003514:	429a      	cmp	r2, r3
 8003516:	d10f      	bne.n	8003538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003522:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d107      	bne.n	8003538 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d001      	beq.n	800353c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3718      	adds	r7, #24
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800

0800354c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e07b      	b.n	8003656 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d108      	bne.n	8003578 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800356e:	d009      	beq.n	8003584 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	61da      	str	r2, [r3, #28]
 8003576:	e005      	b.n	8003584 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2200      	movs	r2, #0
 800357c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d106      	bne.n	80035a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7fd ff36 	bl	8001410 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80035cc:	431a      	orrs	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	691b      	ldr	r3, [r3, #16]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	431a      	orrs	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	431a      	orrs	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a1b      	ldr	r3, [r3, #32]
 8003604:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003608:	ea42 0103 	orr.w	r1, r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	0c1b      	lsrs	r3, r3, #16
 8003622:	f003 0104 	and.w	r1, r3, #4
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362a:	f003 0210 	and.w	r2, r3, #16
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	69da      	ldr	r2, [r3, #28]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003644:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b088      	sub	sp, #32
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003678:	2b01      	cmp	r3, #1
 800367a:	d101      	bne.n	8003680 <HAL_SPI_Transmit+0x22>
 800367c:	2302      	movs	r3, #2
 800367e:	e126      	b.n	80038ce <HAL_SPI_Transmit+0x270>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003688:	f7fe fa94 	bl	8001bb4 <HAL_GetTick>
 800368c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	d002      	beq.n	80036a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800369e:	2302      	movs	r3, #2
 80036a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036a2:	e10b      	b.n	80038bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <HAL_SPI_Transmit+0x52>
 80036aa:	88fb      	ldrh	r3, [r7, #6]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d102      	bne.n	80036b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80036b4:	e102      	b.n	80038bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2203      	movs	r2, #3
 80036ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	88fa      	ldrh	r2, [r7, #6]
 80036ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	88fa      	ldrh	r2, [r7, #6]
 80036d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2200      	movs	r2, #0
 80036e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036fc:	d10f      	bne.n	800371e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800370c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800371c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	2b40      	cmp	r3, #64	; 0x40
 800372a:	d007      	beq.n	800373c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800373a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003744:	d14b      	bne.n	80037de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d002      	beq.n	8003754 <HAL_SPI_Transmit+0xf6>
 800374e:	8afb      	ldrh	r3, [r7, #22]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d13e      	bne.n	80037d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	881a      	ldrh	r2, [r3, #0]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	1c9a      	adds	r2, r3, #2
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003778:	e02b      	b.n	80037d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b02      	cmp	r3, #2
 8003786:	d112      	bne.n	80037ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	881a      	ldrh	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003798:	1c9a      	adds	r2, r3, #2
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80037ac:	e011      	b.n	80037d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037ae:	f7fe fa01 	bl	8001bb4 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d803      	bhi.n	80037c6 <HAL_SPI_Transmit+0x168>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c4:	d102      	bne.n	80037cc <HAL_SPI_Transmit+0x16e>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d102      	bne.n	80037d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037d0:	e074      	b.n	80038bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1ce      	bne.n	800377a <HAL_SPI_Transmit+0x11c>
 80037dc:	e04c      	b.n	8003878 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_SPI_Transmit+0x18e>
 80037e6:	8afb      	ldrh	r3, [r7, #22]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d140      	bne.n	800386e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	330c      	adds	r3, #12
 80037f6:	7812      	ldrb	r2, [r2, #0]
 80037f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	1c5a      	adds	r2, r3, #1
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003808:	b29b      	uxth	r3, r3
 800380a:	3b01      	subs	r3, #1
 800380c:	b29a      	uxth	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003812:	e02c      	b.n	800386e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b02      	cmp	r3, #2
 8003820:	d113      	bne.n	800384a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	330c      	adds	r3, #12
 800382c:	7812      	ldrb	r2, [r2, #0]
 800382e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	86da      	strh	r2, [r3, #54]	; 0x36
 8003848:	e011      	b.n	800386e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800384a:	f7fe f9b3 	bl	8001bb4 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d803      	bhi.n	8003862 <HAL_SPI_Transmit+0x204>
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003860:	d102      	bne.n	8003868 <HAL_SPI_Transmit+0x20a>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d102      	bne.n	800386e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800386c:	e026      	b.n	80038bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003872:	b29b      	uxth	r3, r3
 8003874:	2b00      	cmp	r3, #0
 8003876:	d1cd      	bne.n	8003814 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	6839      	ldr	r1, [r7, #0]
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 fa55 	bl	8003d2c <SPI_EndRxTxTransaction>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003896:	2300      	movs	r3, #0
 8003898:	613b      	str	r3, [r7, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d002      	beq.n	80038ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e000      	b.n	80038bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80038ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b08c      	sub	sp, #48	; 0x30
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038e4:	2301      	movs	r3, #1
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_SPI_TransmitReceive+0x26>
 80038f8:	2302      	movs	r3, #2
 80038fa:	e18a      	b.n	8003c12 <HAL_SPI_TransmitReceive+0x33c>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003904:	f7fe f956 	bl	8001bb4 <HAL_GetTick>
 8003908:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003910:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800391a:	887b      	ldrh	r3, [r7, #2]
 800391c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800391e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003922:	2b01      	cmp	r3, #1
 8003924:	d00f      	beq.n	8003946 <HAL_SPI_TransmitReceive+0x70>
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800392c:	d107      	bne.n	800393e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <HAL_SPI_TransmitReceive+0x68>
 8003936:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800393a:	2b04      	cmp	r3, #4
 800393c:	d003      	beq.n	8003946 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800393e:	2302      	movs	r3, #2
 8003940:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003944:	e15b      	b.n	8003bfe <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_SPI_TransmitReceive+0x82>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d002      	beq.n	8003958 <HAL_SPI_TransmitReceive+0x82>
 8003952:	887b      	ldrh	r3, [r7, #2]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d103      	bne.n	8003960 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800395e:	e14e      	b.n	8003bfe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b04      	cmp	r3, #4
 800396a:	d003      	beq.n	8003974 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2205      	movs	r2, #5
 8003970:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	2200      	movs	r2, #0
 8003978:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	887a      	ldrh	r2, [r7, #2]
 8003984:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	887a      	ldrh	r2, [r7, #2]
 800398a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	887a      	ldrh	r2, [r7, #2]
 8003996:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	887a      	ldrh	r2, [r7, #2]
 800399c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b4:	2b40      	cmp	r3, #64	; 0x40
 80039b6:	d007      	beq.n	80039c8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80039c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039d0:	d178      	bne.n	8003ac4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d002      	beq.n	80039e0 <HAL_SPI_TransmitReceive+0x10a>
 80039da:	8b7b      	ldrh	r3, [r7, #26]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d166      	bne.n	8003aae <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	881a      	ldrh	r2, [r3, #0]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f0:	1c9a      	adds	r2, r3, #2
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	3b01      	subs	r3, #1
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a04:	e053      	b.n	8003aae <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b02      	cmp	r3, #2
 8003a12:	d11b      	bne.n	8003a4c <HAL_SPI_TransmitReceive+0x176>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d016      	beq.n	8003a4c <HAL_SPI_TransmitReceive+0x176>
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d113      	bne.n	8003a4c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a28:	881a      	ldrh	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a34:	1c9a      	adds	r2, r3, #2
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	3b01      	subs	r3, #1
 8003a42:	b29a      	uxth	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f003 0301 	and.w	r3, r3, #1
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d119      	bne.n	8003a8e <HAL_SPI_TransmitReceive+0x1b8>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d014      	beq.n	8003a8e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a6e:	b292      	uxth	r2, r2
 8003a70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a76:	1c9a      	adds	r2, r3, #2
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a8e:	f7fe f891 	bl	8001bb4 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d807      	bhi.n	8003aae <HAL_SPI_TransmitReceive+0x1d8>
 8003a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa4:	d003      	beq.n	8003aae <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003aac:	e0a7      	b.n	8003bfe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1a6      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x130>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1a1      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x130>
 8003ac2:	e07c      	b.n	8003bbe <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <HAL_SPI_TransmitReceive+0x1fc>
 8003acc:	8b7b      	ldrh	r3, [r7, #26]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d16b      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	330c      	adds	r3, #12
 8003adc:	7812      	ldrb	r2, [r2, #0]
 8003ade:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003af8:	e057      	b.n	8003baa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d11c      	bne.n	8003b42 <HAL_SPI_TransmitReceive+0x26c>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d017      	beq.n	8003b42 <HAL_SPI_TransmitReceive+0x26c>
 8003b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d114      	bne.n	8003b42 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	7812      	ldrb	r2, [r2, #0]
 8003b24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d119      	bne.n	8003b84 <HAL_SPI_TransmitReceive+0x2ae>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d014      	beq.n	8003b84 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b64:	b2d2      	uxtb	r2, r2
 8003b66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b80:	2301      	movs	r3, #1
 8003b82:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b84:	f7fe f816 	bl	8001bb4 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d803      	bhi.n	8003b9c <HAL_SPI_TransmitReceive+0x2c6>
 8003b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b9a:	d102      	bne.n	8003ba2 <HAL_SPI_TransmitReceive+0x2cc>
 8003b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d103      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ba8:	e029      	b.n	8003bfe <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bae:	b29b      	uxth	r3, r3
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1a2      	bne.n	8003afa <HAL_SPI_TransmitReceive+0x224>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d19d      	bne.n	8003afa <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f000 f8b2 	bl	8003d2c <SPI_EndRxTxTransaction>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d006      	beq.n	8003bdc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003bda:	e010      	b.n	8003bfe <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10b      	bne.n	8003bfc <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	e000      	b.n	8003bfe <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003bfc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003c0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3730      	adds	r7, #48	; 0x30
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
	...

08003c1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b088      	sub	sp, #32
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	603b      	str	r3, [r7, #0]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c2c:	f7fd ffc2 	bl	8001bb4 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	4413      	add	r3, r2
 8003c3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c3c:	f7fd ffba 	bl	8001bb4 <HAL_GetTick>
 8003c40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c42:	4b39      	ldr	r3, [pc, #228]	; (8003d28 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	015b      	lsls	r3, r3, #5
 8003c48:	0d1b      	lsrs	r3, r3, #20
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	fb02 f303 	mul.w	r3, r2, r3
 8003c50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c52:	e054      	b.n	8003cfe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5a:	d050      	beq.n	8003cfe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c5c:	f7fd ffaa 	bl	8001bb4 <HAL_GetTick>
 8003c60:	4602      	mov	r2, r0
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d902      	bls.n	8003c72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d13d      	bne.n	8003cee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c8a:	d111      	bne.n	8003cb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c94:	d004      	beq.n	8003ca0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9e:	d107      	bne.n	8003cb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cb8:	d10f      	bne.n	8003cda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2201      	movs	r2, #1
 8003cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e017      	b.n	8003d1e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2301      	moveq	r3, #1
 8003d10:	2300      	movne	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d19b      	bne.n	8003c54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3720      	adds	r7, #32
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000000 	.word	0x20000000

08003d2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d38:	4b1b      	ldr	r3, [pc, #108]	; (8003da8 <SPI_EndRxTxTransaction+0x7c>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a1b      	ldr	r2, [pc, #108]	; (8003dac <SPI_EndRxTxTransaction+0x80>)
 8003d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d42:	0d5b      	lsrs	r3, r3, #21
 8003d44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003d48:	fb02 f303 	mul.w	r3, r2, r3
 8003d4c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d56:	d112      	bne.n	8003d7e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	2180      	movs	r1, #128	; 0x80
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f7ff ff5a 	bl	8003c1c <SPI_WaitFlagStateUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d016      	beq.n	8003d9c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	f043 0220 	orr.w	r2, r3, #32
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e00f      	b.n	8003d9e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d00a      	beq.n	8003d9a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	3b01      	subs	r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d94:	2b80      	cmp	r3, #128	; 0x80
 8003d96:	d0f2      	beq.n	8003d7e <SPI_EndRxTxTransaction+0x52>
 8003d98:	e000      	b.n	8003d9c <SPI_EndRxTxTransaction+0x70>
        break;
 8003d9a:	bf00      	nop
  }

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3718      	adds	r7, #24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	20000000 	.word	0x20000000
 8003dac:	165e9f81 	.word	0x165e9f81

08003db0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e041      	b.n	8003e46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d106      	bne.n	8003ddc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7fd fcd2 	bl	8001780 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2202      	movs	r2, #2
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3304      	adds	r3, #4
 8003dec:	4619      	mov	r1, r3
 8003dee:	4610      	mov	r0, r2
 8003df0:	f000 f9e4 	bl	80041bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b082      	sub	sp, #8
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e041      	b.n	8003ee4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d106      	bne.n	8003e7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7fd fc35 	bl	80016e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3304      	adds	r3, #4
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	f000 f995 	bl	80041bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2201      	movs	r2, #1
 8003ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d101      	bne.n	8003f00 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e097      	b.n	8004030 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d106      	bne.n	8003f1a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7fd fb7d 	bl	8001614 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6812      	ldr	r2, [r2, #0]
 8003f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f30:	f023 0307 	bic.w	r3, r3, #7
 8003f34:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	3304      	adds	r3, #4
 8003f3e:	4619      	mov	r1, r3
 8003f40:	4610      	mov	r0, r2
 8003f42:	f000 f93b 	bl	80041bc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6e:	f023 0303 	bic.w	r3, r3, #3
 8003f72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689a      	ldr	r2, [r3, #8]
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	021b      	lsls	r3, r3, #8
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003f8c:	f023 030c 	bic.w	r3, r3, #12
 8003f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	011a      	lsls	r2, r3, #4
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	031b      	lsls	r3, r3, #12
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003fd2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	693a      	ldr	r2, [r7, #16]
 8003ff4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2201      	movs	r2, #1
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004044:	2300      	movs	r3, #0
 8004046:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800404e:	2b01      	cmp	r3, #1
 8004050:	d101      	bne.n	8004056 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004052:	2302      	movs	r3, #2
 8004054:	e0ae      	b.n	80041b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b0c      	cmp	r3, #12
 8004062:	f200 809f 	bhi.w	80041a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004066:	a201      	add	r2, pc, #4	; (adr r2, 800406c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406c:	080040a1 	.word	0x080040a1
 8004070:	080041a5 	.word	0x080041a5
 8004074:	080041a5 	.word	0x080041a5
 8004078:	080041a5 	.word	0x080041a5
 800407c:	080040e1 	.word	0x080040e1
 8004080:	080041a5 	.word	0x080041a5
 8004084:	080041a5 	.word	0x080041a5
 8004088:	080041a5 	.word	0x080041a5
 800408c:	08004123 	.word	0x08004123
 8004090:	080041a5 	.word	0x080041a5
 8004094:	080041a5 	.word	0x080041a5
 8004098:	080041a5 	.word	0x080041a5
 800409c:	08004163 	.word	0x08004163
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	68b9      	ldr	r1, [r7, #8]
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f928 	bl	80042fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	699a      	ldr	r2, [r3, #24]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f042 0208 	orr.w	r2, r2, #8
 80040ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699a      	ldr	r2, [r3, #24]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f022 0204 	bic.w	r2, r2, #4
 80040ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6999      	ldr	r1, [r3, #24]
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	691a      	ldr	r2, [r3, #16]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	619a      	str	r2, [r3, #24]
      break;
 80040de:	e064      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 f978 	bl	80043dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699a      	ldr	r2, [r3, #24]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	699a      	ldr	r2, [r3, #24]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6999      	ldr	r1, [r3, #24]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	021a      	lsls	r2, r3, #8
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	619a      	str	r2, [r3, #24]
      break;
 8004120:	e043      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 f9cd 	bl	80044c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f042 0208 	orr.w	r2, r2, #8
 800413c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69da      	ldr	r2, [r3, #28]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f022 0204 	bic.w	r2, r2, #4
 800414c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69d9      	ldr	r1, [r3, #28]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	691a      	ldr	r2, [r3, #16]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	430a      	orrs	r2, r1
 800415e:	61da      	str	r2, [r3, #28]
      break;
 8004160:	e023      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68b9      	ldr	r1, [r7, #8]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fa21 	bl	80045b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800417c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800418c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	69d9      	ldr	r1, [r3, #28]
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	021a      	lsls	r2, r3, #8
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	61da      	str	r2, [r3, #28]
      break;
 80041a2:	e002      	b.n	80041aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	75fb      	strb	r3, [r7, #23]
      break;
 80041a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80041b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3718      	adds	r7, #24
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a40      	ldr	r2, [pc, #256]	; (80042d0 <TIM_Base_SetConfig+0x114>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d013      	beq.n	80041fc <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041da:	d00f      	beq.n	80041fc <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3d      	ldr	r2, [pc, #244]	; (80042d4 <TIM_Base_SetConfig+0x118>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d00b      	beq.n	80041fc <TIM_Base_SetConfig+0x40>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a3c      	ldr	r2, [pc, #240]	; (80042d8 <TIM_Base_SetConfig+0x11c>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d007      	beq.n	80041fc <TIM_Base_SetConfig+0x40>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	4a3b      	ldr	r2, [pc, #236]	; (80042dc <TIM_Base_SetConfig+0x120>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d003      	beq.n	80041fc <TIM_Base_SetConfig+0x40>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a3a      	ldr	r2, [pc, #232]	; (80042e0 <TIM_Base_SetConfig+0x124>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d108      	bne.n	800420e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	4313      	orrs	r3, r2
 800420c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a2f      	ldr	r2, [pc, #188]	; (80042d0 <TIM_Base_SetConfig+0x114>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d02b      	beq.n	800426e <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800421c:	d027      	beq.n	800426e <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2c      	ldr	r2, [pc, #176]	; (80042d4 <TIM_Base_SetConfig+0x118>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d023      	beq.n	800426e <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2b      	ldr	r2, [pc, #172]	; (80042d8 <TIM_Base_SetConfig+0x11c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d01f      	beq.n	800426e <TIM_Base_SetConfig+0xb2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a2a      	ldr	r2, [pc, #168]	; (80042dc <TIM_Base_SetConfig+0x120>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d01b      	beq.n	800426e <TIM_Base_SetConfig+0xb2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a29      	ldr	r2, [pc, #164]	; (80042e0 <TIM_Base_SetConfig+0x124>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d017      	beq.n	800426e <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a28      	ldr	r2, [pc, #160]	; (80042e4 <TIM_Base_SetConfig+0x128>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a27      	ldr	r2, [pc, #156]	; (80042e8 <TIM_Base_SetConfig+0x12c>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d00f      	beq.n	800426e <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a26      	ldr	r2, [pc, #152]	; (80042ec <TIM_Base_SetConfig+0x130>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00b      	beq.n	800426e <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a25      	ldr	r2, [pc, #148]	; (80042f0 <TIM_Base_SetConfig+0x134>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d007      	beq.n	800426e <TIM_Base_SetConfig+0xb2>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a24      	ldr	r2, [pc, #144]	; (80042f4 <TIM_Base_SetConfig+0x138>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d003      	beq.n	800426e <TIM_Base_SetConfig+0xb2>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a23      	ldr	r2, [pc, #140]	; (80042f8 <TIM_Base_SetConfig+0x13c>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d108      	bne.n	8004280 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004274:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	4313      	orrs	r3, r2
 800428c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a0a      	ldr	r2, [pc, #40]	; (80042d0 <TIM_Base_SetConfig+0x114>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d003      	beq.n	80042b4 <TIM_Base_SetConfig+0xf8>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a0c      	ldr	r2, [pc, #48]	; (80042e0 <TIM_Base_SetConfig+0x124>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d103      	bne.n	80042bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	615a      	str	r2, [r3, #20]
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40010000 	.word	0x40010000
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40000800 	.word	0x40000800
 80042dc:	40000c00 	.word	0x40000c00
 80042e0:	40010400 	.word	0x40010400
 80042e4:	40014000 	.word	0x40014000
 80042e8:	40014400 	.word	0x40014400
 80042ec:	40014800 	.word	0x40014800
 80042f0:	40001800 	.word	0x40001800
 80042f4:	40001c00 	.word	0x40001c00
 80042f8:	40002000 	.word	0x40002000

080042fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	f023 0201 	bic.w	r2, r3, #1
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0303 	bic.w	r3, r3, #3
 8004332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f023 0302 	bic.w	r3, r3, #2
 8004344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a20      	ldr	r2, [pc, #128]	; (80043d4 <TIM_OC1_SetConfig+0xd8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_OC1_SetConfig+0x64>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a1f      	ldr	r2, [pc, #124]	; (80043d8 <TIM_OC1_SetConfig+0xdc>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d10c      	bne.n	800437a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f023 0308 	bic.w	r3, r3, #8
 8004366:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	f023 0304 	bic.w	r3, r3, #4
 8004378:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a15      	ldr	r2, [pc, #84]	; (80043d4 <TIM_OC1_SetConfig+0xd8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d003      	beq.n	800438a <TIM_OC1_SetConfig+0x8e>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <TIM_OC1_SetConfig+0xdc>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d111      	bne.n	80043ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	693a      	ldr	r2, [r7, #16]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	697a      	ldr	r2, [r7, #20]
 80043c6:	621a      	str	r2, [r3, #32]
}
 80043c8:	bf00      	nop
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40010400 	.word	0x40010400

080043dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f023 0210 	bic.w	r2, r3, #16
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	699b      	ldr	r3, [r3, #24]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f023 0320 	bic.w	r3, r3, #32
 8004426:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a22      	ldr	r2, [pc, #136]	; (80044c0 <TIM_OC2_SetConfig+0xe4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d003      	beq.n	8004444 <TIM_OC2_SetConfig+0x68>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a21      	ldr	r2, [pc, #132]	; (80044c4 <TIM_OC2_SetConfig+0xe8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d10d      	bne.n	8004460 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800444a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	011b      	lsls	r3, r3, #4
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	4313      	orrs	r3, r2
 8004456:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800445e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a17      	ldr	r2, [pc, #92]	; (80044c0 <TIM_OC2_SetConfig+0xe4>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d003      	beq.n	8004470 <TIM_OC2_SetConfig+0x94>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a16      	ldr	r2, [pc, #88]	; (80044c4 <TIM_OC2_SetConfig+0xe8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d113      	bne.n	8004498 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004476:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800447e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4313      	orrs	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	693a      	ldr	r2, [r7, #16]
 8004494:	4313      	orrs	r3, r2
 8004496:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68fa      	ldr	r2, [r7, #12]
 80044a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	40010000 	.word	0x40010000
 80044c4:	40010400 	.word	0x40010400

080044c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b087      	sub	sp, #28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69db      	ldr	r3, [r3, #28]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0303 	bic.w	r3, r3, #3
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	4313      	orrs	r3, r2
 800451c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a21      	ldr	r2, [pc, #132]	; (80045a8 <TIM_OC3_SetConfig+0xe0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d003      	beq.n	800452e <TIM_OC3_SetConfig+0x66>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a20      	ldr	r2, [pc, #128]	; (80045ac <TIM_OC3_SetConfig+0xe4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10d      	bne.n	800454a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004534:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	68db      	ldr	r3, [r3, #12]
 800453a:	021b      	lsls	r3, r3, #8
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	4313      	orrs	r3, r2
 8004540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a16      	ldr	r2, [pc, #88]	; (80045a8 <TIM_OC3_SetConfig+0xe0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d003      	beq.n	800455a <TIM_OC3_SetConfig+0x92>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a15      	ldr	r2, [pc, #84]	; (80045ac <TIM_OC3_SetConfig+0xe4>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d113      	bne.n	8004582 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004560:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004568:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	011b      	lsls	r3, r3, #4
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	693a      	ldr	r2, [r7, #16]
 8004586:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	621a      	str	r2, [r3, #32]
}
 800459c:	bf00      	nop
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	40010000 	.word	0x40010000
 80045ac:	40010400 	.word	0x40010400

080045b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	021b      	lsls	r3, r3, #8
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	031b      	lsls	r3, r3, #12
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a12      	ldr	r2, [pc, #72]	; (8004654 <TIM_OC4_SetConfig+0xa4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d003      	beq.n	8004618 <TIM_OC4_SetConfig+0x68>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a11      	ldr	r2, [pc, #68]	; (8004658 <TIM_OC4_SetConfig+0xa8>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d109      	bne.n	800462c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800461e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	695b      	ldr	r3, [r3, #20]
 8004624:	019b      	lsls	r3, r3, #6
 8004626:	697a      	ldr	r2, [r7, #20]
 8004628:	4313      	orrs	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	693a      	ldr	r2, [r7, #16]
 8004644:	621a      	str	r2, [r3, #32]
}
 8004646:	bf00      	nop
 8004648:	371c      	adds	r7, #28
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40010000 	.word	0x40010000
 8004658:	40010400 	.word	0x40010400

0800465c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800466c:	2b01      	cmp	r3, #1
 800466e:	d101      	bne.n	8004674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004670:	2302      	movs	r3, #2
 8004672:	e05a      	b.n	800472a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a21      	ldr	r2, [pc, #132]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d022      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d01d      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1d      	ldr	r2, [pc, #116]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d018      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a1b      	ldr	r2, [pc, #108]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d013      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a1a      	ldr	r2, [pc, #104]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00e      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a18      	ldr	r2, [pc, #96]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d009      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a15      	ldr	r2, [pc, #84]	; (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d10c      	bne.n	8004718 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	4313      	orrs	r3, r2
 800470e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68ba      	ldr	r2, [r7, #8]
 8004716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	40010000 	.word	0x40010000
 800473c:	40000400 	.word	0x40000400
 8004740:	40000800 	.word	0x40000800
 8004744:	40000c00 	.word	0x40000c00
 8004748:	40010400 	.word	0x40010400
 800474c:	40014000 	.word	0x40014000
 8004750:	40001800 	.word	0x40001800

08004754 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e03f      	b.n	80047e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d106      	bne.n	8004780 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2200      	movs	r2, #0
 8004776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7fd f8d0 	bl	8001920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2224      	movs	r2, #36	; 0x24
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	68da      	ldr	r2, [r3, #12]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004796:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f997 	bl	8004acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695a      	ldr	r2, [r3, #20]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68da      	ldr	r2, [r3, #12]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	3708      	adds	r7, #8
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b08a      	sub	sp, #40	; 0x28
 80047f2:	af02      	add	r7, sp, #8
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	603b      	str	r3, [r7, #0]
 80047fa:	4613      	mov	r3, r2
 80047fc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80047fe:	2300      	movs	r3, #0
 8004800:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b20      	cmp	r3, #32
 800480c:	d17c      	bne.n	8004908 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <HAL_UART_Transmit+0x2c>
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e075      	b.n	800490a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_UART_Transmit+0x3e>
 8004828:	2302      	movs	r3, #2
 800482a:	e06e      	b.n	800490a <HAL_UART_Transmit+0x11c>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2200      	movs	r2, #0
 8004838:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2221      	movs	r2, #33	; 0x21
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004842:	f7fd f9b7 	bl	8001bb4 <HAL_GetTick>
 8004846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	88fa      	ldrh	r2, [r7, #6]
 800484c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	88fa      	ldrh	r2, [r7, #6]
 8004852:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485c:	d108      	bne.n	8004870 <HAL_UART_Transmit+0x82>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	691b      	ldr	r3, [r3, #16]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d104      	bne.n	8004870 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	e003      	b.n	8004878 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004874:	2300      	movs	r3, #0
 8004876:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004880:	e02a      	b.n	80048d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	2200      	movs	r2, #0
 800488a:	2180      	movs	r1, #128	; 0x80
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f870 	bl	8004972 <UART_WaitOnFlagUntilTimeout>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d001      	beq.n	800489c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e036      	b.n	800490a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10b      	bne.n	80048ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048a2:	69bb      	ldr	r3, [r7, #24]
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	3302      	adds	r3, #2
 80048b6:	61bb      	str	r3, [r7, #24]
 80048b8:	e007      	b.n	80048ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	781a      	ldrb	r2, [r3, #0]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	3301      	adds	r3, #1
 80048c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1cf      	bne.n	8004882 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	2200      	movs	r2, #0
 80048ea:	2140      	movs	r1, #64	; 0x40
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f000 f840 	bl	8004972 <UART_WaitOnFlagUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e006      	b.n	800490a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2220      	movs	r2, #32
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	e000      	b.n	800490a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004908:	2302      	movs	r3, #2
  }
}
 800490a:	4618      	mov	r0, r3
 800490c:	3720      	adds	r7, #32
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	4613      	mov	r3, r2
 800491e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b20      	cmp	r3, #32
 800492a:	d11d      	bne.n	8004968 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_UART_Receive_IT+0x26>
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e016      	b.n	800496a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_UART_Receive_IT+0x38>
 8004946:	2302      	movs	r3, #2
 8004948:	e00f      	b.n	800496a <HAL_UART_Receive_IT+0x58>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004958:	88fb      	ldrh	r3, [r7, #6]
 800495a:	461a      	mov	r2, r3
 800495c:	68b9      	ldr	r1, [r7, #8]
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f875 	bl	8004a4e <UART_Start_Receive_IT>
 8004964:	4603      	mov	r3, r0
 8004966:	e000      	b.n	800496a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004968:	2302      	movs	r3, #2
  }
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b090      	sub	sp, #64	; 0x40
 8004976:	af00      	add	r7, sp, #0
 8004978:	60f8      	str	r0, [r7, #12]
 800497a:	60b9      	str	r1, [r7, #8]
 800497c:	603b      	str	r3, [r7, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004982:	e050      	b.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	d04c      	beq.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800498c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004992:	f7fd f90f 	bl	8001bb4 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800499e:	429a      	cmp	r2, r3
 80049a0:	d241      	bcs.n	8004a26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	330c      	adds	r3, #12
 80049a8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ac:	e853 3f00 	ldrex	r3, [r3]
 80049b0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	330c      	adds	r3, #12
 80049c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80049c2:	637a      	str	r2, [r7, #52]	; 0x34
 80049c4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80049c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049ca:	e841 2300 	strex	r3, r2, [r1]
 80049ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80049d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1e5      	bne.n	80049a2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	3314      	adds	r3, #20
 80049dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	613b      	str	r3, [r7, #16]
   return(result);
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f023 0301 	bic.w	r3, r3, #1
 80049ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	3314      	adds	r3, #20
 80049f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80049f6:	623a      	str	r2, [r7, #32]
 80049f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	69f9      	ldr	r1, [r7, #28]
 80049fc:	6a3a      	ldr	r2, [r7, #32]
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e5      	bne.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2220      	movs	r2, #32
 8004a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e00f      	b.n	8004a46 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d09f      	beq.n	8004984 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3740      	adds	r7, #64	; 0x40
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	88fa      	ldrh	r2, [r7, #6]
 8004a66:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	88fa      	ldrh	r2, [r7, #6]
 8004a6c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2200      	movs	r2, #0
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2222      	movs	r2, #34	; 0x22
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a9a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	695a      	ldr	r2, [r3, #20]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0201 	orr.w	r2, r2, #1
 8004aaa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0220 	orr.w	r2, r2, #32
 8004aba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004abc:	2300      	movs	r3, #0
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3714      	adds	r7, #20
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr
	...

08004acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004acc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad0:	b0c0      	sub	sp, #256	; 0x100
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae8:	68d9      	ldr	r1, [r3, #12]
 8004aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	ea40 0301 	orr.w	r3, r0, r1
 8004af4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b24:	f021 010c 	bic.w	r1, r1, #12
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	681a      	ldr	r2, [r3, #0]
 8004b2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b32:	430b      	orrs	r3, r1
 8004b34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b46:	6999      	ldr	r1, [r3, #24]
 8004b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	ea40 0301 	orr.w	r3, r0, r1
 8004b52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b8f      	ldr	r3, [pc, #572]	; (8004d98 <UART_SetConfig+0x2cc>)
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d005      	beq.n	8004b6c <UART_SetConfig+0xa0>
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	4b8d      	ldr	r3, [pc, #564]	; (8004d9c <UART_SetConfig+0x2d0>)
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d104      	bne.n	8004b76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b6c:	f7fe f80c 	bl	8002b88 <HAL_RCC_GetPCLK2Freq>
 8004b70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b74:	e003      	b.n	8004b7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b76:	f7fd fff3 	bl	8002b60 <HAL_RCC_GetPCLK1Freq>
 8004b7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b82:	69db      	ldr	r3, [r3, #28]
 8004b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b88:	f040 810c 	bne.w	8004da4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b90:	2200      	movs	r2, #0
 8004b92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b9e:	4622      	mov	r2, r4
 8004ba0:	462b      	mov	r3, r5
 8004ba2:	1891      	adds	r1, r2, r2
 8004ba4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ba6:	415b      	adcs	r3, r3
 8004ba8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004baa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bae:	4621      	mov	r1, r4
 8004bb0:	eb12 0801 	adds.w	r8, r2, r1
 8004bb4:	4629      	mov	r1, r5
 8004bb6:	eb43 0901 	adc.w	r9, r3, r1
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bce:	4690      	mov	r8, r2
 8004bd0:	4699      	mov	r9, r3
 8004bd2:	4623      	mov	r3, r4
 8004bd4:	eb18 0303 	adds.w	r3, r8, r3
 8004bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bdc:	462b      	mov	r3, r5
 8004bde:	eb49 0303 	adc.w	r3, r9, r3
 8004be2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	18db      	adds	r3, r3, r3
 8004bfe:	653b      	str	r3, [r7, #80]	; 0x50
 8004c00:	4613      	mov	r3, r2
 8004c02:	eb42 0303 	adc.w	r3, r2, r3
 8004c06:	657b      	str	r3, [r7, #84]	; 0x54
 8004c08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c10:	f7fb fb66 	bl	80002e0 <__aeabi_uldivmod>
 8004c14:	4602      	mov	r2, r0
 8004c16:	460b      	mov	r3, r1
 8004c18:	4b61      	ldr	r3, [pc, #388]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	011c      	lsls	r4, r3, #4
 8004c22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c26:	2200      	movs	r2, #0
 8004c28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c34:	4642      	mov	r2, r8
 8004c36:	464b      	mov	r3, r9
 8004c38:	1891      	adds	r1, r2, r2
 8004c3a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c3c:	415b      	adcs	r3, r3
 8004c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c44:	4641      	mov	r1, r8
 8004c46:	eb12 0a01 	adds.w	sl, r2, r1
 8004c4a:	4649      	mov	r1, r9
 8004c4c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	f04f 0300 	mov.w	r3, #0
 8004c58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c64:	4692      	mov	sl, r2
 8004c66:	469b      	mov	fp, r3
 8004c68:	4643      	mov	r3, r8
 8004c6a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c72:	464b      	mov	r3, r9
 8004c74:	eb4b 0303 	adc.w	r3, fp, r3
 8004c78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c90:	460b      	mov	r3, r1
 8004c92:	18db      	adds	r3, r3, r3
 8004c94:	643b      	str	r3, [r7, #64]	; 0x40
 8004c96:	4613      	mov	r3, r2
 8004c98:	eb42 0303 	adc.w	r3, r2, r3
 8004c9c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ca2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ca6:	f7fb fb1b 	bl	80002e0 <__aeabi_uldivmod>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4611      	mov	r1, r2
 8004cb0:	4b3b      	ldr	r3, [pc, #236]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004cb2:	fba3 2301 	umull	r2, r3, r3, r1
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	2264      	movs	r2, #100	; 0x64
 8004cba:	fb02 f303 	mul.w	r3, r2, r3
 8004cbe:	1acb      	subs	r3, r1, r3
 8004cc0:	00db      	lsls	r3, r3, #3
 8004cc2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cc6:	4b36      	ldr	r3, [pc, #216]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004cc8:	fba3 2302 	umull	r2, r3, r3, r2
 8004ccc:	095b      	lsrs	r3, r3, #5
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004cd4:	441c      	add	r4, r3
 8004cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ce0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004ce4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004ce8:	4642      	mov	r2, r8
 8004cea:	464b      	mov	r3, r9
 8004cec:	1891      	adds	r1, r2, r2
 8004cee:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cf0:	415b      	adcs	r3, r3
 8004cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cf4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cf8:	4641      	mov	r1, r8
 8004cfa:	1851      	adds	r1, r2, r1
 8004cfc:	6339      	str	r1, [r7, #48]	; 0x30
 8004cfe:	4649      	mov	r1, r9
 8004d00:	414b      	adcs	r3, r1
 8004d02:	637b      	str	r3, [r7, #52]	; 0x34
 8004d04:	f04f 0200 	mov.w	r2, #0
 8004d08:	f04f 0300 	mov.w	r3, #0
 8004d0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d10:	4659      	mov	r1, fp
 8004d12:	00cb      	lsls	r3, r1, #3
 8004d14:	4651      	mov	r1, sl
 8004d16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d1a:	4651      	mov	r1, sl
 8004d1c:	00ca      	lsls	r2, r1, #3
 8004d1e:	4610      	mov	r0, r2
 8004d20:	4619      	mov	r1, r3
 8004d22:	4603      	mov	r3, r0
 8004d24:	4642      	mov	r2, r8
 8004d26:	189b      	adds	r3, r3, r2
 8004d28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	460a      	mov	r2, r1
 8004d30:	eb42 0303 	adc.w	r3, r2, r3
 8004d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	18db      	adds	r3, r3, r3
 8004d50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d52:	4613      	mov	r3, r2
 8004d54:	eb42 0303 	adc.w	r3, r2, r3
 8004d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d62:	f7fb fabd 	bl	80002e0 <__aeabi_uldivmod>
 8004d66:	4602      	mov	r2, r0
 8004d68:	460b      	mov	r3, r1
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004d6c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d70:	095b      	lsrs	r3, r3, #5
 8004d72:	2164      	movs	r1, #100	; 0x64
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	00db      	lsls	r3, r3, #3
 8004d7c:	3332      	adds	r3, #50	; 0x32
 8004d7e:	4a08      	ldr	r2, [pc, #32]	; (8004da0 <UART_SetConfig+0x2d4>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	f003 0207 	and.w	r2, r3, #7
 8004d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4422      	add	r2, r4
 8004d92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d94:	e105      	b.n	8004fa2 <UART_SetConfig+0x4d6>
 8004d96:	bf00      	nop
 8004d98:	40011000 	.word	0x40011000
 8004d9c:	40011400 	.word	0x40011400
 8004da0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004da8:	2200      	movs	r2, #0
 8004daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004db2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004db6:	4642      	mov	r2, r8
 8004db8:	464b      	mov	r3, r9
 8004dba:	1891      	adds	r1, r2, r2
 8004dbc:	6239      	str	r1, [r7, #32]
 8004dbe:	415b      	adcs	r3, r3
 8004dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dc6:	4641      	mov	r1, r8
 8004dc8:	1854      	adds	r4, r2, r1
 8004dca:	4649      	mov	r1, r9
 8004dcc:	eb43 0501 	adc.w	r5, r3, r1
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	f04f 0300 	mov.w	r3, #0
 8004dd8:	00eb      	lsls	r3, r5, #3
 8004dda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dde:	00e2      	lsls	r2, r4, #3
 8004de0:	4614      	mov	r4, r2
 8004de2:	461d      	mov	r5, r3
 8004de4:	4643      	mov	r3, r8
 8004de6:	18e3      	adds	r3, r4, r3
 8004de8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dec:	464b      	mov	r3, r9
 8004dee:	eb45 0303 	adc.w	r3, r5, r3
 8004df2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e02:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e12:	4629      	mov	r1, r5
 8004e14:	008b      	lsls	r3, r1, #2
 8004e16:	4621      	mov	r1, r4
 8004e18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	008a      	lsls	r2, r1, #2
 8004e20:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e24:	f7fb fa5c 	bl	80002e0 <__aeabi_uldivmod>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4b60      	ldr	r3, [pc, #384]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004e2e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e32:	095b      	lsrs	r3, r3, #5
 8004e34:	011c      	lsls	r4, r3, #4
 8004e36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e40:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e44:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e48:	4642      	mov	r2, r8
 8004e4a:	464b      	mov	r3, r9
 8004e4c:	1891      	adds	r1, r2, r2
 8004e4e:	61b9      	str	r1, [r7, #24]
 8004e50:	415b      	adcs	r3, r3
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e58:	4641      	mov	r1, r8
 8004e5a:	1851      	adds	r1, r2, r1
 8004e5c:	6139      	str	r1, [r7, #16]
 8004e5e:	4649      	mov	r1, r9
 8004e60:	414b      	adcs	r3, r1
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	f04f 0200 	mov.w	r2, #0
 8004e68:	f04f 0300 	mov.w	r3, #0
 8004e6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e70:	4659      	mov	r1, fp
 8004e72:	00cb      	lsls	r3, r1, #3
 8004e74:	4651      	mov	r1, sl
 8004e76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e7a:	4651      	mov	r1, sl
 8004e7c:	00ca      	lsls	r2, r1, #3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	4603      	mov	r3, r0
 8004e84:	4642      	mov	r2, r8
 8004e86:	189b      	adds	r3, r3, r2
 8004e88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e8c:	464b      	mov	r3, r9
 8004e8e:	460a      	mov	r2, r1
 8004e90:	eb42 0303 	adc.w	r3, r2, r3
 8004e94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ea2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	008b      	lsls	r3, r1, #2
 8004eb4:	4641      	mov	r1, r8
 8004eb6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eba:	4641      	mov	r1, r8
 8004ebc:	008a      	lsls	r2, r1, #2
 8004ebe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ec2:	f7fb fa0d 	bl	80002e0 <__aeabi_uldivmod>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4b39      	ldr	r3, [pc, #228]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed0:	095b      	lsrs	r3, r3, #5
 8004ed2:	2164      	movs	r1, #100	; 0x64
 8004ed4:	fb01 f303 	mul.w	r3, r1, r3
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	011b      	lsls	r3, r3, #4
 8004edc:	3332      	adds	r3, #50	; 0x32
 8004ede:	4a34      	ldr	r2, [pc, #208]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	095b      	lsrs	r3, r3, #5
 8004ee6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004eea:	441c      	add	r4, r3
 8004eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	673b      	str	r3, [r7, #112]	; 0x70
 8004ef4:	677a      	str	r2, [r7, #116]	; 0x74
 8004ef6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004efa:	4642      	mov	r2, r8
 8004efc:	464b      	mov	r3, r9
 8004efe:	1891      	adds	r1, r2, r2
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	415b      	adcs	r3, r3
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f0a:	4641      	mov	r1, r8
 8004f0c:	1851      	adds	r1, r2, r1
 8004f0e:	6039      	str	r1, [r7, #0]
 8004f10:	4649      	mov	r1, r9
 8004f12:	414b      	adcs	r3, r1
 8004f14:	607b      	str	r3, [r7, #4]
 8004f16:	f04f 0200 	mov.w	r2, #0
 8004f1a:	f04f 0300 	mov.w	r3, #0
 8004f1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f22:	4659      	mov	r1, fp
 8004f24:	00cb      	lsls	r3, r1, #3
 8004f26:	4651      	mov	r1, sl
 8004f28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f2c:	4651      	mov	r1, sl
 8004f2e:	00ca      	lsls	r2, r1, #3
 8004f30:	4610      	mov	r0, r2
 8004f32:	4619      	mov	r1, r3
 8004f34:	4603      	mov	r3, r0
 8004f36:	4642      	mov	r2, r8
 8004f38:	189b      	adds	r3, r3, r2
 8004f3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f3c:	464b      	mov	r3, r9
 8004f3e:	460a      	mov	r2, r1
 8004f40:	eb42 0303 	adc.w	r3, r2, r3
 8004f44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f50:	667a      	str	r2, [r7, #100]	; 0x64
 8004f52:	f04f 0200 	mov.w	r2, #0
 8004f56:	f04f 0300 	mov.w	r3, #0
 8004f5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f5e:	4649      	mov	r1, r9
 8004f60:	008b      	lsls	r3, r1, #2
 8004f62:	4641      	mov	r1, r8
 8004f64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f68:	4641      	mov	r1, r8
 8004f6a:	008a      	lsls	r2, r1, #2
 8004f6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f70:	f7fb f9b6 	bl	80002e0 <__aeabi_uldivmod>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	4b0d      	ldr	r3, [pc, #52]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004f7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	2164      	movs	r1, #100	; 0x64
 8004f82:	fb01 f303 	mul.w	r3, r1, r3
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	011b      	lsls	r3, r3, #4
 8004f8a:	3332      	adds	r3, #50	; 0x32
 8004f8c:	4a08      	ldr	r2, [pc, #32]	; (8004fb0 <UART_SetConfig+0x4e4>)
 8004f8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	f003 020f 	and.w	r2, r3, #15
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4422      	add	r2, r4
 8004fa0:	609a      	str	r2, [r3, #8]
}
 8004fa2:	bf00      	nop
 8004fa4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fae:	bf00      	nop
 8004fb0:	51eb851f 	.word	0x51eb851f

08004fb4 <__libc_init_array>:
 8004fb4:	b570      	push	{r4, r5, r6, lr}
 8004fb6:	4d0d      	ldr	r5, [pc, #52]	; (8004fec <__libc_init_array+0x38>)
 8004fb8:	4c0d      	ldr	r4, [pc, #52]	; (8004ff0 <__libc_init_array+0x3c>)
 8004fba:	1b64      	subs	r4, r4, r5
 8004fbc:	10a4      	asrs	r4, r4, #2
 8004fbe:	2600      	movs	r6, #0
 8004fc0:	42a6      	cmp	r6, r4
 8004fc2:	d109      	bne.n	8004fd8 <__libc_init_array+0x24>
 8004fc4:	4d0b      	ldr	r5, [pc, #44]	; (8004ff4 <__libc_init_array+0x40>)
 8004fc6:	4c0c      	ldr	r4, [pc, #48]	; (8004ff8 <__libc_init_array+0x44>)
 8004fc8:	f000 fc9c 	bl	8005904 <_init>
 8004fcc:	1b64      	subs	r4, r4, r5
 8004fce:	10a4      	asrs	r4, r4, #2
 8004fd0:	2600      	movs	r6, #0
 8004fd2:	42a6      	cmp	r6, r4
 8004fd4:	d105      	bne.n	8004fe2 <__libc_init_array+0x2e>
 8004fd6:	bd70      	pop	{r4, r5, r6, pc}
 8004fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fdc:	4798      	blx	r3
 8004fde:	3601      	adds	r6, #1
 8004fe0:	e7ee      	b.n	8004fc0 <__libc_init_array+0xc>
 8004fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004fe6:	4798      	blx	r3
 8004fe8:	3601      	adds	r6, #1
 8004fea:	e7f2      	b.n	8004fd2 <__libc_init_array+0x1e>
 8004fec:	08005980 	.word	0x08005980
 8004ff0:	08005980 	.word	0x08005980
 8004ff4:	08005980 	.word	0x08005980
 8004ff8:	08005984 	.word	0x08005984

08004ffc <memset>:
 8004ffc:	4402      	add	r2, r0
 8004ffe:	4603      	mov	r3, r0
 8005000:	4293      	cmp	r3, r2
 8005002:	d100      	bne.n	8005006 <memset+0xa>
 8005004:	4770      	bx	lr
 8005006:	f803 1b01 	strb.w	r1, [r3], #1
 800500a:	e7f9      	b.n	8005000 <memset+0x4>

0800500c <siprintf>:
 800500c:	b40e      	push	{r1, r2, r3}
 800500e:	b500      	push	{lr}
 8005010:	b09c      	sub	sp, #112	; 0x70
 8005012:	ab1d      	add	r3, sp, #116	; 0x74
 8005014:	9002      	str	r0, [sp, #8]
 8005016:	9006      	str	r0, [sp, #24]
 8005018:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800501c:	4809      	ldr	r0, [pc, #36]	; (8005044 <siprintf+0x38>)
 800501e:	9107      	str	r1, [sp, #28]
 8005020:	9104      	str	r1, [sp, #16]
 8005022:	4909      	ldr	r1, [pc, #36]	; (8005048 <siprintf+0x3c>)
 8005024:	f853 2b04 	ldr.w	r2, [r3], #4
 8005028:	9105      	str	r1, [sp, #20]
 800502a:	6800      	ldr	r0, [r0, #0]
 800502c:	9301      	str	r3, [sp, #4]
 800502e:	a902      	add	r1, sp, #8
 8005030:	f000 f868 	bl	8005104 <_svfiprintf_r>
 8005034:	9b02      	ldr	r3, [sp, #8]
 8005036:	2200      	movs	r2, #0
 8005038:	701a      	strb	r2, [r3, #0]
 800503a:	b01c      	add	sp, #112	; 0x70
 800503c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005040:	b003      	add	sp, #12
 8005042:	4770      	bx	lr
 8005044:	2000000c 	.word	0x2000000c
 8005048:	ffff0208 	.word	0xffff0208

0800504c <__ssputs_r>:
 800504c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005050:	688e      	ldr	r6, [r1, #8]
 8005052:	429e      	cmp	r6, r3
 8005054:	4682      	mov	sl, r0
 8005056:	460c      	mov	r4, r1
 8005058:	4690      	mov	r8, r2
 800505a:	461f      	mov	r7, r3
 800505c:	d838      	bhi.n	80050d0 <__ssputs_r+0x84>
 800505e:	898a      	ldrh	r2, [r1, #12]
 8005060:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005064:	d032      	beq.n	80050cc <__ssputs_r+0x80>
 8005066:	6825      	ldr	r5, [r4, #0]
 8005068:	6909      	ldr	r1, [r1, #16]
 800506a:	eba5 0901 	sub.w	r9, r5, r1
 800506e:	6965      	ldr	r5, [r4, #20]
 8005070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005074:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005078:	3301      	adds	r3, #1
 800507a:	444b      	add	r3, r9
 800507c:	106d      	asrs	r5, r5, #1
 800507e:	429d      	cmp	r5, r3
 8005080:	bf38      	it	cc
 8005082:	461d      	movcc	r5, r3
 8005084:	0553      	lsls	r3, r2, #21
 8005086:	d531      	bpl.n	80050ec <__ssputs_r+0xa0>
 8005088:	4629      	mov	r1, r5
 800508a:	f000 fb63 	bl	8005754 <_malloc_r>
 800508e:	4606      	mov	r6, r0
 8005090:	b950      	cbnz	r0, 80050a8 <__ssputs_r+0x5c>
 8005092:	230c      	movs	r3, #12
 8005094:	f8ca 3000 	str.w	r3, [sl]
 8005098:	89a3      	ldrh	r3, [r4, #12]
 800509a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800509e:	81a3      	strh	r3, [r4, #12]
 80050a0:	f04f 30ff 	mov.w	r0, #4294967295
 80050a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050a8:	6921      	ldr	r1, [r4, #16]
 80050aa:	464a      	mov	r2, r9
 80050ac:	f000 fabe 	bl	800562c <memcpy>
 80050b0:	89a3      	ldrh	r3, [r4, #12]
 80050b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050ba:	81a3      	strh	r3, [r4, #12]
 80050bc:	6126      	str	r6, [r4, #16]
 80050be:	6165      	str	r5, [r4, #20]
 80050c0:	444e      	add	r6, r9
 80050c2:	eba5 0509 	sub.w	r5, r5, r9
 80050c6:	6026      	str	r6, [r4, #0]
 80050c8:	60a5      	str	r5, [r4, #8]
 80050ca:	463e      	mov	r6, r7
 80050cc:	42be      	cmp	r6, r7
 80050ce:	d900      	bls.n	80050d2 <__ssputs_r+0x86>
 80050d0:	463e      	mov	r6, r7
 80050d2:	6820      	ldr	r0, [r4, #0]
 80050d4:	4632      	mov	r2, r6
 80050d6:	4641      	mov	r1, r8
 80050d8:	f000 fab6 	bl	8005648 <memmove>
 80050dc:	68a3      	ldr	r3, [r4, #8]
 80050de:	1b9b      	subs	r3, r3, r6
 80050e0:	60a3      	str	r3, [r4, #8]
 80050e2:	6823      	ldr	r3, [r4, #0]
 80050e4:	4433      	add	r3, r6
 80050e6:	6023      	str	r3, [r4, #0]
 80050e8:	2000      	movs	r0, #0
 80050ea:	e7db      	b.n	80050a4 <__ssputs_r+0x58>
 80050ec:	462a      	mov	r2, r5
 80050ee:	f000 fba5 	bl	800583c <_realloc_r>
 80050f2:	4606      	mov	r6, r0
 80050f4:	2800      	cmp	r0, #0
 80050f6:	d1e1      	bne.n	80050bc <__ssputs_r+0x70>
 80050f8:	6921      	ldr	r1, [r4, #16]
 80050fa:	4650      	mov	r0, sl
 80050fc:	f000 fabe 	bl	800567c <_free_r>
 8005100:	e7c7      	b.n	8005092 <__ssputs_r+0x46>
	...

08005104 <_svfiprintf_r>:
 8005104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005108:	4698      	mov	r8, r3
 800510a:	898b      	ldrh	r3, [r1, #12]
 800510c:	061b      	lsls	r3, r3, #24
 800510e:	b09d      	sub	sp, #116	; 0x74
 8005110:	4607      	mov	r7, r0
 8005112:	460d      	mov	r5, r1
 8005114:	4614      	mov	r4, r2
 8005116:	d50e      	bpl.n	8005136 <_svfiprintf_r+0x32>
 8005118:	690b      	ldr	r3, [r1, #16]
 800511a:	b963      	cbnz	r3, 8005136 <_svfiprintf_r+0x32>
 800511c:	2140      	movs	r1, #64	; 0x40
 800511e:	f000 fb19 	bl	8005754 <_malloc_r>
 8005122:	6028      	str	r0, [r5, #0]
 8005124:	6128      	str	r0, [r5, #16]
 8005126:	b920      	cbnz	r0, 8005132 <_svfiprintf_r+0x2e>
 8005128:	230c      	movs	r3, #12
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	f04f 30ff 	mov.w	r0, #4294967295
 8005130:	e0d1      	b.n	80052d6 <_svfiprintf_r+0x1d2>
 8005132:	2340      	movs	r3, #64	; 0x40
 8005134:	616b      	str	r3, [r5, #20]
 8005136:	2300      	movs	r3, #0
 8005138:	9309      	str	r3, [sp, #36]	; 0x24
 800513a:	2320      	movs	r3, #32
 800513c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005140:	f8cd 800c 	str.w	r8, [sp, #12]
 8005144:	2330      	movs	r3, #48	; 0x30
 8005146:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80052f0 <_svfiprintf_r+0x1ec>
 800514a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800514e:	f04f 0901 	mov.w	r9, #1
 8005152:	4623      	mov	r3, r4
 8005154:	469a      	mov	sl, r3
 8005156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800515a:	b10a      	cbz	r2, 8005160 <_svfiprintf_r+0x5c>
 800515c:	2a25      	cmp	r2, #37	; 0x25
 800515e:	d1f9      	bne.n	8005154 <_svfiprintf_r+0x50>
 8005160:	ebba 0b04 	subs.w	fp, sl, r4
 8005164:	d00b      	beq.n	800517e <_svfiprintf_r+0x7a>
 8005166:	465b      	mov	r3, fp
 8005168:	4622      	mov	r2, r4
 800516a:	4629      	mov	r1, r5
 800516c:	4638      	mov	r0, r7
 800516e:	f7ff ff6d 	bl	800504c <__ssputs_r>
 8005172:	3001      	adds	r0, #1
 8005174:	f000 80aa 	beq.w	80052cc <_svfiprintf_r+0x1c8>
 8005178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800517a:	445a      	add	r2, fp
 800517c:	9209      	str	r2, [sp, #36]	; 0x24
 800517e:	f89a 3000 	ldrb.w	r3, [sl]
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 80a2 	beq.w	80052cc <_svfiprintf_r+0x1c8>
 8005188:	2300      	movs	r3, #0
 800518a:	f04f 32ff 	mov.w	r2, #4294967295
 800518e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005192:	f10a 0a01 	add.w	sl, sl, #1
 8005196:	9304      	str	r3, [sp, #16]
 8005198:	9307      	str	r3, [sp, #28]
 800519a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800519e:	931a      	str	r3, [sp, #104]	; 0x68
 80051a0:	4654      	mov	r4, sl
 80051a2:	2205      	movs	r2, #5
 80051a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051a8:	4851      	ldr	r0, [pc, #324]	; (80052f0 <_svfiprintf_r+0x1ec>)
 80051aa:	f7fb f849 	bl	8000240 <memchr>
 80051ae:	9a04      	ldr	r2, [sp, #16]
 80051b0:	b9d8      	cbnz	r0, 80051ea <_svfiprintf_r+0xe6>
 80051b2:	06d0      	lsls	r0, r2, #27
 80051b4:	bf44      	itt	mi
 80051b6:	2320      	movmi	r3, #32
 80051b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051bc:	0711      	lsls	r1, r2, #28
 80051be:	bf44      	itt	mi
 80051c0:	232b      	movmi	r3, #43	; 0x2b
 80051c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051c6:	f89a 3000 	ldrb.w	r3, [sl]
 80051ca:	2b2a      	cmp	r3, #42	; 0x2a
 80051cc:	d015      	beq.n	80051fa <_svfiprintf_r+0xf6>
 80051ce:	9a07      	ldr	r2, [sp, #28]
 80051d0:	4654      	mov	r4, sl
 80051d2:	2000      	movs	r0, #0
 80051d4:	f04f 0c0a 	mov.w	ip, #10
 80051d8:	4621      	mov	r1, r4
 80051da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051de:	3b30      	subs	r3, #48	; 0x30
 80051e0:	2b09      	cmp	r3, #9
 80051e2:	d94e      	bls.n	8005282 <_svfiprintf_r+0x17e>
 80051e4:	b1b0      	cbz	r0, 8005214 <_svfiprintf_r+0x110>
 80051e6:	9207      	str	r2, [sp, #28]
 80051e8:	e014      	b.n	8005214 <_svfiprintf_r+0x110>
 80051ea:	eba0 0308 	sub.w	r3, r0, r8
 80051ee:	fa09 f303 	lsl.w	r3, r9, r3
 80051f2:	4313      	orrs	r3, r2
 80051f4:	9304      	str	r3, [sp, #16]
 80051f6:	46a2      	mov	sl, r4
 80051f8:	e7d2      	b.n	80051a0 <_svfiprintf_r+0x9c>
 80051fa:	9b03      	ldr	r3, [sp, #12]
 80051fc:	1d19      	adds	r1, r3, #4
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	9103      	str	r1, [sp, #12]
 8005202:	2b00      	cmp	r3, #0
 8005204:	bfbb      	ittet	lt
 8005206:	425b      	neglt	r3, r3
 8005208:	f042 0202 	orrlt.w	r2, r2, #2
 800520c:	9307      	strge	r3, [sp, #28]
 800520e:	9307      	strlt	r3, [sp, #28]
 8005210:	bfb8      	it	lt
 8005212:	9204      	strlt	r2, [sp, #16]
 8005214:	7823      	ldrb	r3, [r4, #0]
 8005216:	2b2e      	cmp	r3, #46	; 0x2e
 8005218:	d10c      	bne.n	8005234 <_svfiprintf_r+0x130>
 800521a:	7863      	ldrb	r3, [r4, #1]
 800521c:	2b2a      	cmp	r3, #42	; 0x2a
 800521e:	d135      	bne.n	800528c <_svfiprintf_r+0x188>
 8005220:	9b03      	ldr	r3, [sp, #12]
 8005222:	1d1a      	adds	r2, r3, #4
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	9203      	str	r2, [sp, #12]
 8005228:	2b00      	cmp	r3, #0
 800522a:	bfb8      	it	lt
 800522c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005230:	3402      	adds	r4, #2
 8005232:	9305      	str	r3, [sp, #20]
 8005234:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005300 <_svfiprintf_r+0x1fc>
 8005238:	7821      	ldrb	r1, [r4, #0]
 800523a:	2203      	movs	r2, #3
 800523c:	4650      	mov	r0, sl
 800523e:	f7fa ffff 	bl	8000240 <memchr>
 8005242:	b140      	cbz	r0, 8005256 <_svfiprintf_r+0x152>
 8005244:	2340      	movs	r3, #64	; 0x40
 8005246:	eba0 000a 	sub.w	r0, r0, sl
 800524a:	fa03 f000 	lsl.w	r0, r3, r0
 800524e:	9b04      	ldr	r3, [sp, #16]
 8005250:	4303      	orrs	r3, r0
 8005252:	3401      	adds	r4, #1
 8005254:	9304      	str	r3, [sp, #16]
 8005256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800525a:	4826      	ldr	r0, [pc, #152]	; (80052f4 <_svfiprintf_r+0x1f0>)
 800525c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005260:	2206      	movs	r2, #6
 8005262:	f7fa ffed 	bl	8000240 <memchr>
 8005266:	2800      	cmp	r0, #0
 8005268:	d038      	beq.n	80052dc <_svfiprintf_r+0x1d8>
 800526a:	4b23      	ldr	r3, [pc, #140]	; (80052f8 <_svfiprintf_r+0x1f4>)
 800526c:	bb1b      	cbnz	r3, 80052b6 <_svfiprintf_r+0x1b2>
 800526e:	9b03      	ldr	r3, [sp, #12]
 8005270:	3307      	adds	r3, #7
 8005272:	f023 0307 	bic.w	r3, r3, #7
 8005276:	3308      	adds	r3, #8
 8005278:	9303      	str	r3, [sp, #12]
 800527a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800527c:	4433      	add	r3, r6
 800527e:	9309      	str	r3, [sp, #36]	; 0x24
 8005280:	e767      	b.n	8005152 <_svfiprintf_r+0x4e>
 8005282:	fb0c 3202 	mla	r2, ip, r2, r3
 8005286:	460c      	mov	r4, r1
 8005288:	2001      	movs	r0, #1
 800528a:	e7a5      	b.n	80051d8 <_svfiprintf_r+0xd4>
 800528c:	2300      	movs	r3, #0
 800528e:	3401      	adds	r4, #1
 8005290:	9305      	str	r3, [sp, #20]
 8005292:	4619      	mov	r1, r3
 8005294:	f04f 0c0a 	mov.w	ip, #10
 8005298:	4620      	mov	r0, r4
 800529a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800529e:	3a30      	subs	r2, #48	; 0x30
 80052a0:	2a09      	cmp	r2, #9
 80052a2:	d903      	bls.n	80052ac <_svfiprintf_r+0x1a8>
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d0c5      	beq.n	8005234 <_svfiprintf_r+0x130>
 80052a8:	9105      	str	r1, [sp, #20]
 80052aa:	e7c3      	b.n	8005234 <_svfiprintf_r+0x130>
 80052ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80052b0:	4604      	mov	r4, r0
 80052b2:	2301      	movs	r3, #1
 80052b4:	e7f0      	b.n	8005298 <_svfiprintf_r+0x194>
 80052b6:	ab03      	add	r3, sp, #12
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	462a      	mov	r2, r5
 80052bc:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <_svfiprintf_r+0x1f8>)
 80052be:	a904      	add	r1, sp, #16
 80052c0:	4638      	mov	r0, r7
 80052c2:	f3af 8000 	nop.w
 80052c6:	1c42      	adds	r2, r0, #1
 80052c8:	4606      	mov	r6, r0
 80052ca:	d1d6      	bne.n	800527a <_svfiprintf_r+0x176>
 80052cc:	89ab      	ldrh	r3, [r5, #12]
 80052ce:	065b      	lsls	r3, r3, #25
 80052d0:	f53f af2c 	bmi.w	800512c <_svfiprintf_r+0x28>
 80052d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052d6:	b01d      	add	sp, #116	; 0x74
 80052d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052dc:	ab03      	add	r3, sp, #12
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	462a      	mov	r2, r5
 80052e2:	4b06      	ldr	r3, [pc, #24]	; (80052fc <_svfiprintf_r+0x1f8>)
 80052e4:	a904      	add	r1, sp, #16
 80052e6:	4638      	mov	r0, r7
 80052e8:	f000 f87a 	bl	80053e0 <_printf_i>
 80052ec:	e7eb      	b.n	80052c6 <_svfiprintf_r+0x1c2>
 80052ee:	bf00      	nop
 80052f0:	08005944 	.word	0x08005944
 80052f4:	0800594e 	.word	0x0800594e
 80052f8:	00000000 	.word	0x00000000
 80052fc:	0800504d 	.word	0x0800504d
 8005300:	0800594a 	.word	0x0800594a

08005304 <_printf_common>:
 8005304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	4616      	mov	r6, r2
 800530a:	4699      	mov	r9, r3
 800530c:	688a      	ldr	r2, [r1, #8]
 800530e:	690b      	ldr	r3, [r1, #16]
 8005310:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005314:	4293      	cmp	r3, r2
 8005316:	bfb8      	it	lt
 8005318:	4613      	movlt	r3, r2
 800531a:	6033      	str	r3, [r6, #0]
 800531c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005320:	4607      	mov	r7, r0
 8005322:	460c      	mov	r4, r1
 8005324:	b10a      	cbz	r2, 800532a <_printf_common+0x26>
 8005326:	3301      	adds	r3, #1
 8005328:	6033      	str	r3, [r6, #0]
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	0699      	lsls	r1, r3, #26
 800532e:	bf42      	ittt	mi
 8005330:	6833      	ldrmi	r3, [r6, #0]
 8005332:	3302      	addmi	r3, #2
 8005334:	6033      	strmi	r3, [r6, #0]
 8005336:	6825      	ldr	r5, [r4, #0]
 8005338:	f015 0506 	ands.w	r5, r5, #6
 800533c:	d106      	bne.n	800534c <_printf_common+0x48>
 800533e:	f104 0a19 	add.w	sl, r4, #25
 8005342:	68e3      	ldr	r3, [r4, #12]
 8005344:	6832      	ldr	r2, [r6, #0]
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	42ab      	cmp	r3, r5
 800534a:	dc26      	bgt.n	800539a <_printf_common+0x96>
 800534c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005350:	1e13      	subs	r3, r2, #0
 8005352:	6822      	ldr	r2, [r4, #0]
 8005354:	bf18      	it	ne
 8005356:	2301      	movne	r3, #1
 8005358:	0692      	lsls	r2, r2, #26
 800535a:	d42b      	bmi.n	80053b4 <_printf_common+0xb0>
 800535c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005360:	4649      	mov	r1, r9
 8005362:	4638      	mov	r0, r7
 8005364:	47c0      	blx	r8
 8005366:	3001      	adds	r0, #1
 8005368:	d01e      	beq.n	80053a8 <_printf_common+0xa4>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	68e5      	ldr	r5, [r4, #12]
 800536e:	6832      	ldr	r2, [r6, #0]
 8005370:	f003 0306 	and.w	r3, r3, #6
 8005374:	2b04      	cmp	r3, #4
 8005376:	bf08      	it	eq
 8005378:	1aad      	subeq	r5, r5, r2
 800537a:	68a3      	ldr	r3, [r4, #8]
 800537c:	6922      	ldr	r2, [r4, #16]
 800537e:	bf0c      	ite	eq
 8005380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005384:	2500      	movne	r5, #0
 8005386:	4293      	cmp	r3, r2
 8005388:	bfc4      	itt	gt
 800538a:	1a9b      	subgt	r3, r3, r2
 800538c:	18ed      	addgt	r5, r5, r3
 800538e:	2600      	movs	r6, #0
 8005390:	341a      	adds	r4, #26
 8005392:	42b5      	cmp	r5, r6
 8005394:	d11a      	bne.n	80053cc <_printf_common+0xc8>
 8005396:	2000      	movs	r0, #0
 8005398:	e008      	b.n	80053ac <_printf_common+0xa8>
 800539a:	2301      	movs	r3, #1
 800539c:	4652      	mov	r2, sl
 800539e:	4649      	mov	r1, r9
 80053a0:	4638      	mov	r0, r7
 80053a2:	47c0      	blx	r8
 80053a4:	3001      	adds	r0, #1
 80053a6:	d103      	bne.n	80053b0 <_printf_common+0xac>
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b0:	3501      	adds	r5, #1
 80053b2:	e7c6      	b.n	8005342 <_printf_common+0x3e>
 80053b4:	18e1      	adds	r1, r4, r3
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	2030      	movs	r0, #48	; 0x30
 80053ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053be:	4422      	add	r2, r4
 80053c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053c8:	3302      	adds	r3, #2
 80053ca:	e7c7      	b.n	800535c <_printf_common+0x58>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4622      	mov	r2, r4
 80053d0:	4649      	mov	r1, r9
 80053d2:	4638      	mov	r0, r7
 80053d4:	47c0      	blx	r8
 80053d6:	3001      	adds	r0, #1
 80053d8:	d0e6      	beq.n	80053a8 <_printf_common+0xa4>
 80053da:	3601      	adds	r6, #1
 80053dc:	e7d9      	b.n	8005392 <_printf_common+0x8e>
	...

080053e0 <_printf_i>:
 80053e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	7e0f      	ldrb	r7, [r1, #24]
 80053e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053e8:	2f78      	cmp	r7, #120	; 0x78
 80053ea:	4691      	mov	r9, r2
 80053ec:	4680      	mov	r8, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	469a      	mov	sl, r3
 80053f2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053f6:	d807      	bhi.n	8005408 <_printf_i+0x28>
 80053f8:	2f62      	cmp	r7, #98	; 0x62
 80053fa:	d80a      	bhi.n	8005412 <_printf_i+0x32>
 80053fc:	2f00      	cmp	r7, #0
 80053fe:	f000 80d8 	beq.w	80055b2 <_printf_i+0x1d2>
 8005402:	2f58      	cmp	r7, #88	; 0x58
 8005404:	f000 80a3 	beq.w	800554e <_printf_i+0x16e>
 8005408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800540c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005410:	e03a      	b.n	8005488 <_printf_i+0xa8>
 8005412:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005416:	2b15      	cmp	r3, #21
 8005418:	d8f6      	bhi.n	8005408 <_printf_i+0x28>
 800541a:	a101      	add	r1, pc, #4	; (adr r1, 8005420 <_printf_i+0x40>)
 800541c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005420:	08005479 	.word	0x08005479
 8005424:	0800548d 	.word	0x0800548d
 8005428:	08005409 	.word	0x08005409
 800542c:	08005409 	.word	0x08005409
 8005430:	08005409 	.word	0x08005409
 8005434:	08005409 	.word	0x08005409
 8005438:	0800548d 	.word	0x0800548d
 800543c:	08005409 	.word	0x08005409
 8005440:	08005409 	.word	0x08005409
 8005444:	08005409 	.word	0x08005409
 8005448:	08005409 	.word	0x08005409
 800544c:	08005599 	.word	0x08005599
 8005450:	080054bd 	.word	0x080054bd
 8005454:	0800557b 	.word	0x0800557b
 8005458:	08005409 	.word	0x08005409
 800545c:	08005409 	.word	0x08005409
 8005460:	080055bb 	.word	0x080055bb
 8005464:	08005409 	.word	0x08005409
 8005468:	080054bd 	.word	0x080054bd
 800546c:	08005409 	.word	0x08005409
 8005470:	08005409 	.word	0x08005409
 8005474:	08005583 	.word	0x08005583
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	1d1a      	adds	r2, r3, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	602a      	str	r2, [r5, #0]
 8005480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005484:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005488:	2301      	movs	r3, #1
 800548a:	e0a3      	b.n	80055d4 <_printf_i+0x1f4>
 800548c:	6820      	ldr	r0, [r4, #0]
 800548e:	6829      	ldr	r1, [r5, #0]
 8005490:	0606      	lsls	r6, r0, #24
 8005492:	f101 0304 	add.w	r3, r1, #4
 8005496:	d50a      	bpl.n	80054ae <_printf_i+0xce>
 8005498:	680e      	ldr	r6, [r1, #0]
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	2e00      	cmp	r6, #0
 800549e:	da03      	bge.n	80054a8 <_printf_i+0xc8>
 80054a0:	232d      	movs	r3, #45	; 0x2d
 80054a2:	4276      	negs	r6, r6
 80054a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a8:	485e      	ldr	r0, [pc, #376]	; (8005624 <_printf_i+0x244>)
 80054aa:	230a      	movs	r3, #10
 80054ac:	e019      	b.n	80054e2 <_printf_i+0x102>
 80054ae:	680e      	ldr	r6, [r1, #0]
 80054b0:	602b      	str	r3, [r5, #0]
 80054b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054b6:	bf18      	it	ne
 80054b8:	b236      	sxthne	r6, r6
 80054ba:	e7ef      	b.n	800549c <_printf_i+0xbc>
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	6820      	ldr	r0, [r4, #0]
 80054c0:	1d19      	adds	r1, r3, #4
 80054c2:	6029      	str	r1, [r5, #0]
 80054c4:	0601      	lsls	r1, r0, #24
 80054c6:	d501      	bpl.n	80054cc <_printf_i+0xec>
 80054c8:	681e      	ldr	r6, [r3, #0]
 80054ca:	e002      	b.n	80054d2 <_printf_i+0xf2>
 80054cc:	0646      	lsls	r6, r0, #25
 80054ce:	d5fb      	bpl.n	80054c8 <_printf_i+0xe8>
 80054d0:	881e      	ldrh	r6, [r3, #0]
 80054d2:	4854      	ldr	r0, [pc, #336]	; (8005624 <_printf_i+0x244>)
 80054d4:	2f6f      	cmp	r7, #111	; 0x6f
 80054d6:	bf0c      	ite	eq
 80054d8:	2308      	moveq	r3, #8
 80054da:	230a      	movne	r3, #10
 80054dc:	2100      	movs	r1, #0
 80054de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054e2:	6865      	ldr	r5, [r4, #4]
 80054e4:	60a5      	str	r5, [r4, #8]
 80054e6:	2d00      	cmp	r5, #0
 80054e8:	bfa2      	ittt	ge
 80054ea:	6821      	ldrge	r1, [r4, #0]
 80054ec:	f021 0104 	bicge.w	r1, r1, #4
 80054f0:	6021      	strge	r1, [r4, #0]
 80054f2:	b90e      	cbnz	r6, 80054f8 <_printf_i+0x118>
 80054f4:	2d00      	cmp	r5, #0
 80054f6:	d04d      	beq.n	8005594 <_printf_i+0x1b4>
 80054f8:	4615      	mov	r5, r2
 80054fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80054fe:	fb03 6711 	mls	r7, r3, r1, r6
 8005502:	5dc7      	ldrb	r7, [r0, r7]
 8005504:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005508:	4637      	mov	r7, r6
 800550a:	42bb      	cmp	r3, r7
 800550c:	460e      	mov	r6, r1
 800550e:	d9f4      	bls.n	80054fa <_printf_i+0x11a>
 8005510:	2b08      	cmp	r3, #8
 8005512:	d10b      	bne.n	800552c <_printf_i+0x14c>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	07de      	lsls	r6, r3, #31
 8005518:	d508      	bpl.n	800552c <_printf_i+0x14c>
 800551a:	6923      	ldr	r3, [r4, #16]
 800551c:	6861      	ldr	r1, [r4, #4]
 800551e:	4299      	cmp	r1, r3
 8005520:	bfde      	ittt	le
 8005522:	2330      	movle	r3, #48	; 0x30
 8005524:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005528:	f105 35ff 	addle.w	r5, r5, #4294967295
 800552c:	1b52      	subs	r2, r2, r5
 800552e:	6122      	str	r2, [r4, #16]
 8005530:	f8cd a000 	str.w	sl, [sp]
 8005534:	464b      	mov	r3, r9
 8005536:	aa03      	add	r2, sp, #12
 8005538:	4621      	mov	r1, r4
 800553a:	4640      	mov	r0, r8
 800553c:	f7ff fee2 	bl	8005304 <_printf_common>
 8005540:	3001      	adds	r0, #1
 8005542:	d14c      	bne.n	80055de <_printf_i+0x1fe>
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	b004      	add	sp, #16
 800554a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800554e:	4835      	ldr	r0, [pc, #212]	; (8005624 <_printf_i+0x244>)
 8005550:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005554:	6829      	ldr	r1, [r5, #0]
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	f851 6b04 	ldr.w	r6, [r1], #4
 800555c:	6029      	str	r1, [r5, #0]
 800555e:	061d      	lsls	r5, r3, #24
 8005560:	d514      	bpl.n	800558c <_printf_i+0x1ac>
 8005562:	07df      	lsls	r7, r3, #31
 8005564:	bf44      	itt	mi
 8005566:	f043 0320 	orrmi.w	r3, r3, #32
 800556a:	6023      	strmi	r3, [r4, #0]
 800556c:	b91e      	cbnz	r6, 8005576 <_printf_i+0x196>
 800556e:	6823      	ldr	r3, [r4, #0]
 8005570:	f023 0320 	bic.w	r3, r3, #32
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	2310      	movs	r3, #16
 8005578:	e7b0      	b.n	80054dc <_printf_i+0xfc>
 800557a:	6823      	ldr	r3, [r4, #0]
 800557c:	f043 0320 	orr.w	r3, r3, #32
 8005580:	6023      	str	r3, [r4, #0]
 8005582:	2378      	movs	r3, #120	; 0x78
 8005584:	4828      	ldr	r0, [pc, #160]	; (8005628 <_printf_i+0x248>)
 8005586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800558a:	e7e3      	b.n	8005554 <_printf_i+0x174>
 800558c:	0659      	lsls	r1, r3, #25
 800558e:	bf48      	it	mi
 8005590:	b2b6      	uxthmi	r6, r6
 8005592:	e7e6      	b.n	8005562 <_printf_i+0x182>
 8005594:	4615      	mov	r5, r2
 8005596:	e7bb      	b.n	8005510 <_printf_i+0x130>
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	6826      	ldr	r6, [r4, #0]
 800559c:	6961      	ldr	r1, [r4, #20]
 800559e:	1d18      	adds	r0, r3, #4
 80055a0:	6028      	str	r0, [r5, #0]
 80055a2:	0635      	lsls	r5, r6, #24
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	d501      	bpl.n	80055ac <_printf_i+0x1cc>
 80055a8:	6019      	str	r1, [r3, #0]
 80055aa:	e002      	b.n	80055b2 <_printf_i+0x1d2>
 80055ac:	0670      	lsls	r0, r6, #25
 80055ae:	d5fb      	bpl.n	80055a8 <_printf_i+0x1c8>
 80055b0:	8019      	strh	r1, [r3, #0]
 80055b2:	2300      	movs	r3, #0
 80055b4:	6123      	str	r3, [r4, #16]
 80055b6:	4615      	mov	r5, r2
 80055b8:	e7ba      	b.n	8005530 <_printf_i+0x150>
 80055ba:	682b      	ldr	r3, [r5, #0]
 80055bc:	1d1a      	adds	r2, r3, #4
 80055be:	602a      	str	r2, [r5, #0]
 80055c0:	681d      	ldr	r5, [r3, #0]
 80055c2:	6862      	ldr	r2, [r4, #4]
 80055c4:	2100      	movs	r1, #0
 80055c6:	4628      	mov	r0, r5
 80055c8:	f7fa fe3a 	bl	8000240 <memchr>
 80055cc:	b108      	cbz	r0, 80055d2 <_printf_i+0x1f2>
 80055ce:	1b40      	subs	r0, r0, r5
 80055d0:	6060      	str	r0, [r4, #4]
 80055d2:	6863      	ldr	r3, [r4, #4]
 80055d4:	6123      	str	r3, [r4, #16]
 80055d6:	2300      	movs	r3, #0
 80055d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055dc:	e7a8      	b.n	8005530 <_printf_i+0x150>
 80055de:	6923      	ldr	r3, [r4, #16]
 80055e0:	462a      	mov	r2, r5
 80055e2:	4649      	mov	r1, r9
 80055e4:	4640      	mov	r0, r8
 80055e6:	47d0      	blx	sl
 80055e8:	3001      	adds	r0, #1
 80055ea:	d0ab      	beq.n	8005544 <_printf_i+0x164>
 80055ec:	6823      	ldr	r3, [r4, #0]
 80055ee:	079b      	lsls	r3, r3, #30
 80055f0:	d413      	bmi.n	800561a <_printf_i+0x23a>
 80055f2:	68e0      	ldr	r0, [r4, #12]
 80055f4:	9b03      	ldr	r3, [sp, #12]
 80055f6:	4298      	cmp	r0, r3
 80055f8:	bfb8      	it	lt
 80055fa:	4618      	movlt	r0, r3
 80055fc:	e7a4      	b.n	8005548 <_printf_i+0x168>
 80055fe:	2301      	movs	r3, #1
 8005600:	4632      	mov	r2, r6
 8005602:	4649      	mov	r1, r9
 8005604:	4640      	mov	r0, r8
 8005606:	47d0      	blx	sl
 8005608:	3001      	adds	r0, #1
 800560a:	d09b      	beq.n	8005544 <_printf_i+0x164>
 800560c:	3501      	adds	r5, #1
 800560e:	68e3      	ldr	r3, [r4, #12]
 8005610:	9903      	ldr	r1, [sp, #12]
 8005612:	1a5b      	subs	r3, r3, r1
 8005614:	42ab      	cmp	r3, r5
 8005616:	dcf2      	bgt.n	80055fe <_printf_i+0x21e>
 8005618:	e7eb      	b.n	80055f2 <_printf_i+0x212>
 800561a:	2500      	movs	r5, #0
 800561c:	f104 0619 	add.w	r6, r4, #25
 8005620:	e7f5      	b.n	800560e <_printf_i+0x22e>
 8005622:	bf00      	nop
 8005624:	08005955 	.word	0x08005955
 8005628:	08005966 	.word	0x08005966

0800562c <memcpy>:
 800562c:	440a      	add	r2, r1
 800562e:	4291      	cmp	r1, r2
 8005630:	f100 33ff 	add.w	r3, r0, #4294967295
 8005634:	d100      	bne.n	8005638 <memcpy+0xc>
 8005636:	4770      	bx	lr
 8005638:	b510      	push	{r4, lr}
 800563a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800563e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005642:	4291      	cmp	r1, r2
 8005644:	d1f9      	bne.n	800563a <memcpy+0xe>
 8005646:	bd10      	pop	{r4, pc}

08005648 <memmove>:
 8005648:	4288      	cmp	r0, r1
 800564a:	b510      	push	{r4, lr}
 800564c:	eb01 0402 	add.w	r4, r1, r2
 8005650:	d902      	bls.n	8005658 <memmove+0x10>
 8005652:	4284      	cmp	r4, r0
 8005654:	4623      	mov	r3, r4
 8005656:	d807      	bhi.n	8005668 <memmove+0x20>
 8005658:	1e43      	subs	r3, r0, #1
 800565a:	42a1      	cmp	r1, r4
 800565c:	d008      	beq.n	8005670 <memmove+0x28>
 800565e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005662:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005666:	e7f8      	b.n	800565a <memmove+0x12>
 8005668:	4402      	add	r2, r0
 800566a:	4601      	mov	r1, r0
 800566c:	428a      	cmp	r2, r1
 800566e:	d100      	bne.n	8005672 <memmove+0x2a>
 8005670:	bd10      	pop	{r4, pc}
 8005672:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005676:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800567a:	e7f7      	b.n	800566c <memmove+0x24>

0800567c <_free_r>:
 800567c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800567e:	2900      	cmp	r1, #0
 8005680:	d044      	beq.n	800570c <_free_r+0x90>
 8005682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005686:	9001      	str	r0, [sp, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	f1a1 0404 	sub.w	r4, r1, #4
 800568e:	bfb8      	it	lt
 8005690:	18e4      	addlt	r4, r4, r3
 8005692:	f000 f913 	bl	80058bc <__malloc_lock>
 8005696:	4a1e      	ldr	r2, [pc, #120]	; (8005710 <_free_r+0x94>)
 8005698:	9801      	ldr	r0, [sp, #4]
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	b933      	cbnz	r3, 80056ac <_free_r+0x30>
 800569e:	6063      	str	r3, [r4, #4]
 80056a0:	6014      	str	r4, [r2, #0]
 80056a2:	b003      	add	sp, #12
 80056a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056a8:	f000 b90e 	b.w	80058c8 <__malloc_unlock>
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	d908      	bls.n	80056c2 <_free_r+0x46>
 80056b0:	6825      	ldr	r5, [r4, #0]
 80056b2:	1961      	adds	r1, r4, r5
 80056b4:	428b      	cmp	r3, r1
 80056b6:	bf01      	itttt	eq
 80056b8:	6819      	ldreq	r1, [r3, #0]
 80056ba:	685b      	ldreq	r3, [r3, #4]
 80056bc:	1949      	addeq	r1, r1, r5
 80056be:	6021      	streq	r1, [r4, #0]
 80056c0:	e7ed      	b.n	800569e <_free_r+0x22>
 80056c2:	461a      	mov	r2, r3
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	b10b      	cbz	r3, 80056cc <_free_r+0x50>
 80056c8:	42a3      	cmp	r3, r4
 80056ca:	d9fa      	bls.n	80056c2 <_free_r+0x46>
 80056cc:	6811      	ldr	r1, [r2, #0]
 80056ce:	1855      	adds	r5, r2, r1
 80056d0:	42a5      	cmp	r5, r4
 80056d2:	d10b      	bne.n	80056ec <_free_r+0x70>
 80056d4:	6824      	ldr	r4, [r4, #0]
 80056d6:	4421      	add	r1, r4
 80056d8:	1854      	adds	r4, r2, r1
 80056da:	42a3      	cmp	r3, r4
 80056dc:	6011      	str	r1, [r2, #0]
 80056de:	d1e0      	bne.n	80056a2 <_free_r+0x26>
 80056e0:	681c      	ldr	r4, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	6053      	str	r3, [r2, #4]
 80056e6:	4421      	add	r1, r4
 80056e8:	6011      	str	r1, [r2, #0]
 80056ea:	e7da      	b.n	80056a2 <_free_r+0x26>
 80056ec:	d902      	bls.n	80056f4 <_free_r+0x78>
 80056ee:	230c      	movs	r3, #12
 80056f0:	6003      	str	r3, [r0, #0]
 80056f2:	e7d6      	b.n	80056a2 <_free_r+0x26>
 80056f4:	6825      	ldr	r5, [r4, #0]
 80056f6:	1961      	adds	r1, r4, r5
 80056f8:	428b      	cmp	r3, r1
 80056fa:	bf04      	itt	eq
 80056fc:	6819      	ldreq	r1, [r3, #0]
 80056fe:	685b      	ldreq	r3, [r3, #4]
 8005700:	6063      	str	r3, [r4, #4]
 8005702:	bf04      	itt	eq
 8005704:	1949      	addeq	r1, r1, r5
 8005706:	6021      	streq	r1, [r4, #0]
 8005708:	6054      	str	r4, [r2, #4]
 800570a:	e7ca      	b.n	80056a2 <_free_r+0x26>
 800570c:	b003      	add	sp, #12
 800570e:	bd30      	pop	{r4, r5, pc}
 8005710:	20000498 	.word	0x20000498

08005714 <sbrk_aligned>:
 8005714:	b570      	push	{r4, r5, r6, lr}
 8005716:	4e0e      	ldr	r6, [pc, #56]	; (8005750 <sbrk_aligned+0x3c>)
 8005718:	460c      	mov	r4, r1
 800571a:	6831      	ldr	r1, [r6, #0]
 800571c:	4605      	mov	r5, r0
 800571e:	b911      	cbnz	r1, 8005726 <sbrk_aligned+0x12>
 8005720:	f000 f8bc 	bl	800589c <_sbrk_r>
 8005724:	6030      	str	r0, [r6, #0]
 8005726:	4621      	mov	r1, r4
 8005728:	4628      	mov	r0, r5
 800572a:	f000 f8b7 	bl	800589c <_sbrk_r>
 800572e:	1c43      	adds	r3, r0, #1
 8005730:	d00a      	beq.n	8005748 <sbrk_aligned+0x34>
 8005732:	1cc4      	adds	r4, r0, #3
 8005734:	f024 0403 	bic.w	r4, r4, #3
 8005738:	42a0      	cmp	r0, r4
 800573a:	d007      	beq.n	800574c <sbrk_aligned+0x38>
 800573c:	1a21      	subs	r1, r4, r0
 800573e:	4628      	mov	r0, r5
 8005740:	f000 f8ac 	bl	800589c <_sbrk_r>
 8005744:	3001      	adds	r0, #1
 8005746:	d101      	bne.n	800574c <sbrk_aligned+0x38>
 8005748:	f04f 34ff 	mov.w	r4, #4294967295
 800574c:	4620      	mov	r0, r4
 800574e:	bd70      	pop	{r4, r5, r6, pc}
 8005750:	2000049c 	.word	0x2000049c

08005754 <_malloc_r>:
 8005754:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005758:	1ccd      	adds	r5, r1, #3
 800575a:	f025 0503 	bic.w	r5, r5, #3
 800575e:	3508      	adds	r5, #8
 8005760:	2d0c      	cmp	r5, #12
 8005762:	bf38      	it	cc
 8005764:	250c      	movcc	r5, #12
 8005766:	2d00      	cmp	r5, #0
 8005768:	4607      	mov	r7, r0
 800576a:	db01      	blt.n	8005770 <_malloc_r+0x1c>
 800576c:	42a9      	cmp	r1, r5
 800576e:	d905      	bls.n	800577c <_malloc_r+0x28>
 8005770:	230c      	movs	r3, #12
 8005772:	603b      	str	r3, [r7, #0]
 8005774:	2600      	movs	r6, #0
 8005776:	4630      	mov	r0, r6
 8005778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800577c:	4e2e      	ldr	r6, [pc, #184]	; (8005838 <_malloc_r+0xe4>)
 800577e:	f000 f89d 	bl	80058bc <__malloc_lock>
 8005782:	6833      	ldr	r3, [r6, #0]
 8005784:	461c      	mov	r4, r3
 8005786:	bb34      	cbnz	r4, 80057d6 <_malloc_r+0x82>
 8005788:	4629      	mov	r1, r5
 800578a:	4638      	mov	r0, r7
 800578c:	f7ff ffc2 	bl	8005714 <sbrk_aligned>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	4604      	mov	r4, r0
 8005794:	d14d      	bne.n	8005832 <_malloc_r+0xde>
 8005796:	6834      	ldr	r4, [r6, #0]
 8005798:	4626      	mov	r6, r4
 800579a:	2e00      	cmp	r6, #0
 800579c:	d140      	bne.n	8005820 <_malloc_r+0xcc>
 800579e:	6823      	ldr	r3, [r4, #0]
 80057a0:	4631      	mov	r1, r6
 80057a2:	4638      	mov	r0, r7
 80057a4:	eb04 0803 	add.w	r8, r4, r3
 80057a8:	f000 f878 	bl	800589c <_sbrk_r>
 80057ac:	4580      	cmp	r8, r0
 80057ae:	d13a      	bne.n	8005826 <_malloc_r+0xd2>
 80057b0:	6821      	ldr	r1, [r4, #0]
 80057b2:	3503      	adds	r5, #3
 80057b4:	1a6d      	subs	r5, r5, r1
 80057b6:	f025 0503 	bic.w	r5, r5, #3
 80057ba:	3508      	adds	r5, #8
 80057bc:	2d0c      	cmp	r5, #12
 80057be:	bf38      	it	cc
 80057c0:	250c      	movcc	r5, #12
 80057c2:	4629      	mov	r1, r5
 80057c4:	4638      	mov	r0, r7
 80057c6:	f7ff ffa5 	bl	8005714 <sbrk_aligned>
 80057ca:	3001      	adds	r0, #1
 80057cc:	d02b      	beq.n	8005826 <_malloc_r+0xd2>
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	442b      	add	r3, r5
 80057d2:	6023      	str	r3, [r4, #0]
 80057d4:	e00e      	b.n	80057f4 <_malloc_r+0xa0>
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	1b52      	subs	r2, r2, r5
 80057da:	d41e      	bmi.n	800581a <_malloc_r+0xc6>
 80057dc:	2a0b      	cmp	r2, #11
 80057de:	d916      	bls.n	800580e <_malloc_r+0xba>
 80057e0:	1961      	adds	r1, r4, r5
 80057e2:	42a3      	cmp	r3, r4
 80057e4:	6025      	str	r5, [r4, #0]
 80057e6:	bf18      	it	ne
 80057e8:	6059      	strne	r1, [r3, #4]
 80057ea:	6863      	ldr	r3, [r4, #4]
 80057ec:	bf08      	it	eq
 80057ee:	6031      	streq	r1, [r6, #0]
 80057f0:	5162      	str	r2, [r4, r5]
 80057f2:	604b      	str	r3, [r1, #4]
 80057f4:	4638      	mov	r0, r7
 80057f6:	f104 060b 	add.w	r6, r4, #11
 80057fa:	f000 f865 	bl	80058c8 <__malloc_unlock>
 80057fe:	f026 0607 	bic.w	r6, r6, #7
 8005802:	1d23      	adds	r3, r4, #4
 8005804:	1af2      	subs	r2, r6, r3
 8005806:	d0b6      	beq.n	8005776 <_malloc_r+0x22>
 8005808:	1b9b      	subs	r3, r3, r6
 800580a:	50a3      	str	r3, [r4, r2]
 800580c:	e7b3      	b.n	8005776 <_malloc_r+0x22>
 800580e:	6862      	ldr	r2, [r4, #4]
 8005810:	42a3      	cmp	r3, r4
 8005812:	bf0c      	ite	eq
 8005814:	6032      	streq	r2, [r6, #0]
 8005816:	605a      	strne	r2, [r3, #4]
 8005818:	e7ec      	b.n	80057f4 <_malloc_r+0xa0>
 800581a:	4623      	mov	r3, r4
 800581c:	6864      	ldr	r4, [r4, #4]
 800581e:	e7b2      	b.n	8005786 <_malloc_r+0x32>
 8005820:	4634      	mov	r4, r6
 8005822:	6876      	ldr	r6, [r6, #4]
 8005824:	e7b9      	b.n	800579a <_malloc_r+0x46>
 8005826:	230c      	movs	r3, #12
 8005828:	603b      	str	r3, [r7, #0]
 800582a:	4638      	mov	r0, r7
 800582c:	f000 f84c 	bl	80058c8 <__malloc_unlock>
 8005830:	e7a1      	b.n	8005776 <_malloc_r+0x22>
 8005832:	6025      	str	r5, [r4, #0]
 8005834:	e7de      	b.n	80057f4 <_malloc_r+0xa0>
 8005836:	bf00      	nop
 8005838:	20000498 	.word	0x20000498

0800583c <_realloc_r>:
 800583c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005840:	4680      	mov	r8, r0
 8005842:	4614      	mov	r4, r2
 8005844:	460e      	mov	r6, r1
 8005846:	b921      	cbnz	r1, 8005852 <_realloc_r+0x16>
 8005848:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800584c:	4611      	mov	r1, r2
 800584e:	f7ff bf81 	b.w	8005754 <_malloc_r>
 8005852:	b92a      	cbnz	r2, 8005860 <_realloc_r+0x24>
 8005854:	f7ff ff12 	bl	800567c <_free_r>
 8005858:	4625      	mov	r5, r4
 800585a:	4628      	mov	r0, r5
 800585c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005860:	f000 f838 	bl	80058d4 <_malloc_usable_size_r>
 8005864:	4284      	cmp	r4, r0
 8005866:	4607      	mov	r7, r0
 8005868:	d802      	bhi.n	8005870 <_realloc_r+0x34>
 800586a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800586e:	d812      	bhi.n	8005896 <_realloc_r+0x5a>
 8005870:	4621      	mov	r1, r4
 8005872:	4640      	mov	r0, r8
 8005874:	f7ff ff6e 	bl	8005754 <_malloc_r>
 8005878:	4605      	mov	r5, r0
 800587a:	2800      	cmp	r0, #0
 800587c:	d0ed      	beq.n	800585a <_realloc_r+0x1e>
 800587e:	42bc      	cmp	r4, r7
 8005880:	4622      	mov	r2, r4
 8005882:	4631      	mov	r1, r6
 8005884:	bf28      	it	cs
 8005886:	463a      	movcs	r2, r7
 8005888:	f7ff fed0 	bl	800562c <memcpy>
 800588c:	4631      	mov	r1, r6
 800588e:	4640      	mov	r0, r8
 8005890:	f7ff fef4 	bl	800567c <_free_r>
 8005894:	e7e1      	b.n	800585a <_realloc_r+0x1e>
 8005896:	4635      	mov	r5, r6
 8005898:	e7df      	b.n	800585a <_realloc_r+0x1e>
	...

0800589c <_sbrk_r>:
 800589c:	b538      	push	{r3, r4, r5, lr}
 800589e:	4d06      	ldr	r5, [pc, #24]	; (80058b8 <_sbrk_r+0x1c>)
 80058a0:	2300      	movs	r3, #0
 80058a2:	4604      	mov	r4, r0
 80058a4:	4608      	mov	r0, r1
 80058a6:	602b      	str	r3, [r5, #0]
 80058a8:	f000 f81e 	bl	80058e8 <_sbrk>
 80058ac:	1c43      	adds	r3, r0, #1
 80058ae:	d102      	bne.n	80058b6 <_sbrk_r+0x1a>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	b103      	cbz	r3, 80058b6 <_sbrk_r+0x1a>
 80058b4:	6023      	str	r3, [r4, #0]
 80058b6:	bd38      	pop	{r3, r4, r5, pc}
 80058b8:	200004a0 	.word	0x200004a0

080058bc <__malloc_lock>:
 80058bc:	4801      	ldr	r0, [pc, #4]	; (80058c4 <__malloc_lock+0x8>)
 80058be:	f000 b811 	b.w	80058e4 <__retarget_lock_acquire_recursive>
 80058c2:	bf00      	nop
 80058c4:	200004a4 	.word	0x200004a4

080058c8 <__malloc_unlock>:
 80058c8:	4801      	ldr	r0, [pc, #4]	; (80058d0 <__malloc_unlock+0x8>)
 80058ca:	f000 b80c 	b.w	80058e6 <__retarget_lock_release_recursive>
 80058ce:	bf00      	nop
 80058d0:	200004a4 	.word	0x200004a4

080058d4 <_malloc_usable_size_r>:
 80058d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d8:	1f18      	subs	r0, r3, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bfbc      	itt	lt
 80058de:	580b      	ldrlt	r3, [r1, r0]
 80058e0:	18c0      	addlt	r0, r0, r3
 80058e2:	4770      	bx	lr

080058e4 <__retarget_lock_acquire_recursive>:
 80058e4:	4770      	bx	lr

080058e6 <__retarget_lock_release_recursive>:
 80058e6:	4770      	bx	lr

080058e8 <_sbrk>:
 80058e8:	4a04      	ldr	r2, [pc, #16]	; (80058fc <_sbrk+0x14>)
 80058ea:	6811      	ldr	r1, [r2, #0]
 80058ec:	4603      	mov	r3, r0
 80058ee:	b909      	cbnz	r1, 80058f4 <_sbrk+0xc>
 80058f0:	4903      	ldr	r1, [pc, #12]	; (8005900 <_sbrk+0x18>)
 80058f2:	6011      	str	r1, [r2, #0]
 80058f4:	6810      	ldr	r0, [r2, #0]
 80058f6:	4403      	add	r3, r0
 80058f8:	6013      	str	r3, [r2, #0]
 80058fa:	4770      	bx	lr
 80058fc:	200004a8 	.word	0x200004a8
 8005900:	200004b0 	.word	0x200004b0

08005904 <_init>:
 8005904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005906:	bf00      	nop
 8005908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800590a:	bc08      	pop	{r3}
 800590c:	469e      	mov	lr, r3
 800590e:	4770      	bx	lr

08005910 <_fini>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	bf00      	nop
 8005914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005916:	bc08      	pop	{r3}
 8005918:	469e      	mov	lr, r3
 800591a:	4770      	bx	lr
